package core

import (
	"context"
	"{{ .Pr.Uri }}/{{ .Pr.EntitiesDirPath.Rel }}"
	"{{ .Pr.Uri }}/internal/domain/errs"
)

type {{ .EName.Camel }} struct {
	r *St
}

func New{{ .EName.Camel }}(r *St) *{{ .EName.Camel }} {
	return &{{ .EName.Camel }}{r: r}
}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (c *{{ .EName.Camel }}) ValidateCU(ctx context.Context, obj *entities.{{ .EName.Camel }}CUSt, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ else }}pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}) error {
	// forCreate := {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }} == {{ .Ent.IdField.ZeroValue }}{{ else }}pars == nil{{ end }}

	return nil
}
{{ end }}

func (c *{{ .EName.Camel }}) List(ctx context.Context{{ if .Ent.ListParsSt }}, pars *entities.{{ .EName.Camel }}ListParsSt{{ end }}) ([]*entities.{{ .EName.Camel }}ListSt, int64, error) {
	items, tCount, err := c.r.repo.{{ .EName.Camel }}List(ctx{{ if .Ent.ListParsSt }}, pars{{ end }})
	if err != nil {
		return nil, 0, err
	}

	return items, tCount, nil
}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (c *{{ .EName.Camel }}) Get(ctx context.Context{{ if .Ent.IdField }}, {{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ end }}{{ if .Ent.GetParsSt }}, pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}, errNE bool) (*entities.{{ .EName.Camel }}St, error) {
	result, err := c.r.repo.{{ .EName.Camel }}Get(ctx{{ if .Ent.IdField }}, {{ .Ent.IdField.Name.LCamel }}{{ end }}{{ if .Ent.GetParsSt }}, pars{{ end }})
	if err != nil {
		return nil, err
	}
	if result == nil {
		if errNE {
			return nil, dopErrs.ObjectNotFound
		}
		return nil, nil
	}

	return result, nil
}
{{ end }}

{{ if .Ent.IdField }}
func (c *{{ .EName.Camel }}) {{ .Ent.IdField.Name.Camel }}Exists(ctx context.Context, {{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}) (bool, error) {
	return c.r.repo.{{ .EName.Camel }}{{ .Ent.IdField.Name.Camel }}Exists(ctx, {{ .Ent.IdField.Name.LCamel }})
}
{{ end }}

func (c *{{ .EName.Camel }}) Create(ctx context.Context, obj *entities.{{ .EName.Camel }}CUSt) {{ if .Ent.IdField }}({{ .Ent.IdField.Type }}, error){{ else }}error{{ end }} {
	var err error

	{{ if or .Ent.IdField .Ent.GetParsSt -}}
	err = c.ValidateCU(ctx, obj{{ if .Ent.IdField }}, {{ .Ent.IdField.ZeroValue }}{{ else }}, nil{{ end }})
	if err != nil {
		return {{ if .Ent.IdField }}{{ .Ent.IdField.ZeroValue }}, {{ end }}err
	}{{ end }}

	// create
	{{ if .Ent.IdField }}result, {{ end }}err {{ if .Ent.IdField }}:{{ end }}= c.r.repo.{{ .EName.Camel }}Create(ctx, obj)
	if err != nil {
		return {{ if .Ent.IdField }}{{ .Ent.IdField.ZeroValue }}, {{ end }}err
	}

	return {{ if .Ent.IdField }}result, {{ end }}nil
}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (c *{{ .EName.Camel }}) Update(ctx context.Context, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ else }}pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}, obj *entities.{{ .EName.Camel }}CUSt) error {
	var err error

	err = c.ValidateCU(ctx, obj, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }}{{ else }}pars{{ end }})
	if err != nil {
		return err
	}

	err = c.r.repo.{{ .EName.Camel }}Update(ctx, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }}{{ else }}pars{{ end }}, obj)
	if err != nil {
		return err
	}

	return nil
}
{{ end }}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (c *{{ .EName.Camel }}) Delete(ctx context.Context, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ else }}pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}) error {
	return c.r.repo.{{ .EName.Camel }}Delete(ctx, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }}{{ else }}pars{{ end }})
}
{{ end }}
