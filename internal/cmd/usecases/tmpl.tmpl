package usecases

import (
	"context"
	"{{ .Pr.Uri }}/{{ .Pr.EntitiesDirPath.Rel }}"
)

func (u *St) {{ .EName.Camel }}List(ctx context.Context{{ if .Ent.ListParsSt }},
	pars *entities.{{ .EName.Camel }}ListParsSt{{ end }}) ([]*entities.{{ .Ent.ListSt.Name.Origin }}, int64, error) {
	{{ if not .Ent.ListParsSt }}// {{ end }}var err error

	// ses := u.SessionGetFromContext(ctx)
  //
	// if err = u.SessionRequireAuth(ses); err != nil {
	// 	return nil, 0, err
	// }

	{{- if .Ent.ListParsSt }}
	if err = dopTools.RequirePageSize(pars.ListParams, cns.MaxPageSize); err != nil {
		return nil, 0, err
	}
	{{- end }}

	return u.cr.{{ .EName.Camel }}.List(ctx{{ if .Ent.ListParsSt }}, pars{{ end }})
}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (u *St) {{ .EName.Camel }}Get(ctx context.Context{{ if .Ent.IdField }}, {{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ end }}{{ if .Ent.GetParsSt }}, pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}) (*entities.{{ .EName.Camel }}St, error) {
	// var err error

	// ses := u.SessionGetFromContext(ctx)
	//
	// if err = u.SessionRequireAuth(ses); err != nil {
	// 	return nil, 0, err
	// }

	return u.cr.{{ .EName.Camel }}.Get(ctx{{ if .Ent.IdField }}, {{ .Ent.IdField.Name.LCamel }}{{ end }}{{ if .Ent.GetParsSt }}, pars{{ end }}, true)
}
{{ end }}

func (u *St) {{ .EName.Camel }}Create(ctx context.Context,
	obj *entities.{{ .EName.Camel }}CUSt) {{ if .Ent.IdField }}({{ .Ent.IdField.Type }}, error){{ else }}error{{ end }} {
	{{ if .Ent.IdField -}}
		var err error

		// ses := u.SessionGetFromContext(ctx)
		//
		// if err = u.SessionRequireAuth(ses); err != nil {
		// 	return {{ if .Ent.IdField }}{{ .Ent.IdField.ZeroValue }}, {{ end }}err
		// }

		var result {{ .Ent.IdField.Type }}

		err = u.db.TransactionFn(ctx, func(ctx context.Context) error {
			result, err = u.cr.{{ .EName.Camel }}.Create(ctx, obj)
			return err
		})

		return result, err
	{{- else -}}
		// ses := u.SessionGetFromContext(ctx)
		//
		// if err = u.SessionRequireAuth(ses); err != nil {
		// 	return {{ if .Ent.IdField }}{{ .Ent.IdField.ZeroValue }}, {{ end }}err
		// }

		return u.db.TransactionFn(ctx, func(ctx context.Context) error {
			return u.cr.{{ .EName.Camel }}.Create(ctx, obj)
		})
	{{- end }}
}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (u *St) {{ .EName.Camel }}Update(ctx context.Context,
    {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ else }}pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}, obj *entities.{{ .EName.Camel }}CUSt) error {
	// ses := u.SessionGetFromContext(ctx)
	//
	// if err = u.SessionRequireAuth(ses); err != nil {
	// 	return err
	// }

	return u.db.TransactionFn(ctx, func(ctx context.Context) error {
		return u.cr.{{ .EName.Camel }}.Update(ctx, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }}{{ else }}pars{{ end }}, obj)
	})
}
{{ end }}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (u *St) {{ .EName.Camel }}Delete(ctx context.Context,
    {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ else }}pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}) error {
	// ses := u.SessionGetFromContext(ctx)
	//
	// if err = u.SessionRequireAuth(ses); err != nil {
	// 	return err
	// }

	return u.db.TransactionFn(ctx, func(ctx context.Context) error {
		return u.cr.{{ .EName.Camel }}.Delete(ctx, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }}{{ else }}pars{{ end }})
	})
}
{{ end }}
