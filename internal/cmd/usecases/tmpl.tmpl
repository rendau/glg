package usecases

import (
	"context"
	"{{ .Pr.Uri }}/{{ .Pr.EntitiesDirPath.Rel }}"
)

func (u *St) {{ .EName.Camel }}List(ctx context.Context{{ if .Ent.ListParsSt }},
	pars *entities.{{ .EName.Camel }}ListParsSt{{ end }}) ([]*entities.{{ .EName.Camel }}ListSt{{ if .Ctx4List.hasPagination -}}, int64{{ end }}, error) {
	var err error

	ses := u.SessionGetFromContext(ctx)

	if err = u.SessionRequireAuth(ses); err != nil {
		return nil{{ if .Ctx4List.hasPagination -}}, 0{{ end }}, err
	}

	{{- if .Ctx4List.hasPagination }}

		if err = util.RequirePageSize(pars.PaginationParams, 0); err != nil {
			return nil, 0, err
		}
	{{- end }}

	return u.cr.{{ .EName.Camel }}.List(ctx{{ if .Ent.ListParsSt }}, pars{{ end }})
}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (u *St) {{ .EName.Camel }}Get(ctx context.Context{{ if .Ent.IdField }}, {{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ end }}{{ if .Ent.GetParsSt }}, pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}) (*entities.{{ .EName.Camel }}St, error) {
	var err error

	ses := u.SessionGetFromContext(ctx)

	if err = u.SessionRequireAuth(ses); err != nil {
		return nil, err
	}

	return u.cr.{{ .EName.Camel }}.Get(ctx{{ if .Ent.IdField }}, {{ .Ent.IdField.Name.LCamel }}{{ end }}{{ if .Ent.GetParsSt }}, pars{{ end }}, true)
}
{{ end }}

func (u *St) {{ .EName.Camel }}Create(ctx context.Context,
	obj *entities.{{ .EName.Camel }}CUSt) {{ if .Ent.IdField }}({{ .Ent.IdField.Type }}, error){{ else }}error{{ end }} {
	var err error

	ses := u.SessionGetFromContext(ctx)

	if err = u.SessionRequireAuth(ses); err != nil {
		return {{ if .Ent.IdField }}{{ .Ent.IdField.ZeroValue }}, {{ end }}err
	}

	if ctx, err = u.db.ContextWithTransaction(ctx); err != nil {
		return {{ if .Ent.IdField }}{{ .Ent.IdField.ZeroValue }}, {{ end }}err
	}
	defer func() { u.db.RollbackContextTransaction(ctx) }()

	{{ if .Ent.IdField }}result, err :={{ else }}err ={{ end }} u.cr.{{ .EName.Camel }}.Create(ctx, obj)
	if err != nil {
		return {{ if .Ent.IdField }}{{ .Ent.IdField.ZeroValue }}, {{ end }}err
	}

	if err = u.db.CommitContextTransaction(ctx); err != nil {
		return {{ if .Ent.IdField }}{{ .Ent.IdField.ZeroValue }}, {{ end }}err
	}

	return {{ if .Ent.IdField }}result, {{ end }}nil
}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (u *St) {{ .EName.Camel }}Update(ctx context.Context,
    {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ else }}pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}, obj *entities.{{ .EName.Camel }}CUSt) error {
	var err error

	ses := u.SessionGetFromContext(ctx)

	if err = u.SessionRequireAuth(ses); err != nil {
		return err
	}

	if ctx, err = u.db.ContextWithTransaction(ctx); err != nil {
		return err
	}
	defer func() { u.db.RollbackContextTransaction(ctx) }()

	err = u.cr.{{ .EName.Camel }}.Update(ctx, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }}{{ else }}pars{{ end }}, obj)
	if err != nil {
		return err
	}

	if err = u.db.CommitContextTransaction(ctx); err != nil {
		return err
	}

	return nil
}
{{ end }}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (u *St) {{ .EName.Camel }}Delete(ctx context.Context,
    {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ else }}pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}) error {
	var err error

	ses := u.SessionGetFromContext(ctx)

	if err = u.SessionRequireAuth(ses); err != nil {
		return err
	}

	if ctx, err = u.db.ContextWithTransaction(ctx); err != nil {
		return err
	}
	defer func() { u.db.RollbackContextTransaction(ctx) }()

	err = u.cr.{{ .EName.Camel }}.Delete(ctx, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }}{{ else }}pars{{ end }})
	if err != nil {
		return err
	}

	if err = u.db.CommitContextTransaction(ctx); err != nil {
		return err
	}

	return nil
}
{{ end }}
