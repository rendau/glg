package pg

import (
    "context"
    "database/sql"
    "github.com/jackc/pgx/v4"
    "github.com/jackc/pgtype"
    "{{ .Pr.Uri }}/{{ .Pr.EntitiesDirPath.Rel }}"
)

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (d *St) {{ .EName.Camel }}Get(ctx context.Context{{ if .Ent.IdField }}, {{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ end }}{{ if .Ent.GetParsSt }}, pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}) (*entities.{{ .EName.Camel }}St, error) {
    {{ if .Ent.GetParsSt }}
        conds := make([]string, 0)
        args := map[string]any{}

        {{ if .Ent.IdField -}}
            conds = append(conds, `t.{{ .Ent.IdField.DbName }} = {{ "${" }}{{ .Ent.IdField.Name.Snake }}{{ "}" }}`)
            args["{{ .Ent.IdField.Name.Snake }}"] = {{ .Ent.IdField.Name.LCamel }}
        {{- end }}

        {{ if .Ent.GetParsSt }}
            {{- range $field := .Ent.GetParsSt.Fields }}
                {{- if $field.IsTypePointer }}
                    {{- if parsFieldAssocName $.Ent $field }}
                        if pars.{{ $field.Name.Origin }} != nil {
                            conds = append(conds, `t.{{ parsFieldAssocName $.Ent $field }} = {{ "${" }}{{ $field.Name.Snake }}{{ "}" }}`)
                            args["{{ $field.Name.Snake }}"] = *pars.{{ $field.Name.Origin }}
                        }
                    {{- end }}
                {{ else if $field.IsId }}
                    conds = append(conds, `t.{{ $.Ent.IdField.DbName }} = {{ "${" }}{{ $.Ent.IdField.Name.Snake }}{{ "}" }}`)
                    args["{{ $.Ent.IdField.Name.Snake }}"] = pars.{{ $field.Name.Origin }}
                {{ end }}
            {{- end }}
        {{- end }}

        result := &entities.{{ .EName.Camel }}St{}

        err := d.HfGet(ctx, db.RDBGetOptions{
            Dst:    result,
            Tables: []string{"{{ .TName }} t"},
            Conds:  conds,
            Args:   args,
        })
        if errors.Is(err, dopErrs.NoRows) {
            result = nil
            err = nil
        }

        return result, nil
    {{- else -}}
        result := &entities.{{ .EName.Camel }}St{}

        err := d.HfGet(ctx, db.RDBGetOptions{
            Dst:    result,
            Tables: []string{"{{ .TName }}"},
            Conds:  []string{"{{ .Ent.IdField.DbName }} = {{ "${" }}{{ .Ent.IdField.Name.Snake }}{{ "}" }}"},
            Args:   map[string]any{"{{ .Ent.IdField.Name.Snake }}": {{ .Ent.IdField.Name.LCamel }}},
        })
        if errors.Is(err, dopErrs.NoRows) {
            result = nil
            err = nil
        }

        return result, err
    {{- end }}
}
{{ end }}

func (d *St) {{ .EName.Camel }}List(ctx context.Context{{ if .Ent.ListParsSt -}}, pars *entities.{{ .EName.Camel }}ListParsSt{{ end }}) ([]*entities.{{ .Ent.ListSt.Name.Origin }}, int64, error) {
    conds := make([]string, 0)
    args := map[string]any{}

    {{ if .Ent.ListParsSt -}}
        // filter
        {{- range $field := .Ctx4List.parsFields }}
            {{- if or $field.IsTypePointer $field.IsTypeSlice }}
                {{- if parsFieldAssocName $.Ent $field }}
                    {{- if fieldSubQueryForIn $field $field.Name.Snake }}
                        if pars.{{ $field.Name.Origin }} != nil {
                            conds = append(conds, `t.{{ parsFieldAssocName $.Ent $field }} in {{ fieldSubQueryForIn $field $field.Name.Snake }}`)
                            args["{{ $field.Name.Snake }}"] = {{ if $field.IsTypePointer }}*{{ end }}pars.{{ $field.Name.Origin }}
                        }
                    {{- else if and $field.IsNullable $field.PVZeroValue }}
                        if pars.{{ $field.Name.Origin }} != nil {
                            if *pars.{{ $field.Name.Origin }} == {{ $field.PVZeroValue }} {
                                conds = append(conds, `t.{{ parsFieldAssocName $.Ent $field }} is null`)
                            } else {
                                conds = append(conds, `t.{{ parsFieldAssocName $.Ent $field }} = {{ "${" }}{{ $field.Name.Snake }}{{ "}" }}`)
                                args["{{ $field.Name.Snake }}"] = *pars.{{ $field.Name.Origin }}
                            }
                        }
                    {{- else if not $field.IsTypeSlice }}
                        if pars.{{ $field.Name.Origin }} != nil {
                            conds = append(conds, `t.{{ parsFieldAssocName $.Ent $field }} = {{ "${" }}{{ $field.Name.Snake }}{{ "}" }}`)
                            args["{{ $field.Name.Snake }}"] = *pars.{{ $field.Name.Origin }}
                        }
                    {{- end }}
                {{- end }}
            {{- end }}
        {{- end }}
    {{- end }}

    result := make([]*entities.{{ .Ent.ListSt.Name.Origin }}, 0, 100)

    tCount, err := d.HfList(ctx, db.RDBListOptions{
        Dst:    &result,
        Tables: []string{`{{ .TName }} t`},
        {{ if .Ent.ListParsSt }}LPars:  pars.ListParams,{{ end }}
        Conds:  conds,
        Args:   args,
        AllowedSorts: map[string]string{
            "default": "t.{{ (index .Ctx4List.fields 0).DbName }}",
        },
    })

    return result, tCount, err
}

{{ if .Ent.IdField }}
func (d *St) {{ .EName.Camel }}{{ .Ent.IdField.Name.Camel }}Exists(ctx context.Context, {{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}) (bool, error) {
    var cnt int

    err := d.DbQueryRow(ctx, `
        select count(*)
        from {{ .TName }}
        where {{ .Ent.IdField.DbName }} = $1
    `, {{ .Ent.IdField.Name.LCamel }}).Scan(&cnt)

    return cnt > 0, err
}
{{ end }}

func (d *St) {{ .EName.Camel }}Create(ctx context.Context, obj *entities.{{ .EName.Camel }}CUSt) {{ if .Ent.IdField }}({{ .Ent.IdField.Type }}, error){{ else }}error{{ end }} {
    {{ if .Ent.IdField -}}
        var result {{ .Ent.IdField.Type }}

        err := d.HfCreate(ctx, db.RDBCreateOptions{
            Table:  "{{ .TName }}",
            Obj:    obj,
            RetCol: "{{ .Ent.IdField.DbName }}",
            RetV:   &result,
        })

        return result, err
    {{- else -}}
        return d.HfCreate(ctx, db.RDBCreateOptions{
            Table:  "{{ .TName }}",
            Obj:    obj,
        })
    {{- end }}
}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (d *St) {{ .EName.Camel }}Update(ctx context.Context, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ else }}pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}, obj *entities.{{ .EName.Camel }}CUSt) error {
    {{ if .Ent.IdField -}}
        return d.HfUpdate(ctx, db.RDBUpdateOptions{
            Table: "{{ .TName }}",
            Obj:   obj,
            Conds: []string{"{{ .Ent.IdField.DbName }} = ${cond_id}"},
            Args:  map[string]any{"cond_id": {{ .Ent.IdField.Name.LCamel }}},
        })
    {{- else -}}
        conds := make([]string, 0)
        args := map[string]any{}

        {{ range $field := .Ent.GetParsSt.Fields -}}
            {{- if $field.IsTypePointer }}
                {{- if parsFieldAssocName $.Ent $field }}
                    if pars.{{ $field.Name.Origin }} != nil {
                        conds = append(conds, `{{ parsFieldAssocName $.Ent $field }} = {{ "${cond_" }}{{ $field.Name.Snake }}{{ "}" }}`)
                        args["cond_{{ $field.Name.Snake }}"] = *pars.{{ $field.Name.Origin }}
                    }
                {{- end }}
            {{ else if $field.IsId }}
                conds = append(conds, `{{ $.Ent.IdField.DbName }} = {{ "${cond_" }}{{ $.Ent.IdField.Name.Snake }}{{ "}" }}`)
                args["cond_{{ $.Ent.IdField.Name.Snake }}"] = pars.{{ $field.Name.Origin }}
            {{ end }}
        {{- end }}

        return d.HfUpdate(ctx, db.RDBUpdateOptions{
            Table: "{{ .TName }}",
            Obj:   obj,
            Conds: conds,
            Args:  args,
        })
    {{- end }}
}
{{ end }}

{{ if or .Ent.IdField .Ent.GetParsSt }}
func (d *St) {{ .EName.Camel }}Delete(ctx context.Context, {{ if .Ent.IdField }}{{ .Ent.IdField.Name.LCamel }} {{ .Ent.IdField.Type }}{{ else }}pars *entities.{{ .EName.Camel }}GetParsSt{{ end }}) error {
    {{ if .Ent.IdField -}}
        return d.HfDelete(ctx, db.RDBDeleteOptions{
            Table: "{{ .TName }}",
            Conds: []string{"{{ .Ent.IdField.DbName }} = ${cond_id}"},
            Args:  map[string]any{"cond_id": {{ .Ent.IdField.Name.LCamel }}},
        })
    {{- else -}}
        conds := make([]string, 0)
        args := map[string]any{}

        {{ range $field := .Ent.GetParsSt.Fields -}}
            {{- if $field.IsTypePointer }}
                {{- if parsFieldAssocName $.Ent $field }}
                    if pars.{{ $field.Name.Origin }} != nil {
                        conds = append(conds, `{{ parsFieldAssocName $.Ent $field }} = {{ "${cond_" }}{{ $field.Name.Snake }}{{ "}" }}`)
                        args["cond_{{ $field.Name.Snake }}"] = *pars.{{ $field.Name.Origin }}
                    }
                {{- end }}
            {{ else if $field.IsId }}
                conds = append(conds, `{{ $.Ent.IdField.DbName }} = {{ "${cond_" }}{{ $.Ent.IdField.Name.Snake }}{{ "}" }}`)
                args["cond_{{ $.Ent.IdField.Name.Snake }}"] = pars.{{ $field.Name.Origin }}
            {{ end }}
        {{- end }}

        return d.HfDelete(ctx, db.RDBDeleteOptions{
            Table: "{{ .TName }}",
            Conds: conds,
            Args:  args,
        })
    {{- end }}
}
{{ end }}
