package rest

import (
    "net/http"
    "strconv"

    dopHttps "github.com/rendau/dop/adapters/server/https"
)

// @Router   /{{ .EName.Snake }} [get]
// @Tags     {{ .EName.Snake }}
// @Param    query  query  entities.{{ .EName.Camel }}ListParsSt  false  "query"
// @Produce  json
// @Success  200  {object}  dopTypes.{{ if .Ent.ListParsSt -}}PaginatedListRep{{ else }}ListRep{{ end }}{results=[]entities.{{ .Ent.ListSt.Name.Origin }}}
// @Failure  400  {object}  dopTypes.ErrRep
func (o *St) h{{ .EName.Camel }}List(c *gin.Context) {
    {{ if .Ent.ListParsSt -}}
        pars := &entities.{{ .EName.Camel }}ListParsSt{}
        if !dopHttps.BindQuery(c, pars) {
            return
        }

        result, tCount, err := o.ucs.{{ .EName.Camel }}List(o.getRequestContext(c), pars)
        if dopHttps.Error(c, err) {
            return
        }

        c.JSON(http.StatusOK, dopTypes.PaginatedListRep{
            Page:       pars.Page,
            PageSize:   pars.PageSize,
            TotalCount: tCount,
            Results: result,
        })
    {{- else -}}
        result, _, err := o.ucs.{{ .EName.Camel }}List(o.getRequestContext(c))
        if dopHttps.Error(c, err) {
            return
        }

        c.JSON(http.StatusOK, dopTypes.ListRep{
            Results: result,
        })
    {{- end }}
}

// @Router   /{{ .EName.Snake }} [post]
// @Tags     {{ .EName.Snake }}
// @Param    body  body  entities.{{ .EName.Camel }}CUSt  false  "body"
// @Success  200  {{ if .Ent.IdField }}{object} dopTypes.CreateRep{id={{ getTypeForSwag .Ent.IdField }}}{{ end }}
// @Failure  400  {object}  dopTypes.ErrRep
func (o *St) h{{ .EName.Camel }}Create(c *gin.Context) {
    reqObj := &entities.{{ .EName.Camel }}CUSt{}
    if !dopHttps.BindJSON(c, reqObj) {
        return
    }

    {{ if .Ent.IdField -}}
        result, err := o.ucs.{{ .EName.Camel }}Create(o.getRequestContext(c), reqObj)
        if dopHttps.Error(c, err) {
            return
        }

        c.JSON(http.StatusOK, dopTypes.CreateRep{Id: result})
    {{- else -}}
        dopHttps.Error(c, o.ucs.{{ .EName.Camel }}Create(o.getRequestContext(c), reqObj))
    {{- end }}
}

{{ if or .Ent.IdField .Ent.GetParsSt }}
// @Router   /{{ .EName.Snake }}/{{ if .Ent.IdField }}:{{ .Ent.IdField.JsonName }}{{ else }}one{{ end }} [get]
// @Tags     {{ .EName.Snake }}{{ if .Ent.IdField }}
// @Param    {{ .Ent.IdField.JsonName }} path {{ getTypeForSwag .Ent.IdField }} true "id"{{ end }}{{ if .Ent.GetParsSt }}
// @Param    query  query  entities.{{ .EName.Camel }}GetParsSt  false  "query"{{ end }}
// @Produce  json
// @Success  200  {object}  entities.{{ .EName.Camel }}St
// @Failure  400  {object}  dopTypes.ErrRep
func (o *St) h{{ .EName.Camel }}Get(c *gin.Context) {
    {{ if .Ent.IdField -}}
        {{- if .Ent.IdField.IsTypeInt -}}
            {{ .Ent.IdField.Name.LCamel }}, _ := strconv.ParseInt(c.Param("{{ .Ent.IdField.JsonName }}"), 10, 64)
        {{- else -}}
            {{ .Ent.IdField.Name.LCamel }} := c.Param("{{ .Ent.IdField.JsonName }}")
        {{- end -}}
    {{- end }}

    {{ if .Ent.GetParsSt -}}
        pars := &entities.{{ .EName.Camel }}GetParsSt{}
        if !dopHttps.BindQuery(c, pars) {
            return
        }
    {{- end }}

    result, err := o.ucs.{{ .EName.Camel }}Get(o.getRequestContext(c){{ if .Ent.IdField }}, {{ .Ent.IdField.Name.LCamel }}{{ end }}{{ if .Ent.GetParsSt }}, pars{{ end }})
    if dopHttps.Error(c, err) {
        return
    }

    c.JSON(http.StatusOK, result)
}
{{ end }}

{{ if or .Ent.IdField .Ent.GetParsSt }}
// @Router   /{{ .EName.Snake }}{{ if .Ent.IdField }}/:{{ .Ent.IdField.JsonName }}{{ end }} [put]
// @Tags     {{ .EName.Snake }}{{ if .Ent.IdField }}
// @Param    {{ .Ent.IdField.JsonName }} path {{ getTypeForSwag .Ent.IdField }} true "id"{{ else if .Ent.GetParsSt }}
// @Param    query  query  entities.{{ .EName.Camel }}GetParsSt  false  "query"{{ end }}
// @Param    body  body  entities.{{ .EName.Camel }}CUSt  false  "body"
// @Produce  json
// @Success  200
// @Failure  400  {object}  dopTypes.ErrRep
func (o *St) h{{ .EName.Camel }}Update(c *gin.Context) {
    {{ if .Ent.IdField -}}
        {{- if .Ent.IdField.IsTypeInt -}}
            {{ .Ent.IdField.Name.LCamel }}, _ := strconv.ParseInt(c.Param("{{ .Ent.IdField.JsonName }}"), 10, 64)
        {{- else -}}
            {{ .Ent.IdField.Name.LCamel }} := c.Param("{{ .Ent.IdField.JsonName }}")
        {{- end -}}
    {{- else if .Ent.GetParsSt -}}
        pars := &entities.{{ .EName.Camel }}GetParsSt{}
        if !dopHttps.BindQuery(c, pars) {
            return
        }
    {{- end }}

    reqObj := &entities.{{ .EName.Camel }}CUSt{}
    if !dopHttps.BindJSON(c, reqObj) {
        return
    }

    dopHttps.Error(c, o.ucs.{{ .EName.Camel }}Update(o.getRequestContext(c){{ if .Ent.IdField }}, {{ .Ent.IdField.Name.LCamel }}{{ else if .Ent.GetParsSt }}, pars{{ end }}, reqObj))
}
{{ end }}

{{ if or .Ent.IdField .Ent.GetParsSt }}
// @Router   /{{ .EName.Snake }}{{ if .Ent.IdField }}/:{{ .Ent.IdField.JsonName }}{{ end }} [delete]
// @Tags     {{ .EName.Snake }}{{ if .Ent.IdField }}
// @Param    {{ .Ent.IdField.JsonName }} path {{ getTypeForSwag .Ent.IdField }} true "id"{{ else if .Ent.GetParsSt }}
// @Param    query  query  entities.{{ .EName.Camel }}GetParsSt  false  "query"{{ end }}
// @Success  200
// @Failure  400  {object}  dopTypes.ErrRep
func (o *St) h{{ .EName.Camel }}Delete(c *gin.Context) {
    {{ if .Ent.IdField -}}
        {{- if .Ent.IdField.IsTypeInt -}}
            {{ .Ent.IdField.Name.LCamel }}, _ := strconv.ParseInt(c.Param("{{ .Ent.IdField.JsonName }}"), 10, 64)
        {{- else -}}
            {{ .Ent.IdField.Name.LCamel }} := c.Param("{{ .Ent.IdField.JsonName }}")
        {{- end -}}
    {{- else if .Ent.GetParsSt -}}
        pars := &entities.{{ .EName.Camel }}GetParsSt{}
        if !dopHttps.BindQuery(c, pars) {
        return
        }
    {{- end }}

    dopHttps.Error(c, o.ucs.{{ .EName.Camel }}Delete(o.getRequestContext(c){{ if .Ent.IdField }}, {{ .Ent.IdField.Name.LCamel }}{{ else if .Ent.GetParsSt }}, pars{{ end }}))
}
{{ end }}
