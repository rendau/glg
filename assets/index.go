// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/core.tmpl
// templates/db.tmpl
// templates/interfaces.tmpl
// templates/rest_h.tmpl
// templates/usecases.tmpl
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x41\x8f\xda\x30\x10\x85\xcf\xf1\xaf\x98\x72\xa8\x12\x44\x13\x0e\xab\x1e\x56\xe2\x94\xa5\xd5\x4a\x15\x45\x45\xf4\x52\xf5\x60\x92\x61\xd7\xdb\x60\x23\x7b\xd2\xa5\x8a\xf2\xdf\x2b\x3b\x24\x81\x85\x90\x68\x4f\x28\x61\xfc\xe6\xcd\xf7\x26\xde\xf3\xe4\x0f\x7f\x42\x48\x94\x46\xc6\xc4\x6e\xaf\x34\x81\xcf\xbc\x51\xa2\x24\xe1\x81\x46\xcc\x1b\x15\x05\x84\x4b\x1d\xae\xb5\x80\xb2\x8c\x8e\x4f\x73\x49\x82\x04\x9a\x07\xa1\x97\x9c\x9e\xc3\x1f\x98\x41\x59\x5e\x96\x0b\x49\xa8\x25\xcf\xa2\x54\xed\xb8\x90\x11\x6a\x6d\x46\x2c\x60\x8c\xfe\xed\x11\x6c\xed\x7c\xc1\x77\x18\xc6\x7c\xe7\x14\xc0\x90\xce\x13\x82\x82\x79\x1a\xc6\x2b\x62\x25\x63\xdb\x5c\x26\xb0\xc0\xd7\xcb\x6a\xdf\xd5\x04\x30\xbe\x22\x64\x15\x90\x72\x2d\xe1\xe3\xe5\xbf\x85\xbe\x07\x5d\x36\xe2\x7e\x72\x4d\x22\x80\x9f\x3c\x13\x29\x27\x8c\xd7\x7e\x42\x07\x38\x42\x09\xe3\xea\x77\x02\x6a\xf3\x02\x63\x3c\xa2\x08\x2f\x15\xe2\xf5\x8a\x26\x20\x52\x10\x92\x3e\xdf\x05\x80\x5a\x2b\x6d\x9d\x45\x11\x6c\x95\x8e\x35\x72\x42\xb8\x9f\xd9\x92\xd9\x0c\xa6\xac\xf1\x2c\x45\xd6\xeb\xee\x9b\x30\x74\xdd\xd7\x9e\x6b\x73\xd3\x98\x3d\xba\xe4\xda\x58\x78\xfe\xaf\xdf\x7d\xa5\x2b\x2a\x0a\x10\x5b\x08\x63\x3a\xdc\xd9\x17\xe1\x33\x37\x4b\xfe\x24\x24\x27\xa1\x24\x7c\x2a\xcb\x49\x35\x63\x51\x00\xca\x14\xec\xb3\x1b\x36\xb0\xd3\x0a\xc2\x9d\x19\xa0\x40\xb1\xca\x25\x9d\x4b\x58\x3a\x49\xa8\xc3\x74\xd3\xe1\xcd\x12\xa8\x26\x0e\x98\x27\xb6\xee\xcc\x87\x99\x05\x68\x5b\x9f\xf0\x1c\x60\x60\x7a\xde\x9b\x79\x65\x9b\xc8\xbb\x87\x18\x12\xe5\x57\xec\x48\xb2\xde\x1d\xe7\x67\x31\x87\x8d\x52\x59\x00\xfe\xad\xc0\xec\xca\xb5\xec\x35\x9a\x3c\xa3\x7e\x94\x47\x07\xb6\x63\x0f\xc7\x06\x8d\xad\xaa\xe4\xed\xf2\xd6\x85\xd5\xd1\xc5\xdc\x3d\xbc\x3d\x66\xc2\xef\x9b\x17\x4c\x68\xa1\xe8\x8b\xca\x65\xca\x3c\xab\x73\x56\x65\x71\x9d\x72\xaf\x07\x18\x82\xf1\x31\x9d\x1f\x84\x21\x73\x9b\x65\x00\xbe\xc5\x78\x4e\xc9\xf5\xea\xa4\x73\x2a\x5c\x21\xea\xb3\x52\x7d\xdb\xef\xbf\x36\x02\xf0\xdb\xe0\x8f\x2e\x9b\x0c\xcf\xef\x25\x27\x38\x81\xe9\xad\xdc\xa6\x27\x0b\x1d\x45\x90\x38\x77\xcc\x93\xf8\xfa\x98\xf6\x2f\x47\x3b\x8c\xeb\x35\xb4\x51\x1d\x6b\xd5\x64\x48\x80\xeb\x7d\xda\x49\xad\xfd\x14\x86\xf1\x6b\x2e\xdb\xbf\x5c\x3b\xb3\xee\x05\xab\x30\x76\x52\xbc\xbd\xfe\xcd\x68\xb5\x46\x07\xb0\x76\x0e\xab\xd8\x0b\xed\x82\xd8\x00\x54\x0f\x98\x61\x1f\xaa\x13\x08\x7d\x1b\xde\xca\xd5\xfb\xfd\x3f\x00\x00\xff\xff\xed\x7c\x23\xcd\x1c\x08\x00\x00")

func templatesCoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCoreTmpl,
		"templates/core.tmpl",
	)
}

func templatesCoreTmpl() (*asset, error) {
	bytes, err := templatesCoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/core.tmpl", size: 2076, mode: os.FileMode(420), modTime: time.Unix(1607685002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDbTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x5f\x6f\xdb\x38\x12\x7f\x96\x3e\xc5\x9c\x11\x04\x72\xac\x2a\xce\x5d\x71\x0f\x3d\xb8\x40\xcf\x4d\x8a\x2c\xba\x6d\xb6\x69\xb0\x0f\x45\x51\xd1\x12\xe5\x30\x91\x29\x87\xa4\x13\x07\x86\xbe\xfb\x62\x48\xca\xa6\x64\x59\x76\x8b\xfd\x53\x3d\x24\xd6\x70\x38\x1c\xce\xfc\x38\xf3\xa3\xe6\x24\xb9\x27\x53\x0a\xf3\xa9\xef\xb3\xd9\xbc\x10\x0a\x02\x1f\x00\xa0\x97\x14\x5c\xd1\xa5\xea\x99\xb7\x94\x28\x32\x21\x92\x9e\xca\x87\xdc\x8a\xa6\x4c\xdd\x2e\x26\x51\x52\xcc\x4e\xef\x48\x72\x9f\x9c\xce\xa7\xcb\xd3\xc7\x97\xbb\x47\xd5\xf3\x9c\xda\xd1\xd5\x0a\xa2\x2b\x11\xdd\x08\x06\x65\x79\x6a\xdf\xce\xb9\x62\x8a\x51\xf9\x96\x89\x2b\xa2\x6e\xa3\x4f\x34\x87\xb2\xec\xf9\x7d\xdf\xcf\x16\x3c\x81\x20\x85\x93\x6b\xd5\x07\x54\x3f\xff\x40\x66\x34\x1a\x93\x99\xd6\x79\x47\x55\x90\xa8\x25\x58\x9f\xa3\xb1\xf9\x1f\x02\x4b\x81\x71\xf5\xdf\x97\x7d\x08\x4e\xa8\x35\x1f\x6d\xcf\xbf\x56\x21\x50\x21\x0a\xd1\x87\x95\x76\x50\x50\xb9\xc8\x15\xbc\x1a\xc1\x71\xe7\xb4\x55\xe9\x6b\x7d\x2a\x04\x2a\xa7\xd1\xdb\xc9\x6f\x0b\x2a\x9e\x3f\x15\x4f\xe8\x50\x08\xb1\x1e\xc6\x47\xd2\x9c\x26\x0a\x9d\x17\x84\x4f\x29\x1c\xb1\x10\x8e\x32\x46\xf3\x14\x67\x46\x63\xb5\x7c\xf9\x8e\xaa\x48\x26\x84\x93\x49\x4e\x2f\x70\x44\xc2\x8b\xb2\x5c\x5b\x58\xad\x80\x65\x30\x55\x70\xc4\x60\x08\xce\x80\x7e\x42\x1c\xa7\x3c\x85\xb2\x54\xe8\xab\xb1\x1d\xfd\x22\x0b\x8e\x4e\x43\xcd\xd0\x0b\xab\xb9\x16\x65\xa2\x98\xe9\xc0\x7e\xb6\xca\xa0\xd6\x63\x4f\xb7\x54\x50\x50\x11\x4b\x61\x04\x47\x67\x5a\x1e\x63\x6c\xfb\xd1\x75\x42\xb8\xc1\x0b\xda\xb4\x1b\xdb\xbb\x29\x67\xdd\x63\x13\x69\xc7\x61\x1d\xe1\x8f\x82\x4d\x19\x87\xb2\x0c\xfd\x16\x87\xfb\xfa\x2f\xcb\x74\xd8\xff\x35\x02\xce\x72\x9b\x37\x47\x3e\x1a\xc1\x7c\xba\x8c\xce\x85\xf8\x50\x7c\x2a\x9e\xa4\xa3\x61\x32\xac\x16\x82\xe3\xd4\x10\xff\xac\xc7\x36\xae\xb9\x1a\x69\x74\x4b\x78\x9a\xd3\x73\x04\x89\xc9\x2c\x15\xc2\xf8\x61\x21\x60\xd5\xcd\x7e\x8c\xcd\x72\x2f\x70\xdf\x33\xb9\x03\xb9\x73\x22\x24\x74\x61\x16\xa7\x5e\x11\x21\xd1\x70\xf0\xe5\xeb\x3e\xd5\x6b\x65\xe0\xa3\x73\x82\x82\xe8\x96\xc8\x2b\x32\x65\x9c\x28\x56\x70\x04\x5a\x68\xce\xca\x1a\x46\x8d\x33\xf1\x48\x84\x0e\xac\x16\x9a\x3d\x3f\x5c\x20\x6c\x5e\x8d\x20\x6e\x03\x90\xc1\xfe\xc3\xef\x1a\x3e\x5a\xc9\x20\xe9\x6c\x74\x66\x87\x3e\x66\x99\xa4\xfa\x98\xc5\x56\xf2\x9e\xcd\x58\x25\xd0\x12\x22\xa6\x12\xdf\x67\x64\xfe\x45\x2a\xc1\xf8\xf4\x2b\xe3\x8a\x8a\x8c\x24\x74\x55\x56\xe7\xef\xf4\x14\x32\x96\x2b\x2a\xba\xb1\xa8\xf7\x8d\x91\xdd\x06\x22\xce\x61\x59\x05\xc2\x4b\xf9\xf9\x79\x4e\xaf\x0a\xbd\x54\xf3\xa8\x59\xd5\xb5\x9d\x37\x52\x16\x89\xde\xf5\x11\xd6\xb0\x6a\xd1\xe6\x01\xdd\xcc\xd4\xe3\xd7\x0b\x53\x2a\x2e\x0a\x71\xc9\xab\x39\xee\x19\xb8\xe6\xe4\x9e\xb6\x59\xb1\x20\xc7\xf5\x77\x9e\x9b\xed\x63\xd1\x7c\x6c\x5e\x06\x98\x17\xc2\x53\xd0\x67\x70\xff\x9e\x80\x71\x4c\xf3\xf7\x6d\x21\xde\xe9\x05\xa6\xf7\x4b\xaf\xb1\x8b\x6a\x5a\xef\x2b\x8c\xe0\xa4\x73\x9f\xad\x86\xdb\x03\x4f\x73\xf9\x13\x86\x73\x84\xd1\xec\x1d\xad\x7a\x50\x96\x07\xcd\x40\xf5\xb2\xf7\xd3\x04\x95\x6f\x01\xbd\x45\xdc\x10\x39\xaf\xeb\xf7\x8e\xd2\x54\xa9\x81\x2d\x42\x6a\x5c\x2c\xb8\x32\xc5\xca\xf7\x9b\x29\x34\x15\xe4\x35\x0c\x1b\xc9\xd2\x3d\xa1\xd6\xa1\x7f\xb5\x2d\xda\x76\xe6\x04\xad\x06\x27\xfd\x78\xa0\xcb\xda\xc0\x64\x34\xd4\xd1\xb4\x9d\xee\xd8\x2c\xdd\xf7\x1b\xd8\x69\xed\x43\xd5\xe3\xf6\x91\x61\x77\x2b\xd9\xc4\xba\xf6\x5a\xd5\x49\xc4\x56\x61\x7e\xc6\x30\x00\xa9\x44\x52\xf0\xc7\xe8\xa2\x10\x33\xa2\x2e\xb9\x0a\x74\x00\x8c\x72\x08\x67\xc3\xba\x51\x5b\x5b\xd1\x48\xae\x7f\x75\xd8\xd0\xaa\x75\x13\xed\xa9\x7b\xb8\x36\xc1\xc3\x8a\xfd\x3d\x54\x47\xa7\xf9\x1f\xe0\x3a\x71\x85\x38\x34\x9f\x53\xee\x78\x93\x6d\xf5\x84\x87\x8f\x22\xa5\xe2\xff\xcf\xa6\x79\x15\xf8\x02\x93\x67\x73\xb4\x03\xc6\x53\xba\xdc\x9e\x3e\xec\xbb\x6e\xc4\x9b\xa0\x35\xaa\x4f\xcd\x76\xdc\x1a\x5b\x51\x3c\xc9\x70\x8b\x5a\x5a\xd4\xda\xc0\xd7\xb0\x3a\xa8\x8c\x0e\x2c\x62\x06\x0f\x36\x91\x1a\xc3\x9d\xac\x69\x83\xd2\x03\x78\xc2\xd0\xe1\x08\xdd\xd4\x08\xff\xa6\x34\xa3\x42\xef\x26\x1a\xe7\x85\xa4\x41\xbf\x62\x4c\x89\x6d\xed\xf7\xf4\x20\x06\x13\xc2\xd0\x4e\xcd\x0a\x6b\xf0\x03\x5d\xaa\xa0\x5f\xdb\x47\xb2\x8f\xb6\x5b\x3a\xe4\x1c\x32\x53\x1b\xb4\xc1\x0d\xa3\x85\xbd\x4c\x62\x37\xad\x05\x43\x6d\x93\x3d\xbc\xb6\x05\xa0\xb0\xe6\xb7\x5d\xd9\xfa\xcb\x32\xd6\xa8\x3e\x3a\x45\x23\x20\xf3\x39\xe5\x69\x80\x6f\x21\xca\xdc\xec\x56\x74\xdb\x84\xef\x5c\x88\xa0\xff\xbf\xbf\x15\x62\x75\xf6\x9d\xc8\x03\x8c\x9b\x32\xee\xac\x70\x18\x5b\xbf\x4c\xcf\x97\x4c\x2a\xb9\xf7\xae\x39\x29\x8a\xdc\x61\xcf\x1e\x76\xad\x84\x2b\x58\x30\xae\xfe\xf3\x6f\xdf\xf7\x3a\xee\x8b\x9e\xd7\xe8\x47\xbe\xe7\x6d\x91\x6b\xdf\xf3\x0c\x97\xae\xee\x64\x9e\x7b\x21\x3b\x4e\xb0\x47\x79\x4d\xf0\x78\x9e\x8d\x52\x46\x72\x49\x77\x87\xd5\x2b\x7d\xbf\x52\x45\xaf\x5f\x63\xdb\x3a\x2c\x42\x63\x41\x89\xa2\xed\xf1\x29\x26\x77\x9d\x17\x9a\xf1\x8d\xbe\xca\xe8\x18\xba\xc1\xc3\xda\xe5\x94\xc1\xd6\xdb\xff\xf8\xe6\x8d\x98\xca\xa0\x98\xdc\x75\xed\x7b\xa8\xcd\x98\xfd\x61\x4a\x6c\xc9\x36\xd7\x0a\x23\x7a\x24\xf9\x82\xae\x45\xbe\x87\x85\xe6\x1e\x17\x36\x55\x40\xdf\x46\xd0\x62\xc5\xe2\x25\x2e\x13\xc7\x5a\xe6\x59\x09\x72\xc0\x10\x13\xe9\x59\x6b\x6b\x01\xe6\x6d\xa3\x74\xef\xd7\x34\x8e\x56\xd8\x90\xef\x61\x00\x71\x19\x6f\x9c\xe4\xf4\xe9\x32\xad\xc8\x8e\xb7\x9b\xc5\xa0\x53\x5c\x52\xa1\x89\x51\x51\x43\x4b\x10\x0f\xcc\xaa\x83\xb8\xbf\x59\x33\x88\x07\xe6\x97\x91\x9a\x18\x31\x3e\x05\x96\x6a\x38\xb9\xbc\x47\x3b\xb1\x27\xb4\x87\xc0\x49\xdb\x39\x14\x4c\x37\xf3\x74\x27\x98\xaa\xc3\x76\x28\xac\x34\x9c\xfe\x5c\x34\xad\xa1\x64\x98\x44\xa0\xe3\x65\x89\xa7\xd7\x82\x2f\xcc\xfd\x0e\x34\xb5\xc3\x69\x1b\x4f\x65\x1d\x65\x1a\x2b\xa3\x06\x6e\xb4\x4b\x9e\xb9\x02\xb0\x54\xb3\x7d\x96\xa2\xe8\x5b\xe8\x70\xe0\xf3\x25\x4d\x1c\xe4\x78\x0b\x1d\xeb\x66\x8d\xf1\x34\xd5\x5c\x83\x07\x25\x6e\xd9\x59\xb1\x14\xb5\x2a\xac\x98\x63\xd1\x08\x56\x15\xad\x9d\xe8\xc0\x4d\xb9\x08\x39\x08\x1a\xb5\x24\x1d\x52\x55\xda\x3f\x1f\xb8\x65\x66\xf3\xc9\x4f\xf3\x91\xf6\x09\x7d\xbf\xfb\x03\xc3\x78\x81\x4e\xb5\x50\xc9\x3d\x9f\x17\x9a\x17\x8a\x62\x72\xf7\x03\x77\x51\xb3\x05\xf7\xe6\xe7\x50\x51\x73\xef\xeb\x32\xdc\xb8\x82\xec\x20\x28\x2e\x4b\xf5\x7e\xe8\xa3\xd7\x5b\x9a\xd3\x7d\xe7\xda\x39\xb1\xdf\x6a\x1c\x18\x81\x6b\x71\x9b\x6a\x3b\x2d\x5f\x9e\x6a\xad\xd1\x34\xc6\x8e\x73\x7c\x50\xdd\xd2\x1b\xfb\x23\x00\x00\xff\xff\x16\x27\x54\x14\x2d\x17\x00\x00")

func templatesDbTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDbTmpl,
		"templates/db.tmpl",
	)
}

func templatesDbTmpl() (*asset, error) {
	bytes, err := templatesDbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/db.tmpl", size: 5933, mode: os.FileMode(420), modTime: time.Unix(1607683033, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInterfacesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcf\x4a\xc3\x40\x10\xc6\xef\x3e\xc5\x77\x4c\x24\x6e\x2f\xc5\x17\x58\x8b\x08\x22\x85\xd0\x93\x78\x98\x36\xa3\x8e\xa6\xbb\x65\x77\x0e\x81\x65\xdf\x5d\x92\x12\x3c\x98\x3f\x9e\x96\x1d\xe6\xfb\xfd\x66\x66\xb3\x41\x4a\x30\xbb\x17\x3a\xb3\xa9\x1d\x7d\x33\x72\xbe\xf9\x2d\x59\x3a\x73\x8b\x9c\x1f\x59\x8b\x93\x76\x38\x79\xa7\xdc\xa9\xb1\xd7\xb7\x82\x34\x10\xa7\xf7\xdb\x12\xc5\x2d\x3b\x15\x15\x8e\xe6\x6f\xbe\xd6\x0a\x1c\x82\x0f\xe5\x04\xfc\x59\xe2\x0c\xfd\x42\x21\x62\x89\xdb\x47\xf7\x14\x62\xad\x25\x8a\xd7\xb7\xb5\xd6\x5a\x53\x82\xbc\xc3\x58\xed\xb6\x7d\xc1\x7c\x52\xdc\xd3\x87\x38\x52\xf1\x0e\x77\x39\x57\xd7\x7d\x52\x02\xbb\x06\xfd\x7f\x76\xee\xa7\x66\xd7\x49\xd4\xb8\x7a\x99\xa3\xf7\xed\x02\xc7\x06\x26\xe5\x69\x8a\x3f\x7e\x2d\x1e\xc0\x1e\x86\xd5\x07\xd3\x82\xe2\x70\x69\x66\x15\xe3\xa0\xff\x95\x0d\x92\x09\xc7\x03\xb7\xbc\xe6\x18\xd3\x3f\x01\x00\x00\xff\xff\xf2\x8c\x66\x41\x78\x02\x00\x00")

func templatesInterfacesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInterfacesTmpl,
		"templates/interfaces.tmpl",
	)
}

func templatesInterfacesTmpl() (*asset, error) {
	bytes, err := templatesInterfacesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/interfaces.tmpl", size: 632, mode: os.FileMode(420), modTime: time.Unix(1607680554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRest_hTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xc1\x6e\xdb\x46\x10\x3d\x73\xbf\x62\x4a\x14\x01\x19\xb0\x6b\xb7\x30\x72\x10\xe0\x5e\x14\x37\x49\x61\xc4\xaa\x54\xb7\x87\x20\x28\x36\xe2\x88\xda\x86\x5c\xd2\xc3\x61\xa5\x96\xe0\xbf\x17\xb3\x5c\xc6\x46\x1b\x45\x76\x9b\xc0\x3e\x99\xc3\xb7\x6f\xdf\xbc\x79\x1c\x35\x66\xfd\xde\x14\x08\x84\x2d\x2b\x65\xab\xa6\x26\x86\x44\x45\xb1\x43\x3e\xd9\x32\x37\xb1\x8a\xe2\x96\x69\x5d\xbb\x3f\x62\xa5\xa2\xb8\xb0\xbc\xed\xde\xe9\x75\x5d\x9d\x14\x35\xd9\xb2\x34\x27\x55\xb7\x17\x54\xdf\x83\x5e\x90\xbe\x26\x0b\xc3\x70\x12\x9e\x2e\x1c\x5b\xb6\xd8\x3e\xb7\xb4\x30\xbc\xd5\x4b\x2c\x61\x18\x62\x95\x2a\xb5\xe9\xdc\x1a\x12\x03\x4f\x57\x9c\xc2\x56\xf0\x17\xaf\x4d\x85\x7a\x6e\x2a\x0f\xba\xb4\x2d\x27\x3b\x10\x11\x7a\x89\x6d\x53\xbb\x16\x7f\x25\xcb\x48\x19\x10\x3c\x0d\xf5\x9b\x0e\x5b\x4e\xa1\x57\xd1\xcd\xc2\x50\x0b\xb3\x73\x20\x7d\xbd\xbc\xd4\x3f\x75\x48\x7f\x26\xa9\x52\x51\x13\xea\x4f\x30\x88\xd1\x1f\xbf\x4c\xce\xaf\xb8\x57\x51\xdf\x7f\x03\x64\x5c\x81\xf0\xf5\xc6\x62\x99\xcb\x61\x3d\xe7\xfd\x99\xa0\xb4\xd0\xfd\x20\xe5\x16\x86\x41\x45\x1e\x6d\x37\x50\x20\x07\x12\xe1\x41\x9a\xce\x7a\x4c\xd4\xf7\xe1\x59\xfb\x6b\xaf\xc8\x16\xd6\xc1\x30\xcc\xc0\x88\x9a\xc3\x87\x13\xdf\x56\x06\xf1\x3f\x18\x56\xce\xbc\x47\xb1\x32\xcd\x82\x06\x74\xe3\x65\x77\xff\x1f\x94\x9a\xf4\xdd\x36\xb0\x35\xed\xc2\x14\xd6\x19\xb6\xb5\x68\x50\x2a\x8a\xea\xcd\xa6\x45\xce\xa0\xb4\x95\xe5\x0c\x1a\xc9\xc4\xec\x1c\x8c\xee\x2e\xf6\x4c\x66\xcd\xb7\x27\x44\xcf\xa8\x2a\x55\x91\x37\x57\x5f\xf9\xd3\x70\x0e\x23\xcd\x54\xbe\x14\x32\x38\x1f\x49\x95\xaf\x7a\x12\xf4\x8e\xde\x81\x7c\x0f\xa7\xf2\x9a\xb0\xed\x4a\xce\x80\xe7\x75\xe7\x38\x03\x24\x0a\x22\xd6\x87\x66\x96\x18\xdd\xbd\x40\x0e\x39\x98\xd7\x8e\x71\xcf\x09\xa5\x99\xa7\x17\x81\x76\x23\x04\x2f\x8d\xcb\x4b\xbc\x20\xaa\x29\x41\x92\x04\x65\xb0\xf3\xb1\x91\x6b\xb9\x23\xa7\x22\xef\x96\xe0\x6f\x65\xfa\xf7\x46\x77\x63\xfe\xf2\x1f\x57\x57\xaf\x93\x5d\x06\x4f\x16\x13\x42\x34\x2c\xb1\xf1\xb1\x89\xa2\x68\x61\x0a\x9c\xc1\xf8\x27\x1e\x66\x1f\xaa\x2b\xfb\x97\x7f\x33\x1a\xec\xcb\x3f\xd7\x6c\x4a\xdf\xea\x6c\x6a\xd9\xd7\x97\xde\x86\xd6\xf3\x04\x4b\xa4\x3e\x48\x37\x03\x60\xd9\xe2\x21\x5d\x23\xda\xe3\x42\x0e\x04\x3c\x4e\x78\x32\xf7\x51\x4c\xfd\x84\xd4\x3b\x71\x1d\x8e\x2f\x85\x39\xa1\x61\x7c\xc8\x5a\x20\xbc\xb9\x7a\xf7\xfb\xb1\xef\x7f\x7e\xbd\xe2\x7e\x50\xd2\xd8\x57\x46\x77\xfe\x2b\x0c\x2c\x1f\x14\x8b\x68\xe1\x1a\x3b\x9c\x1a\x94\xfe\x1c\xee\x5e\xe5\x47\xad\x0d\xda\x0f\x9a\x1b\xd8\xd5\x71\x77\xef\xde\xfd\x6f\x6b\x2b\xd3\xbc\x69\x99\xac\x2b\xde\x5a\xc7\xcf\xce\xfa\xd8\xe6\xf1\x0c\xbc\xc8\x21\xbd\x8f\xcb\x2f\xf0\x41\x9b\xd7\x50\xe1\x17\x6c\xd5\xed\xf5\x2f\xb2\x1d\x48\x9a\xc8\x33\xf8\x4d\xaa\xe1\xd7\x43\x7b\x4f\x5f\x39\x4e\x04\xfe\x46\x34\xbd\xcd\xe0\xdb\xd3\x0c\x9e\x9d\xc9\x96\xbe\x67\x3e\x45\xda\x41\x07\x6d\xfe\xff\xdd\x9b\x82\x79\x0f\x9b\xae\x9b\xfc\x81\x61\xfc\x4c\x4e\x7d\xf9\x44\x1f\x99\x42\xe8\xfc\x13\x83\xf8\xaf\x71\xde\x69\xef\xdf\x4b\x34\x39\x52\xf2\xdd\xe9\xe9\xbd\x26\xf1\x1c\x4b\x7c\x84\x49\x1c\x71\x29\xa8\xfa\x8c\x71\xfd\xa8\x3b\x7f\x07\x00\x00\xff\xff\xef\xb2\xc1\xe1\xc4\x09\x00\x00")

func templatesRest_hTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRest_hTmpl,
		"templates/rest_h.tmpl",
	)
}

func templatesRest_hTmpl() (*asset, error) {
	bytes, err := templatesRest_hTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/rest_h.tmpl", size: 2500, mode: os.FileMode(420), modTime: time.Unix(1607709204, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUsecasesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x4f\x8f\xd3\x30\x10\xc5\xcf\xf1\xa7\x18\x7a\x4a\x56\x21\xe4\xb0\xe2\x00\xda\x03\xca\xae\x56\x48\x08\x55\x0d\x15\x07\xc4\xc1\x4d\xa6\x5b\xef\x26\x4e\xb1\xc7\x50\x29\xca\x77\x47\xce\x9f\xad\x4a\xff\x24\x82\x94\x5e\xf6\x54\x39\xb5\x3d\xcf\xef\xfd\x66\xd6\x3c\x79\xe2\x0f\x08\x46\x63\xc2\x35\x6a\xc6\x44\xbe\x2e\x14\x81\xcb\x9c\x49\x52\x48\xc2\x0d\x4d\x98\x33\x29\x4b\x08\xa6\x2a\x98\x2b\x01\x55\xf5\xa6\x5d\xdd\x49\x12\x24\x50\xdf\x0a\x35\xe5\xb4\x0a\x66\x98\x41\x55\x4d\x98\xc7\xd8\xd2\xc8\x04\x5c\x03\x57\x31\x79\x60\xb7\xdf\x7d\xe6\x39\x06\x11\xcf\xeb\x3d\x9f\x84\x26\x37\xa1\x0d\xb4\x25\x82\xa8\xf9\xf5\x99\xb3\xe6\x4a\xc3\x15\xb6\x57\x07\x87\xcf\x4e\xb9\xd2\xf6\x66\xf7\xdb\xf7\xbe\xad\x31\x95\x25\x88\x25\x04\x11\x6d\xae\xed\x87\x60\xc5\xf5\x94\x3f\x08\xc9\x49\x14\x12\x5e\x57\x95\x0f\x42\xd2\xdb\xeb\xb2\x04\x94\x29\xd8\x35\x2a\x55\x28\x0f\x4a\xe6\xfc\xe4\xca\xae\x9a\x2f\x8c\x39\x1a\x35\xbc\xbb\x01\xd3\x29\xbe\x47\x8a\x51\x6b\x51\x48\xfb\x1e\x8f\x31\x47\x2c\xeb\x03\x76\x4f\x8c\x7a\x86\x3f\x8c\x50\xf8\xc1\xd0\xca\xd5\xa8\xbd\xf7\xf5\x9f\xaf\x6e\x40\x8a\xcc\xde\xef\x28\x24\xa3\xa4\x5d\x0e\xd0\x19\xee\x6a\x64\x4e\xd5\x14\x4c\x68\xe3\x3f\x57\x4d\x17\x9d\xb8\xaf\x82\x56\x5f\x14\x97\x9a\x27\xd4\x29\x1c\x5d\x80\x93\xe2\x12\x15\xd8\xc4\x5d\x0f\xca\x46\xc0\xac\xc8\xb2\x05\x4f\x9e\x5a\x21\x7f\x8a\x80\xca\xad\xad\x22\xcc\xf5\x80\xaa\x14\x15\x46\xd2\x6e\xe9\x26\x85\x44\x1d\x88\x3d\xe8\xf0\xf2\xc1\xd2\xe4\x3d\x67\x32\xb6\xed\x3b\x8e\xe7\xb9\xa0\x23\xcf\x3d\x43\xe8\xed\x0d\x7f\xed\xa0\x14\x19\xab\x7a\xfb\xf4\x1e\x8f\xb5\xa9\x48\x9b\xa6\xf1\xc0\x3d\xd5\x81\x31\x5d\xa8\x99\xce\xd1\x1f\x63\x20\xaf\x50\x9b\x8c\x7a\x09\x6e\x8d\xf7\x41\xa4\x3e\x90\x32\xd8\x03\xf1\xe8\x5c\xee\xa3\xd6\x29\x1f\x46\x4e\xa4\x90\x13\x1e\x81\xa7\x58\x3c\x9e\x1c\xf1\xd1\xbc\x1e\xee\x35\x60\x97\xe0\x27\x1c\x9d\x9e\x70\x0c\x76\x24\xfe\xfa\x98\xf6\xa2\xb3\x75\xde\x87\x62\xf1\x78\x0a\x9c\x70\x5c\x6c\xc2\x7d\x68\x5a\xc9\xc3\x98\x99\xaf\xd3\xe3\xcc\x74\x03\xa7\x7e\xd4\x00\x7a\x6a\x46\xfe\x27\x34\x23\x13\xf3\xef\xb8\x74\xf5\x0f\x63\xb2\x35\xbb\x19\x32\x3d\xa8\x8c\xc9\xc9\x1e\x24\x83\xe8\xb8\xc5\x0c\x7b\xe9\x78\xc9\xbd\x2f\xf7\xad\x8d\x36\xf7\xcb\x46\xfe\x3b\x00\x00\xff\xff\x30\x43\xab\xc3\x7e\x0c\x00\x00")

func templatesUsecasesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUsecasesTmpl,
		"templates/usecases.tmpl",
	)
}

func templatesUsecasesTmpl() (*asset, error) {
	bytes, err := templatesUsecasesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/usecases.tmpl", size: 3198, mode: os.FileMode(420), modTime: time.Unix(1607669935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/core.tmpl":       templatesCoreTmpl,
	"templates/db.tmpl":         templatesDbTmpl,
	"templates/interfaces.tmpl": templatesInterfacesTmpl,
	"templates/rest_h.tmpl":     templatesRest_hTmpl,
	"templates/usecases.tmpl":   templatesUsecasesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"core.tmpl":       &bintree{templatesCoreTmpl, map[string]*bintree{}},
		"db.tmpl":         &bintree{templatesDbTmpl, map[string]*bintree{}},
		"interfaces.tmpl": &bintree{templatesInterfacesTmpl, map[string]*bintree{}},
		"rest_h.tmpl":     &bintree{templatesRest_hTmpl, map[string]*bintree{}},
		"usecases.tmpl":   &bintree{templatesUsecasesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
