// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/core.tmpl
// templates/db.tmpl
// templates/interfaces.tmpl
// templates/rest_h.tmpl
// templates/usecases.tmpl
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x41\x8f\xda\x30\x10\x85\xcf\xf1\xaf\x98\x72\xa8\x12\x44\x13\x0e\xab\x1e\x56\xe2\x94\xa5\xd5\x4a\x15\x45\x45\xf4\x52\xf5\x60\x92\x61\xd7\xdb\x60\x23\x7b\xd2\xa5\x8a\xf2\xdf\x2b\x3b\x24\x81\x85\x90\x68\x4f\x28\x61\xfc\xe6\xcd\xf7\x26\xde\xf3\xe4\x0f\x7f\x42\x48\x94\x46\xc6\xc4\x6e\xaf\x34\x81\xcf\xbc\x51\xa2\x24\xe1\x81\x46\xcc\x1b\x15\x05\x84\x4b\x1d\xae\xb5\x80\xb2\x8c\x8e\x4f\x73\x49\x82\x04\x9a\x07\xa1\x97\x9c\x9e\xc3\x1f\x98\x41\x59\x5e\x96\x0b\x49\xa8\x25\xcf\xa2\x54\xed\xb8\x90\x11\x6a\x6d\x46\x2c\x60\x8c\xfe\xed\x11\x6c\xed\x7c\xc1\x77\x18\xc6\x7c\xe7\x14\xc0\x90\xce\x13\x82\x82\x79\x1a\xc6\x2b\x62\x25\x63\xdb\x5c\x26\xb0\xc0\xd7\xcb\x6a\xdf\xd5\x04\x30\xbe\x22\x64\x15\x90\x72\x2d\xe1\xe3\xe5\xbf\x85\xbe\x07\x5d\x36\xe2\x7e\x72\x4d\x22\x80\x9f\x3c\x13\x29\x27\x8c\xd7\x7e\x42\x07\x38\x42\x09\xe3\xea\x77\x02\x6a\xf3\x02\x63\x3c\xa2\x08\x2f\x15\xe2\xf5\x8a\x26\x20\x52\x10\x92\x3e\xdf\x05\x80\x5a\x2b\x6d\x9d\x45\x11\x6c\x95\x8e\x35\x72\x42\xb8\x9f\xd9\x92\xd9\x0c\xa6\xac\xf1\x2c\x45\xd6\xeb\xee\x9b\x30\x74\xdd\xd7\x9e\x6b\x73\xd3\x98\x3d\xba\xe4\xda\x58\x78\xfe\xaf\xdf\x7d\xa5\x2b\x2a\x0a\x10\x5b\x08\x63\x3a\xdc\xd9\x17\xe1\x33\x37\x4b\xfe\x24\x24\x27\xa1\x24\x7c\x2a\xcb\x49\x35\x63\x51\x00\xca\x14\xec\xb3\x1b\x36\xb0\xd3\x0a\xc2\x9d\x19\xa0\x40\xb1\xca\x25\x9d\x4b\x58\x3a\x49\xa8\xc3\x74\xd3\xe1\xcd\x12\xa8\x26\x0e\x98\x27\xb6\xee\xcc\x87\x99\x05\x68\x5b\x9f\xf0\x1c\x60\x60\x7a\xde\x9b\x79\x65\x9b\xc8\xbb\x87\x18\x12\xe5\x57\xec\x48\xb2\xde\x1d\xe7\x67\x31\x87\x8d\x52\x59\x00\xfe\xad\xc0\xec\xca\xb5\xec\x35\x9a\x3c\xa3\x7e\x94\x47\x07\xb6\x63\x0f\xc7\x06\x8d\xad\xaa\xe4\xed\xf2\xd6\x85\xd5\xd1\xc5\xdc\x3d\xbc\x3d\x66\xc2\xef\x9b\x17\x4c\x68\xa1\xe8\x8b\xca\x65\xca\x3c\xab\x73\x56\x65\x71\x9d\x72\xaf\x07\x18\x82\xf1\x31\x9d\x1f\x84\x21\x73\x9b\x65\x00\xbe\xc5\x78\x4e\xc9\xf5\xea\xa4\x73\x2a\x5c\x21\xea\xb3\x52\x7d\xdb\xef\xbf\x36\x02\xf0\xdb\xe0\x8f\x2e\x9b\x0c\xcf\xef\x25\x27\x38\x81\xe9\xad\xdc\xa6\x27\x0b\x1d\x45\x90\x38\x77\xcc\x93\xf8\xfa\x98\xf6\x2f\x47\x3b\x8c\xeb\x35\xb4\x51\x1d\x6b\xd5\x64\x48\x80\xeb\x7d\xda\x49\xad\xfd\x14\x86\xf1\x6b\x2e\xdb\xbf\x5c\x3b\xb3\xee\x05\xab\x30\x76\x52\xbc\xbd\xfe\xcd\x68\xb5\x46\x07\xb0\x76\x0e\xab\xd8\x0b\xed\x82\xd8\x00\x54\x0f\x98\x61\x1f\xaa\x13\x08\x7d\x1b\xde\xca\xd5\xfb\xfd\x3f\x00\x00\xff\xff\xed\x7c\x23\xcd\x1c\x08\x00\x00")

func templatesCoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCoreTmpl,
		"templates/core.tmpl",
	)
}

func templatesCoreTmpl() (*asset, error) {
	bytes, err := templatesCoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/core.tmpl", size: 2076, mode: os.FileMode(420), modTime: time.Unix(1607685002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDbTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4f\x6f\xdb\xb8\x12\x3f\x4b\x9f\x62\x9e\x11\x04\x72\xac\x2a\xce\x7b\xc5\x3b\x74\xe1\x02\x5d\x37\x29\xb2\xe8\xb6\xd9\xa6\xc1\x1e\x8a\xa2\xa2\x25\xda\x61\x2c\x53\x0e\x49\x27\x0e\x5c\x7d\xf7\xc5\x90\x94\x4d\xc9\xb2\xec\x16\xbb\xdd\xea\x90\x58\xa3\xe1\x70\xfe\xfc\x66\x38\xc3\x39\x49\xa6\x64\x42\x61\x3e\xf1\x7d\x36\x9b\xe7\x42\x41\xe0\x03\x00\x74\x92\x9c\x2b\xba\x54\x1d\xf3\x96\x12\x45\x46\x44\xd2\x53\x79\x9f\x59\xd2\x84\xa9\xdb\xc5\x28\x4a\xf2\xd9\xe9\x1d\x49\xa6\xc9\xe9\x7c\xb2\x3c\x7d\x78\xbe\xfb\xab\x7a\x9a\x53\xfb\x75\xb5\x82\xe8\x4a\x44\x37\x82\x41\x51\x9c\xda\xb7\x73\xae\x98\x62\x54\xbe\x66\xe2\x8a\xa8\xdb\xe8\x03\xcd\xa0\x28\x3a\x7e\xd7\xf7\xc7\x0b\x9e\x40\x90\xc2\xc9\xb5\xea\x02\xb2\x9f\xbf\x23\x33\x1a\x0d\xc9\x4c\xf3\xbc\xa1\x2a\x48\xd4\x12\xac\xce\xd1\xd0\xfc\x0f\x81\xa5\xc0\xb8\xfa\xff\xf3\x2e\x04\x27\xd4\x8a\x8f\xb6\xd7\x5f\xab\x10\xa8\x10\xb9\xe8\xc2\x4a\x2b\x28\xa8\x5c\x64\x0a\x5e\x0c\xe0\xb8\x75\xd9\xaa\xf0\x35\x3f\x15\x02\x99\xd3\xe8\xf5\xe8\x8f\x05\x15\x4f\x1f\xf2\x47\x54\x28\x84\x58\x7f\xc6\x47\xd2\x8c\x26\x0a\x95\x17\x84\x4f\x28\x1c\xb1\x10\x8e\xc6\x8c\x66\x29\xae\x8c\x86\x6a\xf9\xfc\x0d\x55\x91\x4c\x08\x27\xa3\x8c\x5e\xe0\x17\x09\xcf\x8a\x62\x2d\x61\xb5\x02\x36\x86\x89\x82\x23\x06\x7d\x70\x3e\xe8\x27\xc4\xef\x94\xa7\x50\x14\x0a\x75\x35\xb2\xa3\xdf\x64\xce\x51\x69\xa8\x08\x7a\x66\x39\xd7\xa4\xb1\xc8\x67\xda\xb1\x1f\x2d\x33\xa8\xf5\xb7\xc7\x5b\x2a\x28\xa8\x88\xa5\x30\x80\xa3\x33\x4d\x8f\xd1\xb7\xdd\xe8\x3a\x21\xdc\xe0\x05\x65\x5a\xc3\xf6\x1a\xe5\xec\x7b\x6c\x3c\xed\x28\xac\x3d\xfc\x5e\xb0\x09\xe3\x50\x14\xa1\xdf\xa0\x70\x57\xff\x65\x63\xed\xf6\xff\x0c\x80\xb3\xcc\xc6\xcd\xa1\x0f\x06\x30\x9f\x2c\xa3\x73\x21\xde\xe5\x1f\xf2\x47\xe9\x70\x98\x08\xab\x85\xe0\xb8\x34\xc4\x3f\xeb\x6f\x1b\xd5\x5c\x8e\x34\xba\x25\x3c\xcd\xe8\x39\x82\xc4\x44\x96\x0a\x61\xf4\xb0\x10\xb0\xec\xc6\x1e\x23\xb3\xd8\x0b\xdc\xb7\x4c\xee\x40\xee\x9c\x08\x09\x6d\x98\xc5\xa5\x57\x44\x48\x14\x1c\x7c\xfa\xbc\x8f\xf5\x5a\x19\xf8\xe8\x98\x20\x21\xba\x25\xf2\x8a\x4c\x18\x27\x8a\xe5\x1c\x81\x16\x9a\x5c\x59\xc3\xa8\x96\x13\x0f\x44\x68\xc7\x6a\xa2\xb1\xf9\xfe\x02\x61\xf3\x62\x00\x71\x13\x80\x0c\xf6\xef\xff\xd4\xf0\xd1\x4c\x06\x49\x67\x83\x33\xfb\xe9\xfd\x78\x2c\xa9\x4e\xb3\xd8\x52\xde\xb2\x19\x2b\x09\x9a\x42\xc4\x44\xe2\xfb\x8c\xcc\x3f\x49\x25\x18\x9f\x7c\x66\x5c\x51\x31\x26\x09\x5d\x15\x65\xfe\x9d\x9e\xc2\x98\x65\x8a\x8a\x76\x2c\x6a\xbb\xd1\xb3\xdb\x40\xc4\x35\x6c\x5c\x82\xf0\x52\x7e\x7c\x9a\xd3\xab\x5c\x6f\x55\x4f\x35\xcb\xba\x96\xf3\x4a\xca\x3c\xd1\x56\x1f\x61\x0d\x2b\x37\xad\x27\xe8\x66\xa5\xfe\x7e\xbd\x30\xa5\xe2\x22\x17\x97\xbc\x5c\xe3\xe6\xc0\x35\x27\x53\xda\x24\xc5\x82\x1c\xf7\xdf\x99\x37\xdb\x69\x51\x7f\x6c\x5c\x7a\x18\x17\xc2\x53\xd0\x39\xb8\xdf\x26\x60\x1c\xc3\xfc\x6d\x26\xc4\x3b\xb5\xc0\xf0\x7e\xea\xd4\xac\x28\x97\x75\x3e\xc3\x00\x4e\x5a\xed\x6c\x14\xdc\xec\x78\x9a\xc9\x9f\xd0\x9d\x03\xf4\x66\xe7\x68\xd5\x81\xa2\x38\x68\x05\xb2\x17\x9d\x9f\xc6\xa9\x7c\x0b\xe8\x0d\xe4\x1a\xc9\x79\xb5\xef\x7b\x2a\xd3\x5a\x10\xd6\x20\x35\xcc\x17\x5c\x99\x5a\xe5\xfb\xf5\x08\x9a\x02\xf2\x12\xfa\x5b\x52\x73\x9e\x3d\xe9\xa5\xda\xbf\xda\xb5\xcf\x8a\x02\xbe\x7e\x5d\x87\xbe\x95\x17\x3d\x5f\xaa\x5d\xc3\x81\x3e\x6e\x2a\x87\xff\xef\xf6\xf4\xb7\x87\x7e\x82\xa2\x82\x93\x6e\xdc\xd3\x15\xb3\x67\xc0\x12\xea\x40\xd9\x43\xf4\xd8\x98\xd5\xf5\x6b\xb0\x6c\x3c\xe2\xca\xc7\x3d\xa2\xfa\xed\xa7\xd4\x26\x8c\xb5\x60\x1d\xe2\xa4\xad\x8d\x9d\x7c\xd9\xe3\xb4\x1d\x29\xe3\x6a\x6e\x2c\xaf\x1e\xc3\x1b\x75\x77\x40\xab\xc1\x0a\x4e\x77\x2a\xa3\xfd\xf7\x9d\x86\xd4\x4b\xc1\x8f\x30\xa8\x3c\x19\xb1\x9a\xe4\xe6\x67\x0c\x3d\x90\x4a\x24\x39\x7f\x88\x2e\x72\x31\x23\xea\x92\xab\x40\x2b\x6f\x98\x43\x38\xeb\x57\x63\x6d\x4f\x53\x14\x92\xe9\x5f\x2d\x32\x34\x6b\x55\x44\x73\xb2\xde\x5f\x1b\x4c\xe3\x19\xfd\x2d\xcd\xad\xf6\xec\xbf\xd0\xdd\xc6\x6e\x8d\xc9\x28\x77\xb4\x19\x6f\x75\x01\xf7\xef\x45\x4a\xc5\xaf\x4f\xa6\x5d\xc9\xf1\x05\x46\x4f\xa6\x98\x07\x8c\xa7\x74\xb9\xbd\xbc\xdf\x75\xd5\x88\x37\x4e\xab\x9d\x37\x15\xd9\x71\xa3\x6f\x45\xfe\x28\xc3\xad\x61\xc2\x16\x13\xeb\xf8\x4a\x09\xe9\x95\x42\x7b\x16\x31\xbd\x7b\x1b\x48\x5d\x5a\x5a\xfb\xe4\x0d\x62\x0f\xe8\x0c\xfb\x4e\x57\xd8\xde\x0c\xe3\xdf\x94\x8e\xa9\xd0\xd6\x44\xc3\x2c\x97\x34\xe8\x96\x3d\x72\x62\x9b\xb9\x29\x3d\xa8\x67\x0d\xa1\x6f\x97\x8e\x73\x2b\xf0\x1d\x5d\xaa\xa0\x5b\xb1\x23\xd9\x37\xa8\xd9\x06\xd8\x49\x32\x53\xb2\xb5\xc0\xcd\x0c\x03\x7b\x7b\xc7\xdd\x83\x0c\x98\x61\x26\xd9\x33\xc9\x34\x00\x14\xd6\x13\x4d\x5b\xb4\xfe\xb1\x88\x41\xf5\x50\xd0\x21\x1a\x00\x99\xcf\x29\x4f\x03\x7c\x0b\x91\xe6\x46\xb7\x1c\xb0\x8c\xfb\xce\x85\x08\xba\xbf\xfc\x50\x88\x55\xe7\xad\x44\x1e\x20\xdc\x94\x64\x67\x87\xc3\xe6\xb3\xcb\xf4\x7c\xc9\xa4\x92\x7b\x6f\x17\x46\x79\x9e\x39\xf3\x92\x87\x8d\x4a\xc2\x15\x2c\x18\x57\xff\xfb\xaf\xef\x7b\x2d\x37\x04\x9e\x57\x6b\x13\x7c\xcf\xdb\x1a\xa7\x7c\xcf\x33\xd3\x53\x39\x85\x7b\xee\x08\x7e\x9c\x60\xeb\xe0\xd5\xc1\xe3\x79\xd6\x4b\x63\x92\x49\xba\xdb\xad\x5e\xe1\xfb\x25\x2b\x6a\xfd\x12\xbb\x89\xc3\x3c\x34\x14\x94\x28\xda\xec\x9f\x7c\x74\xd7\x3a\xc2\x0e\x6f\xf4\xf0\xaa\x7d\xe8\x3a\x0f\x6b\x97\x53\x06\x1b\xef\x7b\x86\x37\xaf\xc4\x44\x06\xf9\xe8\xae\xcd\xee\xbe\x16\x63\xec\xc3\x90\xd8\x92\x6d\x06\x49\x43\x7a\x20\xd9\x82\xae\x49\xbe\x87\x85\x66\x8a\x1b\x9b\x2a\xa0\xe7\x4f\x94\x58\xce\x6d\x12\xb7\x89\x63\x4d\xf3\x2c\x05\xbb\xfe\x10\x03\xe9\x59\x69\x6b\x02\xc6\x6d\xc3\x34\xf5\x2b\x1c\x47\x2b\x3c\x90\xa7\xd0\x83\xb8\x88\x37\x4a\x72\xfa\x78\x99\x96\xfd\xad\xb7\xbb\xb9\x44\xa5\xb8\xa4\x42\xf7\xc2\x79\x05\x2d\x41\xdc\x33\xbb\xf6\xe2\xee\x66\xcf\x20\xee\x99\x5f\x86\x6a\x7c\xc4\xf8\x04\x58\xaa\xe1\xe4\xb6\xa3\x5a\x89\x3d\xae\x3d\x04\x4e\x5a\xce\xa1\x60\xba\x99\xa7\x3b\xc1\x54\x26\xdb\xa1\xb0\xd2\x70\xfa\x7b\xd1\xb4\x86\x92\xe9\x24\x02\xed\x2f\x33\x6b\x68\x27\xd7\xf1\x85\xb1\xdf\x81\xa6\x66\x38\x6d\xe3\xa9\xa8\xa2\x4c\x63\x65\x50\xc3\x8d\x56\xc9\x33\x43\x1f\x4b\xf5\x7c\xc7\x52\x24\x7d\x09\x9d\xd1\xe4\x7c\x49\x13\x07\x39\xde\x42\xfb\xba\x5e\x63\x3c\xdd\x6a\xae\xc1\x83\x14\xb7\xec\xac\x58\x8a\x5c\x25\x56\x4c\x5a\xd4\x9c\x55\x7a\x6b\x27\x3a\xd0\x28\x17\x21\x07\x41\xa3\x12\xa4\x43\xaa\x4a\xf3\x85\x91\x5b\x66\x36\x97\xbc\xba\x1f\x69\x5e\xd0\xf5\xdb\xaf\x94\x86\x0b\x54\xaa\xa1\x95\xdc\x73\xa1\x54\x9f\xf3\xf2\xd1\xdd\x77\xdc\x3e\x18\x13\xdc\x59\xdf\x69\x45\xcd\xa4\xdf\x26\xb8\x36\x19\xee\x68\x50\xdc\x2e\xd5\xfb\xae\x6b\xce\xd7\x34\xa3\xfb\xf2\xda\xc9\xd8\x2f\x95\x1e\x18\x81\x6b\x71\x9b\x6a\x39\x0d\x77\x8d\x95\xa3\xd1\x1c\x8c\x2d\x79\x7c\x50\xdd\xd2\x86\xfd\x15\x00\x00\xff\xff\x96\x0e\x54\x38\x1f\x19\x00\x00")

func templatesDbTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDbTmpl,
		"templates/db.tmpl",
	)
}

func templatesDbTmpl() (*asset, error) {
	bytes, err := templatesDbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/db.tmpl", size: 6431, mode: os.FileMode(420), modTime: time.Unix(1620551092, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInterfacesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xcf\x4a\xc3\x40\x10\xc6\xef\x3e\xc5\x77\x4c\x24\x6e\x2f\xc5\x17\x58\x8b\x08\x22\x85\xd0\x93\x78\x98\x36\xa3\x8e\xa6\xbb\x65\x77\x0e\x81\x65\xdf\x5d\x92\x12\x3c\x98\x3f\x9e\x96\x1d\xe6\xfb\xfd\x66\x66\xb3\x41\x4a\x30\xbb\x17\x3a\xb3\xa9\x1d\x7d\x33\x72\xbe\xf9\x2d\x59\x3a\x73\x8b\x9c\x1f\x59\x8b\x93\x76\x38\x79\xa7\xdc\xa9\xb1\xd7\xb7\x82\x34\x10\xa7\xf7\xdb\x12\xc5\x2d\x3b\x15\x15\x8e\xe6\x6f\xbe\xd6\x0a\x1c\x82\x0f\xe5\x04\xfc\x59\xe2\x0c\xfd\x42\x21\x62\x89\xdb\x47\xf7\x14\x62\xad\x25\x8a\xd7\xb7\xb5\xd6\x5a\x53\x82\xbc\xc3\x58\xed\xb6\x7d\xc1\x7c\x52\xdc\xd3\x87\x38\x52\xf1\x0e\x77\x39\x57\xd7\x7d\x52\x02\xbb\x06\xfd\x7f\x76\xee\xa7\x66\xd7\x49\xd4\xb8\x7a\x99\xa3\xf7\xed\x02\xc7\x06\x26\xe5\x69\x8a\x3f\x7e\x2d\x1e\xc0\x1e\x86\xd5\x07\xd3\x82\xe2\x70\x69\x66\x15\xe3\xa0\xff\x95\x0d\x92\x09\xc7\x03\xb7\xbc\xe6\x18\xd3\x3f\x01\x00\x00\xff\xff\xf2\x8c\x66\x41\x78\x02\x00\x00")

func templatesInterfacesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInterfacesTmpl,
		"templates/interfaces.tmpl",
	)
}

func templatesInterfacesTmpl() (*asset, error) {
	bytes, err := templatesInterfacesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/interfaces.tmpl", size: 632, mode: os.FileMode(420), modTime: time.Unix(1607680554, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRest_hTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x55\xc1\x6e\xdb\x46\x10\x3d\x73\xbf\x62\x4a\x14\x01\x19\xb0\x6b\xb5\x30\x72\x10\xe0\x5e\x14\x37\x49\x61\xc4\xaa\x54\xb7\x87\x20\x28\x36\xe2\x88\xda\x86\x5c\xd2\xc3\x61\xa5\x96\xe0\xbf\x17\xb3\x5c\xd6\x46\x61\x5b\x76\xe1\x22\x3a\x89\xc3\x37\x6f\xdf\xbc\x7d\x1a\x35\x66\xf3\xd9\x14\x08\x84\x2d\x2b\x65\xab\xa6\x26\x86\x44\x45\xb1\x43\x3e\xd9\x31\x37\xb1\x8a\xe2\x96\x69\x53\xbb\x3f\x62\xa5\xa2\xb8\xb0\xbc\xeb\x3e\xe9\x4d\x5d\x9d\x14\x35\xd9\xb2\x34\x27\x55\x77\x10\x54\xdf\x83\x5e\x92\xbe\x22\x0b\xc3\x70\x12\x9e\xce\x1d\x5b\xb6\xd8\xbe\xb6\xb4\x34\xbc\xd3\x2b\x2c\x61\x18\x62\x95\x2a\xb5\xed\xdc\x06\x12\x03\x2f\xd7\x9c\xc2\x4e\xf0\xe7\xef\x4d\x85\x7a\x61\x2a\x0f\xba\xb0\x2d\x27\x7b\x10\x11\x7a\x85\x6d\x53\xbb\x16\x7f\x25\xcb\x48\x19\x10\xbc\x0c\xf5\xeb\x0e\x5b\x4e\xa1\x57\xd1\xf5\xd2\x50\x0b\xf3\x33\x20\x7d\xb5\xba\xd0\x3f\x75\x48\x7f\x26\xa9\x52\x51\x13\xea\x2f\x30\x88\xd1\x77\x1f\x26\xfd\x6b\xee\x55\xd4\xf7\xdf\x00\x19\x57\x20\x7c\xbd\xb5\x58\xe6\xd2\xac\x17\x7c\x38\x15\x94\x16\xba\x1f\xa4\xdc\xc2\x30\xa8\xc8\xa3\xed\x16\x0a\xe4\x40\x22\x3c\x48\x53\xaf\xc7\x44\x7d\x1f\x9e\xb5\x3f\xf6\x92\x6c\x61\x1d\x0c\xc3\x1c\x8c\xa8\xb9\xbf\x39\xf1\x63\x65\x10\xff\x8b\x61\xed\xcc\x67\x14\x2b\xd3\x2c\x68\x40\x37\x1e\x76\xfb\xfb\xa0\xd4\xa4\xef\x66\x80\x9d\x69\x97\xa6\xb0\xce\xb0\xad\x45\x83\x52\x51\x54\x6f\xb7\x2d\x72\x06\xa5\xad\x2c\x67\xd0\x48\x26\xe6\x67\x60\x74\x77\x7e\x60\x32\x1b\xbe\xe9\x10\x3d\xa3\xaa\x54\x45\xde\x5c\x7d\xe9\xbb\xe1\x0c\x46\x9a\xa9\x7c\x21\x64\x70\x36\x92\x2a\x5f\xf5\x24\xe8\x1d\xbd\x05\xf9\x1e\x66\xf2\x9a\xb0\xed\x4a\xce\x80\x17\x75\xe7\x38\x03\x24\x0a\x22\x36\xf7\xdd\x59\x62\x74\xf7\x06\x39\xe4\x60\x51\x3b\xc6\x03\x27\x94\x66\x9e\x5e\x04\xda\xad\x10\xbc\x35\x2e\x2f\xf1\x9c\xa8\xa6\x04\x49\x12\x94\xc1\xde\xc7\x46\x8e\xe5\x8e\x9c\x8a\xbc\x5b\x82\xbf\x91\xe9\xdf\x1b\xdd\x8d\xf9\xcb\x7f\x5c\x5f\xbe\x4f\xf6\x19\xcc\x32\x78\xb1\x9c\x40\x22\x63\x85\x8d\x4f\x4e\x14\x45\x4b\x53\xe0\x1c\xc6\x8f\xd8\x98\xfd\x53\x5d\xdb\xbf\xfc\x9b\xd1\x63\x5f\xfe\xb9\x66\x53\xfa\x69\xe7\xd3\xd4\xbe\xbe\xf2\x4e\xb4\x9e\x27\xb8\x22\xf5\x41\x06\x1a\x00\xcb\x16\x1f\x90\x36\x36\x78\x68\x48\x83\xe0\xc7\x7b\x9e\x2c\xfe\x22\xd6\x3e\xac\xf6\x56\x6e\x87\xe3\xdb\x61\x41\x68\x18\x9f\xb2\x1f\x08\xaf\x2f\x3f\xfd\x7e\x6c\x11\x2c\xae\xd6\xdc\x0f\x4a\x66\xfb\xca\xe8\xce\xff\x1c\x03\xcb\x24\x5a\xf8\x3d\xd7\x38\xe4\x34\xa3\x8c\xe8\x70\xff\x2e\x3f\xea\x6e\xd0\x7e\xaf\xbf\x81\x5d\x1d\x37\xf8\xf6\xd9\x77\xba\x5b\x99\xe6\x43\xcb\x64\x5d\xf1\xd1\x3a\x7e\x75\xda\xc7\x36\x8f\xe7\xe0\x75\x0e\xe9\x63\x8c\x7e\x83\x4f\xda\xc2\x86\x0a\xbf\x6c\xab\xee\xa0\x7f\x91\x4d\x41\x32\x47\x9e\xc1\x6f\x52\x0d\xff\x24\xda\xdb\xfa\xce\x71\x22\xf0\x0f\xa2\xe9\x63\x06\xdf\xce\x32\x78\x75\x2a\x1b\xfb\x91\x29\x15\x69\xf7\x9a\x68\xf3\x67\x31\x70\x8a\xe7\x23\x9c\xba\x6a\xf2\x27\x46\xf2\x99\xcc\xfa\xff\x73\x7d\xe4\x22\xc2\xe4\x0f\xdc\xc5\x7f\x0d\xf5\x5e\x7b\xff\xde\xa2\xc9\x91\x92\xef\x66\xb3\x47\xdd\xc4\x6b\x2c\xf1\x0b\xdc\xc4\x11\x97\x82\xaa\x67\x4c\xec\x9d\xee\xfc\x1d\x00\x00\xff\xff\x70\x2d\x77\xde\xd3\x09\x00\x00")

func templatesRest_hTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRest_hTmpl,
		"templates/rest_h.tmpl",
	)
}

func templatesRest_hTmpl() (*asset, error) {
	bytes, err := templatesRest_hTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/rest_h.tmpl", size: 2515, mode: os.FileMode(420), modTime: time.Unix(1620992291, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUsecasesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\x4d\x6f\xd3\x4e\x10\xc6\xcf\xde\x4f\x31\xff\x9c\xec\xca\x7f\xe3\x43\xc5\x01\xd4\x03\x72\xab\x0a\x09\xa1\x28\x21\xe2\x80\x38\x6c\xec\x49\xb3\xad\xbd\x0e\xb3\x63\x88\x64\xf9\xbb\xa3\xf5\x4b\xa3\x90\x17\x5b\xe0\x92\x0b\xa7\x68\x9d\xd9\x9d\x67\x9f\xe7\x37\xbb\x91\xf1\x93\x7c\x40\x28\x0c\xc6\xd2\xa0\x11\x42\x65\x9b\x9c\x18\x5c\xe1\x4c\xe2\x5c\x33\x6e\x79\x22\x9c\x49\x59\x42\x30\xa5\x60\x41\x0a\xaa\xea\x55\xbb\xba\xd3\xac\x58\xa1\xb9\x55\x34\x95\xbc\x0e\x66\x98\x42\x55\x4d\x84\x27\xc4\xaa\xd0\x31\xb8\x05\x5c\xcd\xd9\x03\x5b\x7e\xf7\x51\x66\x18\x44\x32\xab\x6b\x3e\x28\xc3\x6e\xcc\x5b\x68\x5b\x04\x51\xf3\xeb\x0b\x67\x23\xc9\xc0\x15\xb6\x47\x07\xc7\xf7\x4e\x25\x19\x7b\xb2\xfb\xe5\x6b\x5f\xe9\x9c\xcb\x12\xd4\x0a\x82\x88\xb7\xd7\xf6\x43\xb0\x96\x66\x2a\x1f\x94\x96\xac\x72\x0d\xff\x57\x95\x0f\x4a\xf3\xeb\xeb\xb2\x04\xd4\x09\xd8\x35\x12\xe5\xe4\x41\x29\x9c\xef\x92\xec\xaa\xf9\x22\x84\x63\xd0\xc0\x9b\x1b\x28\x3a\xc5\xf7\xc8\x73\x34\x46\xe5\xda\xde\xc7\x13\xc2\x51\xab\x7a\x83\xad\x69\xff\x99\xe1\xb7\x42\x11\xbe\x2b\x78\xed\x1a\x34\xde\xdb\xba\xe0\xbf\x1b\xd0\x2a\xb5\x3d\x1c\x42\x2e\x48\xdb\xe5\x00\xad\xe1\xbe\x4e\xe1\x54\x4d\xd3\x98\xb7\xfe\x73\xe7\x64\xd9\x09\xfc\xac\x78\xfd\x89\xa4\x36\x32\xe6\x4e\xe5\xe8\x02\x9c\x04\x57\x48\x60\x53\x77\x3d\x28\x1b\x01\xb3\x3c\x4d\x97\x32\x7e\x6a\x85\xfc\x2a\x02\x2a\xb7\xb6\x8b\x31\x33\x03\xba\x72\x94\x17\x9a\xf7\x5b\x37\x49\xc4\x74\x24\xfa\xa0\x43\xcc\x07\x4b\x94\xf7\x9c\xcb\xd8\xb6\xef\x39\x9e\x65\x8a\x4f\x5c\xf7\x05\x42\x6f\x4f\xf8\x6d\x07\xb5\x4a\x45\xd5\x3b\xab\xf7\x78\x6a\x54\x55\xd2\x0c\x8e\x07\xee\xb9\x29\x9c\xf3\x05\x07\xea\x25\x66\x64\x0c\xec\x09\x4d\x91\x72\x2f\xc5\xad\xf9\x3e\xa8\xc4\x07\xa6\x02\x7b\x40\x1e\x9d\xcd\x43\xdc\x3a\xe5\xc3\xe8\x89\x08\x25\xe3\x09\x80\xf2\xe5\xe3\xd9\xa7\x3e\x5a\xd4\x8f\x7c\x0d\xd9\xa5\x18\x0a\x47\x27\x28\x1c\x83\x1f\x8d\x3f\xde\x27\xbd\xf8\xec\xdc\xf7\x21\x5f\x3e\x9e\x83\x27\x1c\x17\x9d\xf0\x10\x9c\x56\xf2\x30\x6e\x16\x9b\xe4\x34\x37\xdd\xc3\x53\x5f\x6a\x00\x41\x35\x27\x7f\x1b\x9c\x91\xa9\xf9\x73\x64\xba\xfe\xc7\x51\xd9\x19\xde\x3c\x36\x3d\xb8\x8c\xc9\xca\x01\x28\x83\x08\xb9\xc5\x14\x7b\x09\xf9\x97\xfd\x90\xec\x77\x56\xda\xec\x2f\x1b\xfb\xcf\x00\x00\x00\xff\xff\x61\xb6\x8d\xee\x92\x0c\x00\x00")

func templatesUsecasesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUsecasesTmpl,
		"templates/usecases.tmpl",
	)
}

func templatesUsecasesTmpl() (*asset, error) {
	bytes, err := templatesUsecasesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/usecases.tmpl", size: 3218, mode: os.FileMode(420), modTime: time.Unix(1620987997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/core.tmpl":       templatesCoreTmpl,
	"templates/db.tmpl":         templatesDbTmpl,
	"templates/interfaces.tmpl": templatesInterfacesTmpl,
	"templates/rest_h.tmpl":     templatesRest_hTmpl,
	"templates/usecases.tmpl":   templatesUsecasesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"core.tmpl":       &bintree{templatesCoreTmpl, map[string]*bintree{}},
		"db.tmpl":         &bintree{templatesDbTmpl, map[string]*bintree{}},
		"interfaces.tmpl": &bintree{templatesInterfacesTmpl, map[string]*bintree{}},
		"rest_h.tmpl":     &bintree{templatesRest_hTmpl, map[string]*bintree{}},
		"usecases.tmpl":   &bintree{templatesUsecasesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
