// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/core.tmpl
// templates/db.tmpl
// templates/interfaces.tmpl
// templates/rest_h.tmpl
// templates/usecases.tmpl
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\xcb\x6e\xdb\x3a\x10\x86\xd7\xe2\x53\xcc\xf1\xe2\x40\x0a\x52\xa9\x8b\xa0\x8b\x00\x59\x29\x4e\x50\x20\x70\x8d\xba\xce\xa2\x45\x17\xb4\x44\x27\x4c\x65\xd2\xa0\x46\xad\x0b\x41\xef\x5e\x90\xba\xdb\xba\xc5\x4d\x57\x86\xa4\xe1\x3f\x33\xdf\xfc\x24\xbd\xa7\xc1\x0f\xfa\xc4\x20\x90\x8a\x11\xc2\x77\x7b\xa9\x10\x6c\x62\xcd\x02\x29\x90\x1d\x70\x46\xac\x59\x9a\x82\xbb\x54\xee\x5a\x71\xc8\x32\xaf\x78\x9a\x0b\xe4\xc8\x59\x7c\xcb\xd5\x92\xe2\xb3\xfb\x99\x45\x90\x65\xa7\xe1\x5c\x20\x53\x82\x46\x5e\x28\x77\x94\x0b\x8f\x29\x15\xcf\x88\x43\x08\xfe\xde\x33\xd0\xb1\xf3\x05\xdd\x31\xd7\xa7\x3b\xa3\x00\x31\xaa\x24\x40\x48\x89\xa5\xe0\x62\x85\x24\x23\x64\x9b\x88\x00\x16\xec\xd7\x69\xb4\x6d\x62\x1c\xb8\xe8\x10\xd2\x0a\x0c\x13\x25\xe0\xff\xd3\xaf\xa9\xba\x06\x95\x55\xe2\x76\xd0\x25\xe1\xc0\x23\x8d\x78\x48\x91\xf9\x6b\x3b\xc0\x03\x14\x50\x5c\x3f\xff\xbd\x04\xb9\x79\x81\x0b\x56\xa0\x70\x4f\x15\xfc\xf5\x0a\xd3\x14\xf8\x16\x34\x30\xf7\x63\x78\xc7\x59\x14\x42\x96\x5d\xe6\xad\xd7\xef\x5c\xb3\xee\xa1\xae\xfe\xe8\xf3\x17\x8d\x2b\xcb\xd2\x14\x98\x08\x4d\x6d\x4c\x29\xa9\x74\x97\x9d\x09\x3c\x0f\xb6\x52\xf9\x8a\x51\x64\x70\x7d\x33\x96\xee\xe6\x34\xe2\x2b\x53\xf2\x91\x46\x89\x4e\x4b\x4c\x96\x3c\x73\x01\x55\xf0\x68\x14\xdf\x03\x8f\xb1\x0b\x5c\xa3\x62\x1d\xb2\xa4\x2a\x5e\xa1\xa1\xb2\xa7\x2a\x1e\x24\x5a\xc7\x37\x50\xd8\xdf\xbe\x8f\xad\xa9\xe6\xe0\xe3\xe1\x4a\xbf\x70\x9f\x69\xbc\xa4\x4f\x5c\x50\xe4\x52\xc0\x3b\x9d\x9d\x0b\xfc\x70\x55\xe9\x5e\xe6\x88\x1d\xcd\x98\x23\xdb\xc5\x13\x14\xd0\x97\x89\xc0\xb6\x84\xc6\x1f\xb8\xca\x0d\x37\x3d\xb5\x69\x44\xc3\x48\xea\x5e\x89\xc5\xb7\x46\xf4\xbf\x1b\x3d\x02\x5d\x9b\x55\x4f\x64\x42\x85\xef\xdb\xc5\x11\x4b\x0f\xb7\x50\x38\xbb\xcb\xc2\x0c\xf9\x52\xa9\xf2\x3e\xee\x59\xd9\xc6\x91\x37\x87\x4d\x73\xcf\x3a\x3d\x63\x76\x4c\x89\xa8\x96\xce\xb2\x51\xcb\x54\xc1\xba\xe0\x28\x2e\xb6\xd1\xdf\x6c\x3e\x43\x6e\x31\x87\x8d\x94\x91\x03\xf6\x50\xf2\x15\x36\x6d\xa4\x58\x9c\x44\x38\xee\x8a\x82\xc1\x60\xcf\x53\xbb\x99\xea\x9d\xca\x0e\x3a\x2a\x2f\x54\x1f\x0b\x65\x60\xbe\x74\x31\x37\x0f\xc7\xcb\x62\xf7\xd3\xe6\x85\x05\xb8\x90\x78\x27\x13\x11\x12\x4b\xeb\xb4\xa2\xb4\x45\x9a\x5e\x2b\x51\xe4\xd6\xa9\x8a\x2c\x4d\xf4\x2a\xcb\x74\x02\x28\x3f\xcf\x0f\x3c\xc6\xb8\xd7\x52\x67\xf8\xc0\x01\x5b\x4f\xbe\x3d\x58\xd3\x54\xef\x40\x27\x56\x38\x56\x91\xd3\x46\x35\x08\x25\x3f\xfb\xcf\xbf\xb7\x1c\xe8\x9c\x84\xdd\x03\xa5\xa4\x51\xdb\xd2\x3c\x57\xd5\x6a\x4a\x95\xed\xdb\xf7\xaa\xa9\x67\xe2\x35\xd9\xbc\x95\x26\x39\xbb\x53\x77\x48\xd5\xe4\xcc\x75\xab\xf3\xd1\xf3\x20\x30\x38\x7b\x6e\xdb\xd2\xcc\xcd\x95\x83\x1b\xbc\x1e\x8e\x69\xfe\x9f\x37\x30\xa4\x75\x52\x7c\xeb\x34\x7f\xd5\x46\x5c\xef\xc3\x5e\xcf\x9d\xb7\xd7\xa6\x7a\xb5\xfa\x37\xf4\x93\x2a\x03\xd2\xbc\x20\xb9\xe7\x7a\x2c\x37\xbe\xdb\xfa\xa7\x52\x91\x2d\xf5\x7b\x06\x5d\x13\x19\xcb\x36\x6a\x84\xe3\x61\xbe\xc5\xc9\x79\xcb\x22\xf6\xb6\x03\x6b\x8c\x62\xec\x50\xac\x93\xbf\xee\xdc\xfb\x13\x00\x00\xff\xff\x82\xa1\x5e\xb8\xb5\x0c\x00\x00")

func templatesCoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCoreTmpl,
		"templates/core.tmpl",
	)
}

func templatesCoreTmpl() (*asset, error) {
	bytes, err := templatesCoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/core.tmpl", size: 3253, mode: os.FileMode(420), modTime: time.Unix(1621182549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDbTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xeb\x6f\xdb\x38\x12\xff\x2c\xfd\x15\x73\x46\x50\x48\xb1\xa3\x24\x40\x71\x1f\x7a\x70\x81\x9e\x9b\x14\x39\xf4\xda\x6c\xdd\xec\x02\x5b\x14\x15\x2d\xd3\x8e\x12\x99\x72\x28\x3a\x71\xe0\xea\x7f\x5f\x0c\x49\x49\xd4\xd3\xce\xa3\x9b\xf5\x87\xb4\xe2\x63\x34\x33\xbf\x79\x6b\x49\x82\x6b\x32\xa7\xb0\x9c\xdb\x76\xb8\x58\xc6\x5c\x80\x63\x03\x00\xf4\x82\x98\x09\xba\x16\x3d\xf5\x34\x25\x82\x4c\x48\x42\x0f\x93\x9b\x48\x2f\xcd\x43\x71\xb9\x9a\x78\x41\xbc\x38\xbc\x22\xc1\x75\x70\xb8\x9c\xaf\x0f\x6f\x5f\xb7\xef\x8a\xfb\x25\xd5\xbb\x9b\x0d\x78\xe7\xdc\xbb\xe0\x21\xa4\xe9\xa1\x7e\x3a\x61\x22\x14\x21\x4d\xde\x87\xfc\x9c\x88\x4b\xef\x0b\x8d\x20\x4d\x7b\xb6\x6b\xdb\x9b\x0d\x84\x33\x88\x39\xe0\x21\xef\x03\x15\xe7\x84\x27\x63\xa1\x1e\xcf\xa6\xa7\x21\x8d\xa6\x90\xa6\xf6\x6c\xc5\x02\x70\xa6\xb0\x3f\x16\x2e\x20\xd9\x93\x4f\x64\x41\xbd\x11\x59\x48\x5a\x1f\xa8\x70\x02\xb1\x06\x2d\x9b\x37\x52\xff\x0e\x40\xd1\xaf\x10\x4f\xd3\x25\xe1\x09\xec\x53\xcd\x97\xd7\x48\x50\x1d\xde\x6c\x80\x46\x09\x85\x34\x95\x87\x0a\xae\x3c\x79\xfe\x63\x76\x01\xaa\xdb\x5f\xef\x97\xfa\x16\x65\x28\x82\x0b\x4e\xd7\x0b\xc7\x62\x00\x94\xf3\x98\xbb\xb0\x91\xaa\x24\x7c\x9e\xc0\x9b\x21\x2c\xc8\x35\x75\x16\x64\xf9\x2d\x11\x3c\x64\xf3\xef\x21\x13\x94\xcf\x48\x40\x37\xa9\x6b\xcb\x93\x37\xa7\x3c\x5e\xe0\x51\x1f\xc9\x7e\x45\xb2\xc8\x90\xf0\xd5\xee\x1f\x97\x94\x53\xb9\x7d\x3c\x3c\xf6\xd5\x95\x16\xb5\xc8\x3d\xb5\x7f\x00\x9c\xb0\x39\x85\xbd\x99\x84\xe0\xcd\xb0\x72\xda\x93\x52\x26\xe6\xa5\xec\x62\x38\xd3\xb7\xbc\xb3\x04\xb5\x70\x1e\x4b\x9e\xab\x47\x8d\xe3\x08\x87\xa4\xf7\x2e\x49\xe2\x40\x0a\xb0\x87\xaf\xcb\xde\xde\x70\x13\x7f\xfa\x26\x6a\x53\xbf\x50\xaa\xf4\x33\x0f\xe7\x21\x43\x15\xfc\x6b\x08\x2c\x8c\xb4\x42\x9b\x7e\x5a\x39\xfd\x21\xf8\x40\xd8\x14\x04\xd2\xda\xce\x0d\x0c\x51\x83\xbd\xbd\x4d\x4f\x21\x6c\xbe\x7d\xcc\xc8\xb5\x06\xbe\x97\xe2\xbe\xdf\xfa\x76\x84\xf8\x5b\xaf\xe5\x7e\xef\x3b\x0c\x61\xbf\x53\xbe\x46\xc2\xcd\x4a\x56\x36\x58\x81\x4a\x59\xb6\x09\xd7\x59\xa3\xae\x0d\x2d\x49\x05\xed\x95\x0c\xfd\x7f\x49\xcc\x32\x9b\xab\xea\xa5\xee\x30\x3b\xa8\xa7\x50\x4b\xfb\x75\xa9\x9d\xdd\x95\x93\x7b\xa1\xdd\xa2\x94\xc2\xcd\xed\x8a\xd4\x99\xd0\xbb\xca\xfc\x20\x91\x73\x51\xb7\x48\xda\x1d\x7b\xec\x8a\x40\xf2\x99\xd3\x64\x15\x09\x74\xdc\x57\x9d\x61\x67\xa3\xcf\x53\xce\xf1\xf0\xd4\x7b\x3f\xf9\x6d\x45\xf9\xfd\x97\xf8\xee\xff\x18\x53\x07\x50\xb0\x9b\xd0\x88\x06\x02\xb9\xd1\xc1\x21\x1c\x98\x01\x62\x24\xd6\xaf\x3f\x50\xe1\x25\x01\x61\x64\x12\x51\x1d\x22\x0e\x4a\x6a\x47\x7b\x9b\x0b\xd8\x0b\xe1\xa8\x66\x6b\x83\x02\x28\x61\x00\x6b\x68\xbb\x0d\x3f\xfc\xcd\x30\x0c\xfa\x7d\x19\x0e\xfb\x05\xd3\x77\x12\x46\xbf\xaf\xf0\x34\x36\xa2\x70\x11\x0a\x38\x96\xcf\xfe\x40\x62\xe1\x7a\xe3\x80\x30\x27\x57\x68\x2d\x06\xb6\x88\x68\x70\xf1\x4a\x29\xbe\xd5\x2e\x07\x55\xb4\xf0\xd1\x95\x7f\xc3\x99\x44\xa1\x16\xb5\xf4\xfa\x70\x08\xcb\xf9\xda\x3b\xe1\xfc\x53\xfc\x25\xbe\x4b\x2a\x71\x8d\x53\xb1\xe2\x0c\xaf\x0e\xf0\x4f\xbe\x57\xb0\x66\x9e\x98\x7a\x97\x84\x4d\x23\x7a\x82\x39\x47\xe1\x4c\x39\x57\x7c\xe4\x16\x24\x8f\x2b\x79\x14\xcd\xd4\x2e\x3c\x69\x5b\x4e\xfe\x18\x26\x8d\x49\xd9\xc8\x3d\x78\x44\x27\x9f\x83\x34\x1d\xc0\xd6\xb4\x5c\x5c\x30\xf3\xea\xb7\xef\xdb\xee\x8c\xb3\xb7\x22\x7e\xb8\xe0\x5d\x92\xe4\x9c\xcc\x43\x46\x44\x18\x33\xf5\xf6\x90\x89\x7f\xbf\xce\xe9\x56\xd2\xf1\x2d\xe1\x12\x04\xb9\x58\xcd\xbb\xca\xf4\xb6\x64\x5f\x6d\x88\x32\x09\xcb\xad\xcf\xb3\x59\x42\xa5\x87\xfa\x7a\xe5\xa3\xb4\x48\xb5\x50\x29\x02\x9a\xf2\x7f\xe6\xba\xad\x1a\xcd\x91\x3f\x3c\x84\x59\x18\x09\xca\xbb\x33\x7c\xae\x9d\x3c\x05\xbe\x6c\x82\xd7\xb7\xe5\x99\xf1\x4a\xc5\xa5\xd3\x98\x9f\xb1\xec\x5e\x53\xe2\x6c\x4d\xb7\x4f\x2f\x17\xe0\x09\x25\x43\xc8\x10\xa7\x87\x89\xd2\x5e\x3a\xc0\xaf\x2a\x1f\xa0\xb1\x84\xc8\xc0\xa8\xe6\xc8\x7f\x96\x8a\x9f\xa7\x2a\x7b\x29\xd5\xd6\x2b\xb4\x8e\xad\x86\xe5\x6a\x01\x00\x45\x64\x68\x8f\x7a\x25\xa2\x18\xe3\xc4\x28\x5e\x31\xa1\x62\xa1\x5d\xda\xcd\xb0\x55\x41\xea\x2d\x1c\xd5\xa8\xc7\x2c\xba\x97\xd7\x25\x4e\x12\xa2\x83\x34\x85\x9f\x3f\x73\xa3\xe8\x3c\x8b\xe8\x64\x22\x34\x58\x88\x4c\x81\x8d\xf5\x89\x2e\x4b\x02\x24\xe7\xec\xbb\x59\x09\xa0\xcc\xa8\x94\xd8\x5f\x29\xf1\xdc\x1a\xf1\xb6\xd4\x6b\xfe\xcc\xf4\x79\xd4\x9d\x41\xcb\x90\x37\x80\xba\x8b\xe2\xb6\xf5\x3c\x5b\x94\xd9\xe1\x64\xa6\x24\x4a\x23\xe5\x92\xa1\xcc\x7e\x9d\xfb\xba\xa1\x95\x25\x63\xb4\x95\x39\xa9\xdf\x27\x08\x57\x0d\x28\x2f\x21\x64\x96\xb9\x31\x3e\xc5\xea\xbf\x3e\xf4\x21\x11\x3c\x88\xd9\xad\x77\x1a\xf3\x05\x11\x67\x4c\x38\x52\x18\x75\x78\x00\xc7\x47\x75\xdb\xd0\x19\x1f\x09\xa9\x6a\xb4\x83\x8e\x3c\x5a\x27\xd3\xd1\xd2\x94\x25\xb8\x19\x2b\x37\xc1\xf2\xe2\x21\x15\xbd\x04\xe1\x05\x4a\xfa\xd2\xa8\x22\xa2\xcc\xe0\x66\x56\x2b\x4d\x6e\x3e\xf3\x29\xe5\xff\xbd\x57\x95\x56\x8c\x0f\x30\xb9\x57\x99\xc3\x09\xd9\x94\xae\xeb\xd7\x8f\x5c\x93\x0d\xbf\x50\x5a\xb5\x11\x34\x69\xfb\xcd\xcd\x56\x7c\x97\x0c\x6a\x2d\x94\x8e\x4f\x5a\xf1\xa5\xa8\xd4\xcf\x88\xf6\xb5\x31\xf5\x6f\x34\xbe\x32\x5a\x75\xb6\x03\x85\x61\xef\x50\xd4\x1e\x19\x05\x6d\x77\xcd\x8f\x7f\xa7\x74\x46\xb9\x94\xc6\x1b\x45\x71\x42\x1d\x37\x6b\x05\x82\x62\x18\xb5\x4b\xb9\x3d\x80\x23\x7d\x75\x16\x6b\x82\x9f\xe8\x5a\x38\x6e\x49\x8e\x60\x5b\x7b\xaa\x6b\x77\xc3\x07\x55\x16\x90\x04\x8b\x56\x0d\xb6\x16\xb4\xed\xfd\x1a\xa8\x9e\x2d\xd8\xd2\xb0\x35\x18\x28\xe4\x8d\x5b\x17\x5a\xbf\x0c\x31\x28\xe7\x16\x09\xd1\x10\xc8\x72\x49\xd9\xd4\xc1\xa7\x01\xae\x99\xe8\x66\x7d\xa4\x52\xdf\x09\xe7\x8e\xfb\x9f\xbf\xd5\xc4\xca\x6d\x65\x90\xec\x40\x5c\x45\x6e\xe3\x0d\xaa\x0d\xb5\x8d\x9e\x67\xf7\x31\x71\xe3\x18\x25\xdb\x3c\x59\x87\x89\x48\x5a\xc7\xc8\x8f\x98\xfd\xba\xe0\x4c\xe2\x38\x32\x3a\x49\x0b\x4b\xac\x40\xd5\x57\xb6\x6d\x35\xcc\x5c\xb2\x91\x8b\x65\x55\xaa\x1a\xdb\xb2\x6a\x5d\xa6\x6d\x59\xaa\xa9\xec\x9e\x4f\xed\x1d\xdb\x96\xbf\x4d\x88\xac\x42\x0a\xb0\x3c\xb2\xaa\xd6\x6c\x59\x1a\xb6\x19\x89\x12\xda\x8e\xb3\x95\xda\x76\x76\x14\xe5\x7c\x8b\x95\xd2\x43\x27\x07\x23\x4e\x89\xa0\xcd\x48\xc4\x93\xab\xce\x09\xc1\xe8\x42\xd3\xac\x5b\x87\xd3\x02\x53\x86\x4f\x31\x03\x94\xcf\x39\xbf\xc6\x40\xde\x88\xf1\x8d\xdf\x0c\x46\x17\xef\xf8\x3c\x71\xe2\xc9\x55\x97\x0e\x1b\xb9\xab\x32\xf7\x27\xe5\xf1\xef\x24\x5a\x29\x0e\x73\x66\x28\xe7\x4a\xc9\x68\x49\x3a\x91\xa9\xc9\x80\x5a\xba\xc5\x2b\xf9\x92\x6d\x61\xf8\xbd\x46\x8e\x55\x6c\x94\x03\x05\x64\x25\x6b\xab\x13\xe4\xcf\xf7\xe5\x9a\xa5\x57\xb0\xf1\x1a\xa0\x09\x5a\x9a\x5a\xbe\x80\x16\x57\x1c\xba\xb6\x4b\x27\xf6\x36\x58\xbd\x5c\x43\x1f\xfc\xd4\x97\x4c\x42\x79\x38\x91\x09\x6b\x56\x0f\xc8\xb3\x1e\x55\xb6\xc0\x93\x93\xc9\x15\xd0\xd2\x06\xa0\x54\x2c\xa1\x5c\x7a\x57\x5c\x72\x14\xc7\xef\x2b\xb6\xfb\xbe\x5b\x30\xed\xf8\x7d\xf5\xbf\xbe\xef\xea\x51\x43\x35\xa0\x94\x03\x62\xc8\xe6\x5d\xae\x66\xe4\x07\xab\x3c\x50\xd4\x43\xc1\x5f\x65\x14\xbb\x78\x63\x23\xfd\x6c\xb6\x97\x53\x7a\x4a\x74\xbd\x58\x4e\x5b\xdd\xf6\x71\x01\x74\x57\x77\x97\xfe\x8a\xca\x7c\x3e\x1f\xcd\xfd\x4c\x15\x9f\x8e\x04\x53\x75\xbd\xd2\x80\xaa\xce\x87\x8e\xd1\xe2\x6a\xcd\xbe\x56\x77\xb6\xb4\xec\x82\xd2\x91\x86\x15\xa7\x92\x2c\x59\xcf\xf4\xd9\xc0\xb6\xac\x1f\x03\xa3\xaf\x3e\x59\xd3\xc0\x70\x26\x6b\x25\x01\xad\x66\x1c\x4b\xf6\x3b\xb9\x3f\xe1\xca\x2e\x49\xe8\xa1\x1f\x49\x6c\x2b\xf7\x21\x15\xae\x2a\x38\x65\x40\xb5\xda\x3e\xea\xd3\xb0\xff\x87\x26\xa1\x92\xa5\xec\x60\x83\x2d\xdf\x68\xcd\xe4\x5f\x7c\x92\xd9\xfe\x51\xb7\xb5\x9c\x1d\xad\x90\xa9\x86\x16\x68\xcb\x64\xb6\x3a\xcb\x89\x27\x57\x8f\x18\xd3\x29\x11\xcc\xd1\x98\x81\xb2\x1a\x8c\x75\x11\x7e\x78\xe7\x6a\x35\x7e\x85\x78\x5c\x80\x7a\x4f\x23\xfa\xbc\x01\xca\x08\x3d\x3f\x4a\xfd\x1f\xba\x92\xf6\xa4\xa9\x7c\x6b\xc3\x27\x82\xdd\x4a\xb7\xed\x85\x5b\x47\x14\xdb\x25\x31\x54\x1d\xe3\xaf\x00\x00\x00\xff\xff\x34\xa5\x3d\xd7\x3a\x22\x00\x00")

func templatesDbTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDbTmpl,
		"templates/db.tmpl",
	)
}

func templatesDbTmpl() (*asset, error) {
	bytes, err := templatesDbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/db.tmpl", size: 8762, mode: os.FileMode(420), modTime: time.Unix(1621195651, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInterfacesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xb1\x6e\x83\x30\x10\x86\xf7\x3c\xc5\x8d\x50\xa5\xce\x12\xf5\x05\x28\x8d\x2a\x45\x55\x24\x9a\xa9\xea\xe0\x84\x6b\xeb\x96\xd8\xc8\xbe\x81\xca\xf2\xbb\x57\x84\x40\x2c\x64\x08\x42\x9d\x90\xf1\xfd\x77\xdf\xff\x9f\x57\x2b\xb0\x16\x58\xfa\xc2\x4f\xc8\x32\xc9\x7f\x10\x9c\xb3\x16\xc4\x07\x28\x0d\x2c\x95\xc4\x36\x48\x3b\xae\x4d\x46\xcd\xf1\x39\x7f\x12\x58\xe4\xe0\xdc\xe2\xaa\x4c\xf8\x09\x0b\x70\x6e\x83\x14\x1d\xa9\x82\xa3\x92\x84\x15\xb1\xa4\xf9\x2e\xa1\x69\xd9\xeb\xe7\x5c\xc9\xb5\x81\x3b\x94\x24\x48\xa0\x61\xc1\x86\x4d\xb1\xb5\x80\x85\xb9\xd0\xf9\x20\xec\x5c\xbf\x6d\x05\xd0\xbf\x7e\xfd\x2d\x2f\x2a\x94\x35\x75\x0c\xd1\xd8\xc0\x8c\x96\x80\x5a\x2b\x1d\x77\x8a\x80\xcf\xad\x30\x41\xa3\x9e\xcd\xba\xa4\xf3\xb9\x84\x9b\x4e\xaf\xf5\x3e\xea\xdb\xfb\x2d\x4d\xd6\x0e\x4d\xa8\x5a\xd7\x3f\xd8\x17\x37\x3b\xfe\x29\x24\x27\xa1\x24\xdc\xd7\xd3\x85\xa4\x87\x75\xd7\xd7\x73\xd8\xd2\x8e\x6e\x35\x98\x78\x7b\x99\x56\xc2\x90\x19\xdc\xfa\x8c\x55\xc5\x10\x1d\x94\x2a\xa6\xec\x21\xd1\xc8\x09\xc3\xc3\xd5\xe1\x7b\x34\xf0\x64\x9f\x51\x0c\xc1\x0c\xa2\x01\x32\x1f\xa9\x79\x8c\xe7\x73\x47\x38\x35\xd0\x7d\x99\x0f\x62\xcf\xcb\x6c\xaa\xdd\x79\xbc\x8f\x58\xe0\xff\xf2\xf6\x49\x16\x7f\x01\x00\x00\xff\xff\x11\x18\x1e\x45\x89\x04\x00\x00")

func templatesInterfacesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInterfacesTmpl,
		"templates/interfaces.tmpl",
	)
}

func templatesInterfacesTmpl() (*asset, error) {
	bytes, err := templatesInterfacesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/interfaces.tmpl", size: 1161, mode: os.FileMode(420), modTime: time.Unix(1621182549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRest_hTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x5f\x6f\xdb\x36\x10\x7f\x16\x3f\xc5\x4d\x18\x02\xa9\x50\x98\x6c\x28\xf6\x60\x20\x7b\x71\xd3\xd4\x45\xd0\x78\x71\xb3\x3d\x14\xc5\xc0\xda\x67\x85\xab\x4c\x29\x14\xb5\xa4\x13\xf8\xdd\x87\x23\x25\xff\x8b\x63\x39\x9e\x97\xbd\xcc\x4f\x16\x79\x7f\x7e\x77\xf7\x3b\xde\x15\x62\xfc\x55\xa4\x08\x1a\x4b\xc3\x98\x9c\x15\xb9\x36\x10\xb1\x20\x54\x68\x4e\x6e\x8d\x29\x42\x16\x84\xa5\xd1\xe3\x5c\xfd\x19\x32\x16\x84\xa9\x34\xb7\xd5\x17\x3e\xce\x67\x27\x69\xae\x65\x96\x89\x93\x59\xf5\x40\x52\x75\x0d\x7c\xa8\xf9\x8d\x96\x60\xed\x49\xf3\x75\xae\x8c\x34\x12\xcb\x37\x52\x0f\x85\xb9\xe5\xd7\x98\x81\xb5\x21\x8b\x19\x9b\x56\x6a\x0c\x91\x80\x57\x23\x13\xc3\x2d\xc9\x9f\x7f\x10\x33\xe4\x7d\x31\x73\x42\x97\xb2\x34\xd1\x3d\x10\x08\x7e\x8d\x65\x91\xab\x12\x7f\xd3\xd2\xa0\x4e\x40\xc3\xab\xe6\xfc\xae\xc2\xd2\xc4\x50\xb3\xa0\xae\x8f\x41\x4e\x81\x5c\x72\xd2\x1d\x0a\x5d\x8e\x0c\x58\xcb\x82\xa0\xae\xe9\x4a\xe5\x06\xa2\x0c\x15\xf0\xbe\x79\x78\x4d\x32\xbc\x10\xba\x7c\x2b\x31\x9b\x94\x31\xa1\x3e\x81\xba\x06\x54\x13\xb0\xf6\x8e\xf4\xa1\x77\x06\x9a\xdf\x5c\x5f\xf2\x5f\x2a\xd4\xdf\xa2\x98\xb1\x20\x28\x9a\x8b\x23\x6c\x82\xe3\x9b\xc1\x7b\x00\xb5\x73\x7f\x0c\x5a\xa8\x14\xe1\xfb\x29\x39\x23\xed\x4d\x18\x3c\xd8\x36\x92\x14\x8d\xf3\x3a\x14\x9a\x4c\xa1\x6e\xb5\xbd\x14\x05\xe5\x0f\xb8\x73\x7d\xa5\x65\x2a\x15\x58\xdb\x03\x41\x88\xb6\xa8\x47\x2e\xb8\x04\xc2\x35\x13\x23\x25\xbe\x22\xd5\x27\x4e\x5a\x1c\x3e\x19\x6c\xed\xc3\x32\x36\x87\xb9\x08\xe4\x56\x94\x43\x91\x4a\x25\x8c\xcc\x09\x08\x09\x05\xf9\x74\x5a\xa2\x49\x20\x93\x33\x69\x12\x28\x88\x6d\xbd\x33\x10\xbc\x3a\x7f\x30\x5a\x8c\xcd\x42\x85\x40\x79\x68\x31\x69\x52\x5e\xf8\x95\x53\x87\x33\xf0\x76\xe6\xe7\x97\x64\x0e\xce\xbc\x59\xe6\x8f\x9d\x1d\x74\xd9\x5d\x92\xf9\x19\x4e\xdd\xbd\xc6\xb2\xca\x4c\x02\xa6\x9f\x57\xca\x24\x80\x5a\x37\x40\xc6\x4f\x55\x30\x12\xbc\xba\x40\xd3\xb0\xac\x9f\x2b\x83\x0f\x26\xd2\x71\xe2\xec\x3b\x90\x72\x4a\x16\xde\x09\x35\xc9\xf0\x5c\xeb\x5c\x47\xa8\x89\xa0\x09\xdc\x3b\x56\x3a\xc7\xa6\xd2\x8a\xfe\xfa\x8c\xc8\x29\x2c\xb0\x7a\x11\xc1\x2b\x4f\xf1\xc9\xfb\xd1\xd5\x87\xe8\x3e\x81\xd3\x04\x8e\x86\xad\x14\x61\xb9\xc6\xc2\x93\x29\x08\x82\xa1\x48\xb1\x07\xfe\x47\x09\x4d\x16\xc7\x23\xf9\x97\xbb\xf2\xe9\xf6\xe7\x1f\x73\x23\x32\x17\x75\xaf\x8d\xde\x5f\x5c\xbb\x94\x94\xce\x54\x93\x1e\x77\x61\x5d\x68\x16\x30\x2b\x71\x1b\x42\xaf\xe3\x85\x5b\x8a\x90\x4a\x53\xfa\x36\xe3\xff\x59\xa6\x3b\x40\x2f\x53\x7a\x19\xfb\x41\x90\x93\x83\x6e\xc8\x73\xc4\x0e\xf0\x76\xbc\x4b\x70\x6d\xf7\xf3\xd9\xd7\x28\x0c\x3e\xe7\x01\xd5\x78\x77\xf5\xe5\x8f\xae\x97\xad\x7f\x33\x32\xb5\x65\x14\xdb\x77\x82\x57\xee\x69\x69\xac\xb4\xa0\xc9\xbe\xb3\xe5\x83\x6c\x63\xa4\x10\xfd\x43\xec\xde\xe8\xc1\xe4\x6d\xf3\x1c\xb5\xd9\x9e\xbf\xbd\x1d\x69\x6f\x42\x7b\x92\x32\x8d\x73\xd6\x9d\xff\x0e\x68\xc7\x8e\x0c\x1b\xab\x32\x13\xc5\xa7\xd2\x68\xa9\xd2\xcf\x0e\xe0\x42\x8b\x7f\xfc\x56\x20\xa9\xd6\xe1\xfa\xcd\xfb\x32\x57\x14\x09\xdd\x86\xbd\xa6\xb2\x36\x5e\x67\xdf\x3d\x77\x65\x7a\x87\x62\x82\x3a\xfa\xf1\xf4\xf4\x51\xf1\x3d\xd6\x5c\x7b\xf3\x17\xd8\x0e\xbb\xb5\xc4\x76\x92\xe4\x02\xf7\x1e\xb1\x0b\xa7\xf3\xf1\xf0\xe8\x6a\x19\x0a\xb5\xa3\x4e\xdd\xe0\x9c\x55\x0f\xfc\x57\x7a\xeb\x75\xbc\x34\xee\x56\x32\x35\x28\x29\x8b\x03\x65\x96\x86\xdd\x8a\x80\x0b\xe3\xb2\x8d\x23\x81\xdf\xc9\x70\xb3\xa8\x70\x47\xca\x81\x32\x11\x79\xfc\xf4\x74\x19\xac\x0d\x3f\x27\xf0\xc3\x69\x02\x3f\xbd\x9e\x43\x59\xd4\xa1\xcb\xab\xe3\x68\xb7\x87\xb5\x51\xea\xd7\x11\xfa\xf0\xf4\xfa\x67\x8b\xc6\x3c\xd7\xf5\x8e\x45\x68\xa1\x3e\xba\x7f\xb4\x45\x2c\x35\xc4\x63\x61\x5f\xa0\x61\x2e\x95\x41\x0d\xd6\x1e\xcd\x9b\xb7\xa3\x52\xeb\xab\xc4\xc6\xdd\x68\xd5\xe7\xa6\xe5\x88\x76\xb9\x66\x75\x19\x94\x83\xa5\x9d\x68\xa7\xd5\xe9\xdf\xdf\x9d\x56\x83\xec\x5a\xa5\x76\x9c\x37\xd4\xae\x9d\x83\xf2\x59\x43\x67\x8d\xf1\x9b\x3b\x74\x97\x06\x7d\x91\xfe\x5c\x6b\xcf\x43\x75\xe7\x6a\x73\x1e\xa2\x16\xdb\x91\xed\x59\xa5\x16\xe1\xd6\x2d\xc1\xb2\x79\x23\xb6\x63\xe2\xb9\x43\xe1\xa6\x98\x3c\x73\x73\xd8\x48\x9b\x1d\x58\xf3\x12\xa4\x59\xe5\xcc\x81\x28\xb3\x52\x8f\x97\xd8\x9b\x3a\xc8\xd8\x94\x6c\x4f\x3e\xee\xbb\x31\x6d\xd8\x53\x0e\x40\xbf\x37\x98\xe1\xff\xf4\xdb\x9d\x7e\x1d\xd4\x68\xd2\xb9\xff\x53\x75\x48\x4a\xfc\x1d\x00\x00\xff\xff\xc2\x1f\xc3\x59\x6f\x12\x00\x00")

func templatesRest_hTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRest_hTmpl,
		"templates/rest_h.tmpl",
	)
}

func templatesRest_hTmpl() (*asset, error) {
	bytes, err := templatesRest_hTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/rest_h.tmpl", size: 4719, mode: os.FileMode(420), modTime: time.Unix(1621194583, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUsecasesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x4d\x6f\xd3\x40\x10\x3d\x7b\x7f\xc5\x90\x93\x5d\x19\xc3\xa1\xe2\x00\xea\x01\xa5\xa5\x42\xaa\x50\xd4\xb4\x20\x81\x38\x6c\x9c\x49\xb3\xad\xb3\x0e\xbb\x63\x14\x64\xed\x7f\x47\x6b\x7b\xed\x3a\x4d\xe2\xd0\xb8\x85\x03\xa7\x68\xe3\xf9\x78\x3b\xef\xbd\x9d\x25\x8f\xef\xf8\x0d\x42\xa6\x31\xe6\x1a\x35\x63\x62\xb1\x4c\x15\x81\xcf\xbc\x41\x9c\x4a\xc2\x15\x0d\x98\x37\xc8\x73\x88\x46\x2a\xba\x56\x02\x8c\x79\x55\x9d\xce\x24\x09\x12\xa8\x4f\x85\x1a\x71\x9a\x47\x97\x98\x80\x31\x03\x16\x30\x36\xcb\x64\x0c\x7e\x06\x47\x63\x0a\xc0\x86\x9f\x7d\xe2\x0b\x8c\x86\x7c\x51\xc4\x5c\x08\x4d\x7e\x4c\x2b\xa8\x5a\x44\xc3\xf2\x37\xcf\x41\xcc\xc0\x16\x8e\x6c\xc8\x88\x2b\x3d\x26\x30\x26\x64\xde\x92\x2b\x0d\x47\x58\xb5\x8c\x36\xd7\x2c\x13\xf2\x1c\x50\x4e\xc1\x98\x00\xfc\x6f\xdf\xbb\x72\xc6\xae\xeb\x90\x56\xc7\xf6\x8f\x68\xce\xf5\x88\xdf\x08\xc9\x49\xa4\x12\x5e\x1a\x13\x82\x90\xf4\xe6\xb8\xae\x1b\x02\x2a\x95\xaa\x00\x72\xe6\xfd\xe4\xca\x9e\xca\x7f\x18\xf3\x34\x6a\x78\x7b\x02\x99\xbb\xd2\x39\xd2\x18\xb5\x16\xa9\xb4\x17\x0e\x18\xf3\xc4\xac\x48\xb0\x31\xd5\x97\x4b\xfc\x91\x09\x85\xef\x33\x9a\xfb\x1a\x75\xf0\xae\x08\x78\x71\x02\x52\x24\xb6\x87\xa7\x90\x32\x25\xed\x71\x0f\xac\xaf\xdb\x38\x99\x67\xca\xa6\x31\xad\xc2\xba\xf3\x74\xe2\x00\x7e\x11\x34\xbf\x52\x5c\x6a\x1e\x93\x43\xd9\x3b\x00\x6f\x8a\x33\x54\x60\x65\xe1\x07\x90\x97\x00\x2e\xd3\x24\x99\xf0\xf8\xae\x02\xb2\x0e\x02\x8c\x5f\x8c\x8b\x70\xa1\xf7\xe8\x4a\xc3\x34\x93\xd4\x6e\x5d\x32\x11\xab\x0d\xd4\x47\x4e\x83\x5b\x35\x07\x56\x72\x8d\x96\x6a\xe2\xfa\xe6\xa5\x45\xc9\x62\x21\x68\xcb\x3c\x9e\x40\x15\x55\x85\x47\x8f\x58\x8a\x84\x19\xc6\xca\xd4\x54\x95\x53\x3c\x47\x37\xc4\xe2\xf8\x71\xfa\x41\x60\x62\xe3\xbb\x5e\x85\x73\xdc\xf8\x28\x84\xcc\xbb\xc7\x51\x53\xdd\x98\xce\x37\xa1\x0e\xb6\x98\x13\x8d\x60\x4c\x11\xd4\xc0\x8a\x8a\xf8\x0b\x97\x00\xeb\x9f\xaf\x7e\x2d\xab\xac\xfa\x49\xd9\xd5\x70\x4c\x7f\xf1\x6d\x78\x0a\xbb\xf7\xe1\x60\x85\x3a\x4b\xa8\xd3\x90\x15\xfd\x21\xec\x60\x7b\x5f\x1e\xef\x69\x94\x54\x86\x1d\xe6\xed\xdd\x8f\x0f\x2d\xe6\x66\x50\x3a\xa6\x86\xd7\xb9\x29\x87\x0a\x39\xe1\x16\x5b\xa4\x93\xdb\x9d\xf2\x1f\x5e\x57\x45\xdd\x38\x1b\x2f\xfa\x5b\x84\xee\xe4\xdb\x0c\xba\x38\xd7\x80\x9f\x5b\xd6\x1b\xc1\xaf\x63\xff\x8a\x2a\xfd\xcc\x93\xac\xbc\x40\x8d\xb5\x67\x37\xf4\x00\xe5\x00\x13\x6d\xec\xde\x76\x56\x8b\x33\x38\x69\x38\xdb\xe6\xb8\x46\x5c\x21\xa4\x93\xdb\x5d\x2e\xe9\x8b\x87\x43\xcd\xd5\x0b\x8e\x5d\xb5\xdc\x48\xeb\xac\xd6\x8e\xfb\xc3\x8d\x76\xbd\x9c\x6e\x77\xef\xe3\x36\x51\xc1\xd4\x1e\xae\x2f\xcc\xf9\xdc\x6e\xed\xd9\x71\x87\xbb\xc6\xf5\xdf\xac\xff\x86\x9e\xf0\xc1\xb8\xdb\x6c\x74\xfa\xa3\x4f\x8d\xaf\xeb\xf4\xc1\xce\x78\x94\x16\x4f\x31\xc1\x9e\xb5\xf8\x5f\x65\xfb\xa8\xac\x19\x7c\x97\xca\xfe\x15\x81\xfd\x0e\x00\x00\xff\xff\xa7\x55\x00\x76\x16\x10\x00\x00")

func templatesUsecasesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUsecasesTmpl,
		"templates/usecases.tmpl",
	)
}

func templatesUsecasesTmpl() (*asset, error) {
	bytes, err := templatesUsecasesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/usecases.tmpl", size: 4118, mode: os.FileMode(420), modTime: time.Unix(1621182640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/core.tmpl":       templatesCoreTmpl,
	"templates/db.tmpl":         templatesDbTmpl,
	"templates/interfaces.tmpl": templatesInterfacesTmpl,
	"templates/rest_h.tmpl":     templatesRest_hTmpl,
	"templates/usecases.tmpl":   templatesUsecasesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"core.tmpl":       &bintree{templatesCoreTmpl, map[string]*bintree{}},
		"db.tmpl":         &bintree{templatesDbTmpl, map[string]*bintree{}},
		"interfaces.tmpl": &bintree{templatesInterfacesTmpl, map[string]*bintree{}},
		"rest_h.tmpl":     &bintree{templatesRest_hTmpl, map[string]*bintree{}},
		"usecases.tmpl":   &bintree{templatesUsecasesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
