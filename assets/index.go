// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/core.tmpl
// templates/db.tmpl
// templates/interfaces.tmpl
// templates/rest_h.tmpl
// templates/usecases.tmpl
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\xcb\x6e\xdb\x3a\x10\x86\xd7\xe2\x53\xcc\xf1\xe2\x40\x0a\x52\xa9\x8b\xa0\x8b\x00\x59\x29\x4e\x50\x20\x70\x8d\xba\xce\xa2\x45\x17\xb4\x44\x27\x4c\x65\xd2\xa0\x46\xad\x0b\x41\xef\x5e\x90\xba\xdb\xba\xc5\x4d\x57\x86\xa4\xe1\x3f\x33\xdf\xfc\x24\xbd\xa7\xc1\x0f\xfa\xc4\x20\x90\x8a\x11\xc2\x77\x7b\xa9\x10\x6c\x62\xcd\x02\x29\x90\x1d\x70\x46\xac\x59\x9a\x82\xbb\x54\xee\x5a\x71\xc8\x32\xaf\x78\x9a\x0b\xe4\xc8\x59\x7c\xcb\xd5\x92\xe2\xb3\xfb\x99\x45\x90\x65\xa7\xe1\x5c\x20\x53\x82\x46\x5e\x28\x77\x94\x0b\x8f\x29\x15\xcf\x88\x43\x08\xfe\xde\x33\xd0\xb1\xf3\x05\xdd\x31\xd7\xa7\x3b\xa3\x00\x31\xaa\x24\x40\x48\x89\xa5\xe0\x62\x85\x24\x23\x64\x9b\x88\x00\x16\xec\xd7\x69\xb4\x6d\x62\x1c\xb8\xe8\x10\xd2\x0a\x0c\x13\x25\xe0\xff\xd3\xaf\xa9\xba\x06\x95\x55\xe2\x76\xd0\x25\xe1\xc0\x23\x8d\x78\x48\x91\xf9\x6b\x3b\xc0\x03\x14\x50\x5c\x3f\xff\xbd\x04\xb9\x79\x81\x0b\x56\xa0\x70\x4f\x15\xfc\xf5\x0a\xd3\x14\xf8\x16\x34\x30\xf7\x63\x78\xc7\x59\x14\x42\x96\x5d\xe6\xad\xd7\xef\x5c\xb3\xee\xa1\xae\xfe\xe8\xf3\x17\x8d\x2b\xcb\xd2\x14\x98\x08\x4d\x6d\x4c\x29\xa9\x74\x97\x9d\x09\x3c\x0f\xb6\x52\xf9\x8a\x51\x64\x70\x7d\x33\x96\xee\xe6\x34\xe2\x2b\x53\xf2\x91\x46\x89\x4e\x4b\x4c\x96\x3c\x73\x01\x55\xf0\x68\x14\xdf\x03\x8f\xb1\x0b\x5c\xa3\x62\x1d\xb2\xa4\x2a\x5e\xa1\xa1\xb2\xa7\x2a\x1e\x24\x5a\xc7\x37\x50\xd8\xdf\xbe\x8f\xad\xa9\xe6\xe0\xe3\xe1\x4a\xbf\x70\x9f\x69\xbc\xa4\x4f\x5c\x50\xe4\x52\xc0\x3b\x9d\x9d\x0b\xfc\x70\x55\xe9\x5e\xe6\x88\x1d\xcd\x98\x23\xdb\xc5\x13\x14\xd0\x97\x89\xc0\xb6\x84\xc6\x1f\xb8\xca\x0d\x37\x3d\xb5\x69\x44\xc3\x48\xea\x5e\x89\xc5\xb7\x46\xf4\xbf\x1b\x3d\x02\x5d\x9b\x55\x4f\x64\x42\x85\xef\xdb\xc5\x11\x4b\x0f\xb7\x50\x38\xbb\xcb\xc2\x0c\xf9\x52\xa9\xf2\x3e\xee\x59\xd9\xc6\x91\x37\x87\x4d\x73\xcf\x3a\x3d\x63\x76\x4c\x89\xa8\x96\xce\xb2\x51\xcb\x54\xc1\xba\xe0\x28\x2e\xb6\xd1\xdf\x6c\x3e\x43\x6e\x31\x87\x8d\x94\x91\x03\xf6\x50\xf2\x15\x36\x6d\xa4\x58\x9c\x44\x38\xee\x8a\x82\xc1\x60\xcf\x53\xbb\x99\xea\x9d\xca\x0e\x3a\x2a\x2f\x54\x1f\x0b\x65\x60\xbe\x74\x31\x37\x0f\xc7\xcb\x62\xf7\xd3\xe6\x85\x05\xb8\x90\x78\x27\x13\x11\x12\x4b\xeb\xb4\xa2\xb4\x45\x9a\x5e\x2b\x51\xe4\xd6\xa9\x8a\x2c\x4d\xf4\x2a\xcb\x74\x02\x28\x3f\xcf\x0f\x3c\xc6\xb8\xd7\x52\x67\xf8\xc0\x01\x5b\x4f\xbe\x3d\x58\xd3\x54\xef\x40\x27\x56\x38\x56\x91\xd3\x46\x35\x08\x25\x3f\xfb\xcf\xbf\xb7\x1c\xe8\x9c\x84\xdd\x03\xa5\xa4\x51\xdb\xd2\x3c\x57\xd5\x6a\x4a\x95\xed\xdb\xf7\xaa\xa9\x67\xe2\x35\xd9\xbc\x95\x26\x39\xbb\x53\x77\x48\xd5\xe4\xcc\x75\xab\xf3\xd1\xf3\x20\x30\x38\x7b\x6e\xdb\xd2\xcc\xcd\x95\x83\x1b\xbc\x1e\x8e\x69\xfe\x9f\x37\x30\xa4\x75\x52\x7c\xeb\x34\x7f\xd5\x46\x5c\xef\xc3\x5e\xcf\x9d\xb7\xd7\xa6\x7a\xb5\xfa\x37\xf4\x93\x2a\x03\xd2\xbc\x20\xb9\xe7\x7a\x2c\x37\xbe\xdb\xfa\xa7\x52\x91\x2d\xf5\x7b\x06\x5d\x13\x19\xcb\x36\x6a\x84\xe3\x61\xbe\xc5\xc9\x79\xcb\x22\xf6\xb6\x03\x6b\x8c\x62\xec\x50\xac\x93\xbf\xee\xdc\xfb\x13\x00\x00\xff\xff\x82\xa1\x5e\xb8\xb5\x0c\x00\x00")

func templatesCoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCoreTmpl,
		"templates/core.tmpl",
	)
}

func templatesCoreTmpl() (*asset, error) {
	bytes, err := templatesCoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/core.tmpl", size: 3253, mode: os.FileMode(420), modTime: time.Unix(1621182549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDbTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x59\xeb\x6f\xdb\xc8\x11\xff\x4c\xfe\x15\x53\xc1\x08\x48\x4b\xa6\x6d\x20\xe8\x87\x2b\x74\xc0\x55\xb1\x03\x17\x69\xe2\x46\xe7\x16\x68\x10\x1c\x57\xd4\x4a\xa6\x4d\x2d\xe5\xdd\x95\x2d\x43\xe1\xff\x5e\xcc\xee\x92\x5a\x3e\x25\x3f\x52\x9f\x3e\x38\xe1\x3e\x86\x33\xf3\x9b\x37\x97\x24\xba\x25\x73\x0a\xcb\xb9\xeb\xc6\x8b\x65\xca\x25\x78\x2e\x00\x40\x2f\x4a\x99\xa4\x6b\xd9\xd3\x4f\x53\x22\xc9\x84\x08\x7a\x2c\xee\x12\xb3\x34\x8f\xe5\xf5\x6a\x12\x44\xe9\xe2\xf8\x86\x44\xb7\xd1\xf1\x72\xbe\x3e\xbe\x7f\xdf\xbe\x2b\x1f\x97\xd4\xec\x6e\x36\x10\x5c\xf2\xe0\x8a\xc7\x90\x65\xc7\xe6\xe9\x8c\xc9\x58\xc6\x54\x7c\x88\xf9\x25\x91\xd7\xc1\x57\x9a\x40\x96\xf5\x5c\xdf\x75\x37\x1b\x88\x67\x90\x72\xc0\x43\xc1\x47\x2a\x2f\x09\x17\x63\xa9\x1f\x2f\xa6\xe7\x31\x4d\xa6\x90\x65\xee\x6c\xc5\x22\xf0\xa6\x70\x38\x96\x3e\x20\xd9\xb3\xcf\x64\x41\x83\x11\x59\x28\x5a\x1f\xa9\xf4\x22\xb9\x06\x23\x5b\x30\xd2\xff\x0e\x40\xd3\xaf\x10\xcf\xb2\x25\xe1\x02\x0e\xa9\xe1\x2b\x68\x24\xa8\x0f\x6f\x36\x40\x13\x41\x21\xcb\xd4\xa1\x2d\x57\x81\x3a\xff\x29\xbf\x00\xd5\xed\xdf\x1f\x97\xe6\x16\x65\x28\x82\x0f\x5e\xd7\x0b\xc7\x72\x00\x94\xf3\x94\xfb\xb0\x51\xaa\x24\x7c\x2e\xe0\x97\x21\x2c\xc8\x2d\xf5\x16\x64\xf9\x4d\x48\x1e\xb3\xf9\xf7\x98\x49\xca\x67\x24\xa2\x9b\xcc\x77\xd5\xc9\xbb\x73\x9e\x2e\xf0\x68\x88\x64\x7f\x47\xb2\xc8\x90\x0c\xf5\xee\x7f\xae\x29\xa7\x6a\xfb\x74\x78\x1a\xea\x2b\xc7\xc7\x30\x8b\x13\x49\xb9\x7a\xda\x6c\x8e\x1a\xb5\xa4\x36\xf3\x03\x9c\xb0\x39\x85\x83\x99\x42\xe4\x97\x61\xe5\x74\xa0\x84\x16\xf6\x25\x8b\xb2\xbe\x15\x5c\x08\x54\xca\x65\xaa\x44\xa8\x1e\xb5\x8e\x23\x3a\x8a\xde\x6f\x42\xa4\x91\x92\xe7\x00\x5f\x97\xbf\xbd\xe1\x26\xfe\xcc\x4d\x54\xae\x79\xa1\xd2\xf0\x17\x1e\xcf\x63\x86\x1a\xf9\xcb\x10\x58\x9c\x18\xfd\x36\xfd\x8c\xae\xfa\x43\x08\x81\xb0\x29\x48\xa4\xb5\x9b\x1b\x18\x22\xfa\xbd\x83\x4d\x4f\x03\x6e\xbf\x7d\xcc\xc8\xad\xb1\x83\x5e\x86\xfb\x61\xeb\xdb\x11\xf1\x6f\xbd\x96\xfb\xbd\xef\x30\x84\xc3\x4e\xf9\x1a\x09\x37\x2b\x59\x9b\x64\x0d\xaa\xca\x72\x65\x69\xeb\x0a\x6e\x45\x61\x43\x08\x65\x50\x75\x80\x7f\x88\x94\xe5\xb6\x58\x51\x50\xdd\x8f\x3a\xd4\x54\xa8\xa5\xfd\x96\x52\x4e\xb7\x7f\xba\x15\x81\xd4\x33\xa7\x62\x95\x48\xb4\xe6\x77\x9d\xae\xb9\x31\xe7\x29\xe7\x78\x78\x1a\x7c\x98\xfc\x6b\x45\xf9\xe3\xd7\xf4\xe1\x9f\x18\x77\x06\xb0\x65\x57\xd0\x84\x46\x12\xb9\x31\x1e\x13\x0f\x6c\xaf\x19\xc9\xf5\xfb\x8f\x54\x06\x22\x22\x8c\x4c\x12\x6a\xfc\xe6\xa8\xa4\x76\x34\xe5\xb9\x84\x83\x18\x4e\x6a\xb8\xaa\x98\xa6\x85\x90\x96\x29\x58\xda\x6e\xc3\x0f\x7f\x33\x0c\x15\x61\x5f\x85\x8c\xfe\x96\xe9\x07\x05\x63\xd8\xd7\x78\x5a\x1b\x49\xbc\x88\x25\x9c\xaa\xe7\x70\xa0\xb0\xf0\x83\x71\x44\x98\x57\x28\xb4\x16\x18\x5a\x44\xb4\xb8\x78\xa7\x15\xdf\x6a\xc9\x83\x2a\x5a\xf8\xe8\xab\xbf\xf1\x4c\xa1\x50\x73\x65\xb3\x3e\x1c\xc2\x72\xbe\x0e\xce\x38\xff\x9c\x7e\x4d\x1f\x44\xc5\xd9\x39\x95\x2b\xce\xf0\xea\x00\xff\xb8\x75\x2f\xb1\x4f\x4c\x83\x6b\xc2\xa6\x09\x3d\xc3\xb8\xac\x71\xa6\x9c\x6b\x3e\x0a\x0b\x52\xc7\xb5\x3c\x9a\x66\xe6\x16\x00\xb9\xbb\xf2\xd6\xa7\x58\x34\x26\x2e\x2b\x6d\xe1\x11\x13\x91\x8f\xb2\x6c\x00\x3b\x53\xd7\xf6\x82\x9d\x7b\xbe\x7d\xdf\x75\x67\x9c\xbf\x15\xf1\xc3\x85\xe0\x9a\x88\x4b\x32\x8f\x19\x91\x71\xca\xf4\xdb\x63\x26\xff\xfa\xbe\xa0\x5b\x49\x59\xf7\x84\x2b\x10\xd4\x62\x35\x37\x69\xd3\xdb\x91\xa1\x8c\x21\xaa\x44\xa5\xb6\xbe\xcc\x66\x82\x2a\x0f\x0d\xcd\xca\x27\x65\x91\x7a\xa1\x92\x28\x9b\x72\x64\xee\xba\xad\x1a\x2d\x90\x2f\xe7\xc4\x4e\xeb\x56\xda\x29\xf2\xc2\xdb\x66\x3d\x73\x5b\x9d\x19\xaf\x74\x5c\x3a\x4f\xf9\x05\xcb\xef\x35\x65\x93\xd6\x1c\xf4\xf2\x1c\x0a\x2f\xc8\xa3\x31\x43\x9c\x9e\x26\x4a\x7b\x3e\x85\x9f\x95\x53\xa1\x31\xaf\xe6\x60\x54\x73\xe4\x9f\x4b\xc5\xaf\x53\xaa\xbc\x95\x6a\xeb\x65\x4b\xc7\x56\x77\x45\x53\x49\xb7\x1d\x51\xaf\x44\x14\x63\x9c\x1c\xa5\x2b\x26\x75\x2c\x74\x4b\xbb\x39\xb6\x3a\x48\xfd\x0a\x27\x35\xea\x29\x4b\x1e\xd5\x75\x85\x93\x82\xe8\x28\xcb\xe0\xc7\x8f\xc2\x28\x3a\xcf\x22\x3a\xb9\x08\x0d\x16\xa2\x52\x60\x63\x7d\x62\xca\x92\x08\xc9\x79\x87\x7e\x5e\x02\x68\x33\x2a\x25\xf6\x77\x5a\x3c\xbf\x46\xbc\x2d\xf5\xda\x3f\x3b\x7d\x9e\x74\x67\xd0\x32\xe4\x0d\xa0\xee\xa3\xb8\x5d\x8d\xc0\x0e\x65\x76\x38\x99\x2d\x89\xd6\x48\xb9\x64\x28\xb3\x5f\xe7\xbe\x6e\x68\x65\xc9\x18\x6d\x65\x4e\xe9\xf7\x05\xc2\x55\x03\xca\x5b\x08\x99\x67\x6e\x8c\x4f\xa9\xfe\x6f\x08\x7d\x10\x92\x47\x29\xbb\x0f\xce\x53\xbe\x20\xf2\x82\x49\x4f\x09\xa3\x0f\x0f\xe0\xf4\xa4\x6e\x1b\x26\xe3\x23\x21\x5d\x8d\x76\xd0\x51\x47\xeb\x64\x3a\x5a\x9a\xb2\x04\x77\x63\xed\x26\x58\x5e\x3c\xa5\xa2\x57\x20\xbc\x41\x49\x1f\xda\xc5\x4d\x42\x99\xc5\xcd\xac\x56\x9a\xdc\x7d\xe1\x53\xca\xff\xfe\xa8\x2b\xad\x14\x1f\x60\xf2\xa8\x33\x87\x17\xb3\x29\x5d\xd7\xaf\x9f\xf8\x36\x1b\xe1\x56\x69\xd5\x46\xd0\xa6\x1d\x36\x37\x5b\xe9\x83\x18\xd4\x5a\x28\x13\x9f\x8c\xe2\x4b\x51\xa9\x9f\x13\xed\x1b\x63\xea\xdf\x19\x7c\x55\xb4\xea\x6c\x07\xb6\x86\xbd\x47\x51\x7b\x62\x15\xb4\xdd\x35\x3f\xfe\x9d\xd2\x19\xe5\x4a\x9a\x60\x94\xa4\x82\x7a\x7e\xde\x0a\x44\xdb\x81\xcd\x3e\xe5\xf6\x00\x4e\xcc\xd5\x59\x6a\x08\x7e\xa6\x6b\xe9\xf9\x25\x39\xa2\x5d\xed\xa9\xa9\xdd\x2d\x1f\xd4\x59\x40\x11\xdc\xb6\x6a\xb0\xb3\xa0\x6d\xef\xd7\x40\xf7\x6c\xd1\x8e\x86\xad\xc1\x40\xa1\x68\xdc\xba\xd0\xfa\x69\x88\x41\x39\xb7\x28\x88\x86\x40\x96\x4b\xca\xa6\x1e\x3e\x0d\x70\xcd\x46\x37\xef\x23\xb5\xfa\xce\x38\xf7\xfc\xbf\xfd\x5f\x4d\xac\xdc\x56\x46\x62\x0f\xe2\x3a\x72\x5b\x6f\xd0\x6d\xa8\x6b\xf5\x3c\xfb\x8f\x52\x1b\xc7\x28\xf9\xe6\xd9\x3a\x16\x52\xb4\x8e\x5a\x9f\x31\x1f\xf5\xc1\x9b\xa4\x69\x62\x75\x92\x0e\x96\x58\x91\xae\xaf\x5c\xd7\x69\x98\xb9\xe4\x23\x17\xc7\xa9\x54\x35\xae\xe3\xd4\xba\x4c\xd7\x71\x74\x53\xd9\x3d\x9f\x3a\x38\x75\x9d\x70\x97\x10\x79\x85\x14\x61\x79\xe4\x54\xad\xd9\x71\x0c\x6c\x33\x92\x08\xda\x8e\xb3\x93\xb9\x6e\x7e\x14\xe5\xfc\x15\x2b\xa5\xa7\x4e\x0e\x46\x9c\x12\x49\x9b\x91\x48\x27\x37\x9d\x13\x82\xd1\x95\xa1\x59\xb7\x0e\xaf\x05\xa6\x1c\x9f\xed\x0c\x50\x3d\x17\xfc\x5a\x43\x6b\x2b\xc6\x37\xce\xd5\x47\x57\xbf\xf1\xb9\xf0\xd2\xc9\x4d\x97\x0e\x1b\xb9\xab\x32\xf7\x5f\xca\xd3\x7f\x93\x64\xa5\x39\x2c\x98\xa1\x9c\x6b\x25\xa3\x25\x99\x44\xa6\x27\x03\x7a\xe9\x1e\xaf\x14\x4b\xae\x83\xe1\xf7\x16\x39\xd6\xb1\x51\x0d\x14\x90\x95\xbc\xad\x16\xc8\x5f\x18\xaa\x35\xc7\xac\x60\xe3\x35\x40\x13\x74\x0c\xb5\x62\x01\x2d\x6e\x7b\xe8\xd6\x2d\x9d\x38\xd8\x60\xf5\x72\x0b\x7d\x08\xb3\x50\x31\x09\xe5\xe1\x44\x2e\xac\x5d\x3d\x20\xcf\x66\x54\xd9\x02\x4f\x41\xa6\x50\x40\x4b\x1b\x80\x52\x31\x41\xb9\xf2\xae\xb4\xe4\x28\x5e\xd8\xd7\x6c\xf7\x43\x7f\xcb\xb4\x17\xf6\xf5\xff\xfa\xa1\x6f\x7f\x27\xb0\x02\x4a\x39\x20\xc6\x6c\xde\xe5\x6a\x56\x7e\x70\xca\x03\x45\x33\x14\xfc\x59\x46\xb1\x8f\x37\x36\xd2\xcf\x67\x7b\x05\xa5\x97\x44\xd7\xab\xe5\xb4\xd5\x6d\x9f\x17\x40\xf7\x75\x77\xe5\xaf\xa8\xcc\xd7\xf3\xd1\xc2\xcf\x74\xf1\xe9\x29\x30\x75\xd7\xab\x0c\xa8\xea\x7c\xe8\x18\x2d\xae\xd6\xec\x6b\x75\x67\xcb\xca\x2e\xa8\x1c\x69\x58\x71\x2a\xc5\x92\xf3\x4a\x9f\x0d\x5c\xc7\xf9\x63\x60\xf5\xd5\x67\x6b\x1a\x59\xce\xe4\xac\x14\xa0\xd5\x8c\xe3\xa8\x7e\xa7\xf0\x27\x5c\xd9\x27\x09\x3d\xf5\x23\x89\xeb\x14\x3e\xa4\xc3\x55\x05\xa7\x1c\xa8\x56\xdb\x47\x7d\x5a\xf6\xff\xd4\x24\x54\xb2\x94\x3d\x6c\xb0\xe5\x3b\xa6\x9d\xfc\xb7\x9f\x64\x76\x7f\xf8\x6c\x2d\x67\x47\x2b\x64\xaa\xa1\x05\xda\x31\x99\xad\xce\x72\xd2\xc9\xcd\x33\xc6\x74\x5a\x04\x7b\x34\x66\xa1\xac\x07\x63\x5d\x84\x9f\xde\xb9\x3a\x8d\x5f\x21\x9e\x17\xa0\x3e\xd0\x84\xbe\x6e\x80\xb2\x42\xcf\x1f\xa5\xfe\x0f\x5d\xc9\x78\xd2\x54\xbd\xb5\xe1\x13\xc1\x7e\xa5\xdb\xee\xc2\xad\x23\x8a\xed\x93\x18\xaa\x8e\xf1\xbf\x00\x00\x00\xff\xff\x00\xbe\x68\x48\x5e\x21\x00\x00")

func templatesDbTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDbTmpl,
		"templates/db.tmpl",
	)
}

func templatesDbTmpl() (*asset, error) {
	bytes, err := templatesDbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/db.tmpl", size: 8542, mode: os.FileMode(420), modTime: time.Unix(1621182549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInterfacesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xb1\x6e\x83\x30\x10\x86\xf7\x3c\xc5\x8d\x50\xa5\xce\x12\xf5\x05\x28\x8d\x2a\x45\x55\x24\x9a\xa9\xea\xe0\x84\x6b\xeb\x96\xd8\xc8\xbe\x81\xca\xf2\xbb\x57\x84\x40\x2c\x64\x08\x42\x9d\x90\xf1\xfd\x77\xdf\xff\x9f\x57\x2b\xb0\x16\x58\xfa\xc2\x4f\xc8\x32\xc9\x7f\x10\x9c\xb3\x16\xc4\x07\x28\x0d\x2c\x95\xc4\x36\x48\x3b\xae\x4d\x46\xcd\xf1\x39\x7f\x12\x58\xe4\xe0\xdc\xe2\xaa\x4c\xf8\x09\x0b\x70\x6e\x83\x14\x1d\xa9\x82\xa3\x92\x84\x15\xb1\xa4\xf9\x2e\xa1\x69\xd9\xeb\xe7\x5c\xc9\xb5\x81\x3b\x94\x24\x48\xa0\x61\xc1\x86\x4d\xb1\xb5\x80\x85\xb9\xd0\xf9\x20\xec\x5c\xbf\x6d\x05\xd0\xbf\x7e\xfd\x2d\x2f\x2a\x94\x35\x75\x0c\xd1\xd8\xc0\x8c\x96\x80\x5a\x2b\x1d\x77\x8a\x80\xcf\xad\x30\x41\xa3\x9e\xcd\xba\xa4\xf3\xb9\x84\x9b\x4e\xaf\xf5\x3e\xea\xdb\xfb\x2d\x4d\xd6\x0e\x4d\xa8\x5a\xd7\x3f\xd8\x17\x37\x3b\xfe\x29\x24\x27\xa1\x24\xdc\xd7\xd3\x85\xa4\x87\x75\xd7\xd7\x73\xd8\xd2\x8e\x6e\x35\x98\x78\x7b\x99\x56\xc2\x90\x19\xdc\xfa\x8c\x55\xc5\x10\x1d\x94\x2a\xa6\xec\x21\xd1\xc8\x09\xc3\xc3\xd5\xe1\x7b\x34\xf0\x64\x9f\x51\x0c\xc1\x0c\xa2\x01\x32\x1f\xa9\x79\x8c\xe7\x73\x47\x38\x35\xd0\x7d\x99\x0f\x62\xcf\xcb\x6c\xaa\xdd\x79\xbc\x8f\x58\xe0\xff\xf2\xf6\x49\x16\x7f\x01\x00\x00\xff\xff\x11\x18\x1e\x45\x89\x04\x00\x00")

func templatesInterfacesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInterfacesTmpl,
		"templates/interfaces.tmpl",
	)
}

func templatesInterfacesTmpl() (*asset, error) {
	bytes, err := templatesInterfacesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/interfaces.tmpl", size: 1161, mode: os.FileMode(420), modTime: time.Unix(1621182549, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRest_hTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xdf\x6f\xdb\xb6\x13\x7f\x16\xff\x8a\xfb\x0a\x5f\x04\x52\xa1\x30\xd9\x50\xec\xc1\x40\xf6\xe2\xa6\x69\x8a\xa0\xf1\xe2\x66\x7b\x28\x8a\x81\xb5\xcf\x0a\x57\x99\x52\x28\x6a\x49\x27\xf0\x7f\x1f\x8e\x94\x64\x47\x73\xac\xc4\x33\x32\x0c\x98\x9f\x2c\xf2\x7e\x7c\xee\xee\xc3\xbb\x2b\xc4\xec\xab\x48\x11\x34\x96\x86\x31\xb9\x2c\x72\x6d\x20\x62\x41\xa8\xd0\x1c\xdd\x18\x53\x84\x2c\x08\x4b\xa3\x67\xb9\xfa\x3d\x64\x2c\x08\x53\x69\x6e\xaa\x2f\x7c\x96\x2f\x8f\xd2\x5c\xcb\x2c\x13\x47\xcb\xea\x9e\xa4\xea\x1a\xf8\x44\xf3\x6b\x2d\xc1\xda\xa3\xe6\xeb\x54\x19\x69\x24\x96\x6f\xa4\x9e\x08\x73\xc3\xaf\x30\x03\x6b\x43\x16\x33\xb6\xa8\xd4\x0c\x22\x01\xaf\xa6\x26\x86\x1b\x92\x3f\xfd\x20\x96\xc8\xc7\x62\xe9\x84\x2e\x64\x69\xa2\x3b\x20\x10\xfc\x0a\xcb\x22\x57\x25\xfe\xa2\xa5\x41\x9d\x80\x86\x57\xcd\xf9\x6d\x85\xa5\x89\xa1\x66\x41\x5d\x1f\x82\x5c\x00\xb9\xe4\xa4\x3b\x11\xba\x9c\x1a\xb0\x96\x05\x41\x5d\xd3\x95\xca\x0d\x44\x19\x2a\xe0\x63\x73\xff\x9a\x64\x78\x21\x74\xf9\x56\x62\x36\x2f\x63\x42\x7d\x04\x75\x0d\xa8\xe6\x60\xed\x2d\xe9\xc3\xe8\x04\x34\xbf\xbe\xba\xe0\x3f\x55\xa8\xbf\x45\x31\x63\x41\x50\x34\x17\x07\xd8\x04\xc7\x37\x83\xf7\x00\x6a\xe7\xfe\x10\xb4\x50\x29\xc2\xff\x17\xe4\x8c\xb4\x37\x61\xf0\x60\xdb\x48\x52\x34\xce\xeb\x44\x68\x32\x85\xba\xd5\xf6\x52\x14\x94\x3f\xe0\xce\xf5\xa5\x96\xa9\x54\x60\xed\x08\x04\x21\xda\xa2\x1e\xb9\xe0\x12\x08\x7b\x26\xa6\x4a\x7c\x45\xaa\x4f\x9c\xb4\x38\x7c\x32\x58\xef\xc3\x32\xd6\xc1\x5c\x05\x72\x23\xca\x89\x48\xa5\x12\x46\xe6\x04\x84\x84\x82\x7c\xb1\x28\xd1\x24\x90\xc9\xa5\x34\x09\x14\xc4\xb6\xd1\x09\x08\x5e\x9d\xde\x1b\x2d\x66\x66\xa5\x42\xa0\x3c\xb4\x98\x34\x29\x2f\xfc\xd2\xa9\xc3\x09\x78\x3b\xdd\xf9\x05\x99\x83\x13\x6f\x96\xf9\x63\x67\x07\x5d\x76\xd7\x64\x7e\x84\x63\x77\xaf\xb1\xac\x32\x93\x80\x19\xe7\x95\x32\x09\xa0\xd6\x0d\x90\xd9\x63\x15\x8c\x04\xaf\xce\xd0\x34\x2c\x1b\xe7\xca\xe0\xbd\x89\x74\x9c\x38\xfb\x0e\xa4\x5c\x90\x85\x77\x42\xcd\x33\x3c\xd5\x3a\xd7\x11\x6a\x22\x68\x02\x77\x8e\x95\xce\xb1\xa9\xb4\xa2\xbf\x3e\x23\x72\x01\x2b\xac\x5e\x44\xf0\xca\x53\x7c\xfe\x7e\x7a\xf9\x21\xba\x4b\xe0\x38\x81\x83\x49\x2b\x45\x58\xae\xb0\xf0\x64\x0a\x82\x60\x22\x52\x1c\x81\xff\x51\x42\x93\xd5\xf1\x54\xfe\xe1\xae\x7c\xba\xfd\xf9\xc7\xdc\x88\xcc\x45\x3d\x6a\xa3\xf7\x17\x57\x2e\x25\xa5\x33\xd5\xa4\xc7\x5d\x58\x17\x9a\x05\xcc\x4a\xdc\x86\xd0\xeb\x78\xe1\x96\x22\xa4\xd2\x94\xbe\xcd\xf8\x3f\x96\xe9\x01\xd0\xeb\x94\x5e\xc7\xbe\x17\xe4\xe4\x60\x18\x72\x87\xd8\x01\xde\x8e\x77\x0d\xae\x1d\x6e\x9f\x63\x8d\xc2\xe0\x73\x1a\xa8\xc6\xdb\xcb\x2f\xbf\x0d\x75\xb6\xf1\xf5\xd4\xd4\x96\x51\x6c\xff\x13\xbc\x72\xad\xa5\xb1\xd2\x82\x26\xfb\xce\x96\x0f\xb2\x8d\x91\x42\xf4\x8d\xd8\xf5\xe8\xf3\xf9\xdb\xa6\x1d\xb5\xd9\xee\x7a\xef\x40\xda\x9b\xd0\x1e\xa5\x4c\xe3\x9c\x0d\xe7\x7f\x00\xda\xa1\x23\xc3\xc6\xaa\x2c\x45\xf1\xa9\x34\x5a\xaa\xf4\xb3\x03\xb8\xd2\xe2\x1f\xbf\x15\x48\xaa\x75\xd8\xbf\x79\x5f\xe6\x8a\x22\xa1\xdb\x70\xd4\x54\xd6\xc6\x7d\xf6\xdd\x71\x57\xa6\x77\x28\xe6\xa8\xa3\xef\x8f\x8f\xff\x52\x7c\x8f\x35\xd7\xde\xfc\x19\xb6\xc3\xae\x97\xd8\x41\x92\x9c\xe1\xce\x23\x76\xe5\xb4\x1b\x0f\xed\x30\x38\x43\xc3\xa5\x07\x71\xae\x1a\xb9\x66\x68\x09\x9d\xba\xd9\xb9\xac\xee\xf9\xcf\xd4\xee\x75\xbc\x36\xf1\x1e\x24\xeb\xbc\xa4\x44\x9e\x2b\xb3\x36\xef\x1e\x08\xb8\x48\x2e\xda\x50\x12\xf8\x95\x0c\x37\xbb\x0a\x77\xbc\x3c\x57\x26\x22\x8f\x9f\x1e\xaf\x84\xb5\xe1\xe7\x04\xbe\x3b\x4e\xe0\x87\xd7\x1d\x94\x55\x29\x86\xbc\x3a\x9a\x0e\x7b\xe8\x4d\x53\xbf\x91\xd0\x87\x67\xd8\xdf\xdb\x35\xba\x4a\x6c\x5d\x35\xa8\x28\xff\xca\x4d\xe3\x69\xdc\xea\x16\x03\xca\xcf\x63\x82\x3d\xf8\x70\x02\xcd\xa3\x7f\x54\xc1\x93\x70\x92\x4b\x65\x50\x83\xb5\x07\x5d\x8f\xda\xce\x0b\xd6\xaf\xf7\x13\x27\x0a\x3d\xc8\xc1\x51\xf8\xac\xb1\xd2\x23\xf4\xe6\x07\xf8\x94\xf7\xf7\x22\xcf\xaf\xf7\xfa\xf6\xf5\xf8\xf6\x5f\x8b\xed\xc8\x76\xac\x52\x8b\x70\xeb\x1e\x60\x59\xc7\xc1\x76\x10\x3c\xb7\xed\x5f\x17\xf3\x67\xee\x06\x1b\x69\xf3\x04\xd6\xbc\x04\x69\x1e\x72\x66\x4f\x94\x79\x50\x8f\x97\xd8\x8c\x06\xc8\xd8\x94\x6c\x47\x3e\xee\xba\x13\x6d\xd8\x44\xf6\x40\xbf\x37\x98\xe1\x7f\xf4\x7b\x3a\xfd\x06\xa8\xd1\xa4\x73\xf7\x56\xb5\x4f\x4a\xfc\x19\x00\x00\xff\xff\xbb\x62\x1b\x8c\x51\x12\x00\x00")

func templatesRest_hTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRest_hTmpl,
		"templates/rest_h.tmpl",
	)
}

func templatesRest_hTmpl() (*asset, error) {
	bytes, err := templatesRest_hTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/rest_h.tmpl", size: 4689, mode: os.FileMode(420), modTime: time.Unix(1621184590, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUsecasesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\x4d\x6f\xd3\x40\x10\x3d\x7b\x7f\xc5\x90\x93\x5d\x19\xc3\xa1\xe2\x00\xea\x01\xa5\xa5\x42\xaa\x50\xd4\xb4\x20\x81\x38\x6c\x9c\x49\xb3\xad\xb3\x0e\xbb\x63\x14\x64\xed\x7f\x47\x6b\x7b\xed\x3a\x4d\xe2\xd0\xb8\x85\x03\xa7\x68\xe3\xf9\x78\x3b\xef\xbd\x9d\x25\x8f\xef\xf8\x0d\x42\xa6\x31\xe6\x1a\x35\x63\x62\xb1\x4c\x15\x81\xcf\xbc\x41\x9c\x4a\xc2\x15\x0d\x98\x37\xc8\x73\x88\x46\x2a\xba\x56\x02\x8c\x79\x55\x9d\xce\x24\x09\x12\xa8\x4f\x85\x1a\x71\x9a\x47\x97\x98\x80\x31\x03\x16\x30\x36\xcb\x64\x0c\x7e\x06\x47\x63\x0a\xc0\x86\x9f\x7d\xe2\x0b\x8c\x86\x7c\x51\xc4\x5c\x08\x4d\x7e\x4c\x2b\xa8\x5a\x44\xc3\xf2\x37\xcf\x41\xcc\xc0\x16\x8e\x6c\xc8\x88\x2b\x3d\x26\x30\x26\x64\xde\x92\x2b\x0d\x47\x58\xb5\x8c\x36\xd7\x2c\x13\xf2\x1c\x50\x4e\xc1\x98\x00\xfc\x6f\xdf\xbb\x72\xc6\xae\xeb\x90\x56\xc7\xf6\x8f\x68\xce\xf5\x88\xdf\x08\xc9\x49\xa4\x12\x5e\x1a\x13\x82\x90\xf4\xe6\xb8\xae\x1b\x02\x2a\x95\xaa\x00\x72\xe6\xfd\xe4\xca\x9e\xca\x7f\x18\xf3\x34\x6a\x78\x7b\x02\x99\xbb\xd2\x39\xd2\x18\xb5\x16\xa9\xb4\x17\x0e\x18\xf3\xc4\xac\x48\xb0\x31\xd5\x97\x4b\xfc\x91\x09\x85\xef\x33\x9a\xfb\x1a\x75\xf0\xae\x08\x78\x71\x02\x52\x24\xb6\x87\xa7\x90\x32\x25\xed\x71\x0f\xac\xaf\xdb\x38\x99\x67\xca\xa6\x31\xad\xc2\xba\xf3\x74\xe2\x00\x7e\x11\x34\xbf\x52\x5c\x6a\x1e\x93\x43\xd9\x3b\x00\x6f\x8a\x33\x54\x60\x65\xe1\x07\x90\x97\x00\x2e\xd3\x24\x99\xf0\xf8\xae\x02\xb2\x0e\x02\x8c\x5f\x8c\x8b\x70\xa1\xf7\xe8\x4a\xc3\x34\x93\xd4\x6e\x5d\x32\x11\xab\x0d\xd4\x47\x4e\x83\x5b\x35\x07\x56\x72\x8d\x96\x6a\xe2\xfa\xe6\xa5\x45\xc9\x62\x21\x68\xcb\x3c\x9e\x40\x15\x55\x85\x47\x8f\x58\x8a\x84\x19\xc6\xca\xd4\x54\x95\x53\x3c\x47\x37\xc4\xe2\xf8\x71\xfa\x41\x60\x62\xe3\xbb\x5e\x85\x73\xdc\xf8\x28\x84\xcc\xbb\xc7\x51\x53\xdd\x98\xce\x37\xa1\x0e\xb6\x98\x13\x8d\x60\x4c\x11\xd4\xc0\x8a\x8a\xf8\x0b\x97\x00\xeb\x9f\xaf\x7e\x2d\xab\xac\xfa\x49\xd9\xd5\x70\x4c\x7f\xf1\x6d\x78\x0a\xbb\xf7\xe1\x60\x85\x3a\x4b\xa8\xd3\x90\x15\xfd\x21\xec\x60\x7b\x5f\x1e\xef\x69\x94\x54\x86\x1d\xe6\xed\xdd\x8f\x0f\x2d\xe6\x66\x50\x3a\xa6\x86\xd7\xb9\x29\x87\x0a\x39\xe1\x16\x5b\xa4\x93\xdb\x9d\xf2\x1f\x5e\x57\x45\xdd\x38\x1b\x2f\xfa\x5b\x84\xee\xe4\xdb\x0c\xba\x38\xd7\x80\x9f\x5b\xd6\x1b\xc1\xaf\x63\xff\x8a\x2a\xfd\xcc\x93\xac\xbc\x40\x8d\xb5\x67\x37\xf4\x00\xe5\x00\x13\x6d\xec\xde\x76\x56\x8b\x33\x38\x69\x38\xdb\xe6\xb8\x46\x5c\x21\xa4\x93\xdb\x5d\x2e\xe9\x8b\x87\x43\xcd\xd5\x0b\x8e\x5d\xb5\xdc\x48\xeb\xac\xd6\x8e\xfb\xc3\x8d\x76\xbd\x9c\x6e\x77\xef\xe3\x36\x51\xc1\xd4\x1e\xae\x2f\xcc\xf9\xdc\x6e\xed\xd9\x71\x87\xbb\xc6\xf5\xdf\xac\xff\x86\x9e\xf0\xc1\xb8\xdb\x6c\x74\xfa\xa3\x4f\x8d\xaf\xeb\xf4\xc1\xce\x78\x94\x16\x4f\x31\xc1\x9e\xb5\xf8\x5f\x65\xfb\xa8\xac\x19\x7c\x97\xca\xfe\x15\x81\xfd\x0e\x00\x00\xff\xff\xa7\x55\x00\x76\x16\x10\x00\x00")

func templatesUsecasesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUsecasesTmpl,
		"templates/usecases.tmpl",
	)
}

func templatesUsecasesTmpl() (*asset, error) {
	bytes, err := templatesUsecasesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/usecases.tmpl", size: 4118, mode: os.FileMode(420), modTime: time.Unix(1621182640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/core.tmpl":       templatesCoreTmpl,
	"templates/db.tmpl":         templatesDbTmpl,
	"templates/interfaces.tmpl": templatesInterfacesTmpl,
	"templates/rest_h.tmpl":     templatesRest_hTmpl,
	"templates/usecases.tmpl":   templatesUsecasesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"core.tmpl":       &bintree{templatesCoreTmpl, map[string]*bintree{}},
		"db.tmpl":         &bintree{templatesDbTmpl, map[string]*bintree{}},
		"interfaces.tmpl": &bintree{templatesInterfacesTmpl, map[string]*bintree{}},
		"rest_h.tmpl":     &bintree{templatesRest_hTmpl, map[string]*bintree{}},
		"usecases.tmpl":   &bintree{templatesUsecasesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
