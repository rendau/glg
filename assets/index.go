// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/core.tmpl
// templates/db.tmpl
// templates/interfaces.tmpl
// templates/rest_h.tmpl
// templates/usecases.tmpl
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x96\xcb\x6e\xdb\x3a\x10\x86\xd7\xe6\x53\xcc\xf1\xe2\x40\x0a\x52\xb9\x8b\xa0\x8b\x00\x59\x29\x4e\x50\x20\x70\x8d\xba\xce\xa2\x45\x17\xb4\x44\x27\x4c\x65\xd2\xa0\x46\xad\x0b\x81\xef\x5e\x90\xba\xdb\xba\xc5\x4d\x57\x86\xa4\xe1\x3f\x33\xdf\xfc\x24\xbd\xa7\xc1\x0f\xfa\xc4\x20\x90\x8a\x11\xc2\x77\x7b\xa9\x10\x1c\x32\x99\x06\x52\x20\x3b\xe0\x94\x4c\xa6\x69\x0a\xde\x52\x79\x6b\xc5\x41\xeb\x59\xfe\x34\x17\xc8\x91\xb3\xf8\x96\xab\x25\xc5\x67\xef\x33\x8b\x40\xeb\xd3\x70\x2e\x90\x29\x41\xa3\x59\x28\x77\x94\x8b\x19\x53\x2a\x9e\x12\x97\x10\xfc\xbd\x67\x60\x62\xe7\x0b\xba\x63\x9e\x4f\x77\x56\x01\x62\x54\x49\x80\x90\x92\x89\x82\x8b\x15\x12\x4d\xc8\x36\x11\x01\x2c\xd8\xaf\xd3\x68\xc7\xc6\xb8\x70\xd1\x22\x64\x14\x18\x26\x4a\xc0\xff\xa7\x5f\x53\x75\x0d\x4a\x97\xe2\x4e\xd0\x26\xe1\xc2\x23\x8d\x78\x48\x91\xf9\x6b\x27\xc0\x03\xe4\x50\x3c\x3f\xfb\xbd\x04\xb9\x79\x81\x0b\x96\xa3\xf0\x4e\x15\xfc\xf5\x0a\xd3\x14\xf8\x16\x0c\x30\xef\x63\x78\xc7\x59\x14\x82\xd6\x97\x59\xeb\xd5\x3b\xcf\xae\x7b\xa8\xaa\x3f\xfa\xfc\xc5\xe0\xd2\x3a\x4d\x81\x89\xd0\xd6\xc6\x94\x92\xca\x74\xd9\x9a\x60\x36\x83\xad\x54\xbe\x62\x14\x19\x5c\xdf\x0c\xa5\xbb\x39\x8d\xf8\xca\x94\x7c\xa4\x51\x62\xd2\x12\x9b\x25\xcb\x9c\x43\x15\x3c\x1a\xc4\xf7\xc0\x63\x6c\x03\x57\xab\xd8\x84\x2c\xa9\x8a\x57\x68\xa9\xec\xa9\x8a\x7b\x89\x56\xf1\x35\x14\xce\xb7\xef\x43\x6b\xca\x39\xf8\x78\xb8\x32\x2f\xbc\x67\x1a\x2f\xe9\x13\x17\x14\xb9\x14\xf0\xce\x64\xe7\x02\x3f\x5c\x95\xba\x97\x19\x62\xd7\x30\xe6\xc8\x76\xf1\x08\x05\xf4\x65\x22\xb0\x29\x61\xf0\x07\x9e\xf2\xc2\x4d\x47\x6d\x06\x51\x3f\x92\xaa\x57\x32\xe1\x5b\x2b\xfa\xdf\x8d\x19\x81\xa9\x6d\x52\x4d\x64\x44\x85\xef\x9b\xc5\x91\x89\x19\x6e\xae\x70\x76\x97\xb9\x19\xb2\xa5\x52\x65\x7d\xdc\xb3\xa2\x8d\x23\x6f\xf6\x9b\xe6\x9e\xb5\x7a\xc6\xee\x98\x02\x51\x25\xad\xf5\xa0\x65\xca\x60\x53\x70\x14\xb3\x96\xdd\xf2\x97\x9b\xd1\x92\x5c\xcc\x61\x23\x65\xe4\x82\xd3\x57\xcc\x0a\xeb\xb6\x52\x2c\x4e\x22\x1c\x76\x49\xce\xa4\x97\xc1\xb9\xdd\x8d\xf5\x56\x69\x17\x13\x95\x15\x6e\x8e\x8d\x22\x30\x5b\xba\x98\xdb\x87\xe3\x65\xb1\xf7\x69\xf3\xc2\x02\x5c\x48\xbc\x93\x89\x08\xc9\xc4\xe8\x34\xa2\x8c\x85\xea\x5e\x2c\xd0\x64\xd6\x2a\x8b\x2c\x4c\xf6\x2a\x4b\xb5\x02\x28\x3e\xcf\x0f\x3c\xc6\xb8\xd3\x72\x67\xf8\xc2\x05\xc7\x38\xa1\x39\x68\xdb\x54\xe7\x80\x47\x56\x38\x54\x91\xdb\x44\xd5\x0b\x25\xbb\x1b\xce\xbf\xd7\x5c\x68\x9d\x84\xd3\x01\xa5\xa0\x51\xd8\x54\x6b\xfb\x5c\x56\x6b\x28\x95\xdb\xa0\x79\xef\xda\x7a\x46\x5e\xa3\xf5\x5b\x6b\x94\xb3\x5b\x75\xfb\x54\x6d\xce\x4c\xb7\x3c\x3f\x67\x33\x08\x2c\xce\x8e\xdb\xb8\x30\x73\x7d\x65\xef\x86\xaf\x86\x63\x9b\xff\xe7\x0d\xf4\x69\x9d\x14\xdf\x38\xed\x5f\xb5\x11\xd7\xfb\xb0\xd3\x73\xe7\xed\xb5\xb1\x5e\x2d\xff\x2d\xfd\xa4\xca\x82\xb4\x2f\x48\xe6\xb9\x0e\xcb\x0d\xef\xb6\xee\xa9\x94\x64\x0b\xfd\x8e\x41\x57\x44\x86\xb2\x0d\x1a\xe1\x78\x98\x6f\x71\x72\xde\xb2\x88\xbd\xed\xc0\x6a\xa3\x18\x3a\x14\xab\xe4\xaf\x3b\xf7\xfe\x04\x00\x00\xff\xff\xbf\x48\x40\xdb\xd5\x0c\x00\x00")

func templatesCoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCoreTmpl,
		"templates/core.tmpl",
	)
}

func templatesCoreTmpl() (*asset, error) {
	bytes, err := templatesCoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/core.tmpl", size: 3285, mode: os.FileMode(420), modTime: time.Unix(1621113902, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDbTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x19\x69\x6f\xdb\x38\xf6\xb3\xf4\x2b\xde\x1a\x41\x21\xc5\x8e\x92\x00\xc5\x7e\xe8\xc2\x05\xba\x6e\x52\x64\xd1\x6d\x33\x75\x33\x03\x4c\x51\x54\xb2\x44\x3b\x4c\x64\xca\xa1\xe8\xc4\x81\xab\xff\x3e\x78\x24\x25\x53\xa7\x9d\xa3\x93\xf1\x87\xb4\x3c\xde\xe3\xbb\x2f\x2d\x82\xf0\x3a\x98\x11\x58\xcc\x6c\x9b\xce\x17\x09\x17\xe0\xd8\x00\x00\xbd\x30\x61\x82\xac\x44\x4f\xad\xa2\x40\x04\x93\x20\x25\x87\xe9\x4d\xac\xb7\x66\x54\x5c\x2e\x27\x5e\x98\xcc\x0f\xaf\x82\xf0\x3a\x3c\x5c\xcc\x56\x87\xb7\xaf\xdb\x4f\xc5\xfd\x82\xe8\xd3\xf5\x1a\xbc\x73\xee\x5d\x70\x0a\x59\x76\xa8\x57\x27\x4c\x50\x41\x49\xfa\x9e\xf2\xf3\x40\x5c\x7a\x5f\x48\x0c\x59\xd6\xb3\x5d\xdb\x5e\xaf\x81\x4e\x21\xe1\x80\x97\xbc\x0f\x44\x9c\x07\x3c\x1d\x0b\xb5\x3c\x8b\x4e\x29\x89\x23\xc8\x32\x7b\xba\x64\x21\x38\x11\xec\x8f\x85\x0b\x88\xf6\xe4\x53\x30\x27\xde\x28\x98\x4b\x5c\x1f\x88\x70\x42\xb1\x02\xcd\x9b\x37\x52\xff\x0e\x40\xe1\xaf\x20\xcf\xb2\x45\xc0\x53\xd8\x27\x9a\x2e\xaf\x11\xa1\xba\xbc\x5e\x03\x89\x53\x52\x60\xd9\xd0\x24\x81\x36\x3b\x9e\x84\xff\x98\x23\x80\xea\xf1\xd7\xfb\x05\x51\x50\x84\x21\xb8\x0b\x4e\x17\x01\x63\x31\x00\xc2\x79\xc2\x5d\x58\x4b\xd1\x06\x7c\x96\xc2\x9b\x21\xcc\x83\x6b\xe2\xcc\x83\xc5\xb7\x54\x70\xca\x66\xdf\x29\x13\x84\x4f\x83\x90\xac\x33\xd7\x96\x37\x6f\x4e\x79\x32\xc7\xab\x3e\xa2\xfd\x8a\x68\x91\x20\xe1\xab\xd3\x3f\x2e\x09\x27\xf2\xf8\x78\x78\xec\x2b\x90\xc3\x43\x98\xd2\x58\x10\x2e\x57\xeb\xf5\x41\xa3\xd4\xe4\x61\x7e\x81\x07\x6c\x46\x60\x6f\x2a\xa5\xf1\x66\x58\xb9\xed\x49\xa6\x53\x13\xc8\xc0\xac\xa0\xbc\xb3\x14\x85\x72\x9e\x48\x16\xaa\x57\x8d\xeb\xa8\x2d\x89\xef\x5d\x9a\x26\xa1\xe4\x67\x0f\x9f\xcb\x5f\x6f\x80\xc4\x9f\x86\x44\xe1\xea\x07\xa5\x84\x3f\x73\x3a\xa3\x0c\x25\xf2\xaf\x21\x30\x1a\x6b\xf9\x36\xfd\xb4\xac\xfa\x43\xf0\x21\x60\x11\x08\xc4\xb5\x9d\x1a\x18\xa2\xf6\x7b\x7b\xeb\x9e\x52\xb8\xf9\xfa\x98\x05\xd7\xda\x0e\x7a\x19\x9e\xfb\xad\xaf\xa3\xc6\xbf\xf5\x5a\xe0\x7b\xdf\x61\x08\xfb\x9d\xfc\x35\x22\x6e\x16\xb2\x32\xc9\x9a\xaa\x2a\xdb\x95\xad\x76\xd7\xb0\x2b\x02\x1c\x82\x2f\xbc\xaa\x43\xfc\x2f\x4d\x58\x6e\x9b\x15\x81\xd5\xfd\xaa\x43\x6c\x85\x98\xda\xa1\xa4\xb0\xba\xfd\xb5\xc4\x51\x0b\x07\x34\x82\x21\xec\xad\x69\x54\x7b\x9d\x46\xf2\x09\x1a\xd9\x15\x39\xc9\x35\x27\xe9\x32\x16\xe8\x24\xaf\x3a\x3d\x7e\xad\xef\x13\xce\xf1\x72\xe4\xbd\x9f\xfc\xb6\x24\xfc\xfe\x4b\x72\xf7\x7f\x0c\x6f\x03\xd8\xbc\x9b\x92\x98\x84\x02\x29\xd6\x8e\x48\x07\xa6\x33\x8e\xc4\xea\xf5\x07\x22\xbc\x34\x0c\x58\x30\x89\x89\x76\xc7\x83\x92\x36\x51\x73\x33\x01\x7b\x14\x8e\x6a\xe6\x22\x43\xa7\x62\x42\x18\x16\x66\x28\xad\xcd\x2c\xf0\x37\xc5\x08\xe4\xf7\x65\x24\xea\x6f\x88\xbe\x93\xb2\xf4\xfb\x4a\xa8\xc6\x41\x4c\xe7\x54\xc0\xb1\x5c\xfb\x03\x29\x54\xd7\x1b\x87\x01\x73\x0a\x81\xd6\xe2\x4d\x0b\x8b\x06\x15\xaf\x94\xe0\x5b\x1d\x64\x50\xd5\x16\x2e\x5d\xf9\x97\x4e\xa5\x16\x6a\x11\x42\xef\x0f\x87\xb0\x98\xad\xbc\x13\xce\x3f\x25\x5f\x92\xbb\xb4\x12\x43\x38\x11\x4b\xce\x10\x74\x80\x7f\xec\xba\xf3\x99\x37\x22\xef\x32\x60\x51\x4c\x4e\x30\xdc\x2b\x3d\x13\xce\x15\x1d\x85\x05\xc9\xeb\x8a\x1f\x85\x33\xb3\x0b\x05\xd9\xdb\xd2\xe3\x47\x9a\x36\xe6\x47\x23\x3b\xe2\x15\x1d\xe8\x0f\xb2\x6c\x00\x5b\x33\xe4\x06\xc0\x4c\x69\xdf\xbe\x6f\x83\x19\xe7\xaf\xa2\xfe\x70\xc3\xbb\x0c\xd2\xf3\x60\x46\x59\x20\x68\xc2\xd4\xeb\x94\x89\x7f\xbf\x2e\xf0\x56\x32\xe1\x6d\xc0\xa5\x12\xe4\x66\x35\xe5\x29\xd3\xdb\x92\xf8\xb4\x21\xca\xfc\x27\x8f\x3e\x4f\xa7\x29\x91\x1e\xea\xeb\x9d\x8f\xd2\x22\xd5\x46\x25\xff\x36\xa5\xde\xdc\x75\x5b\x25\x5a\x68\xbe\x9c\x6a\x3b\xad\x5b\x4a\xa7\x48\x37\x2f\x9b\x4c\x35\xb4\xbc\x33\x5e\xaa\xb8\x74\x9a\xf0\x33\x96\xc3\x35\x25\xa9\xd6\xd4\xf6\xf4\xd4\x0c\x4f\x48\xcf\x94\xa1\x9e\x1e\xc6\x4a\x7b\x9a\x86\x5f\x95\xaa\xa1\x31\x5d\xe7\xca\xa8\x26\xaa\x7f\x96\x88\x9f\xa7\x02\x7a\x29\xd1\xd6\xab\xa1\x8e\xa3\xee\x42\xa9\x92\x6e\x3b\xa2\x5e\x09\x29\xc6\x38\x31\x4a\x96\x4c\xa8\x58\x68\x97\x4e\x73\xdd\xaa\x20\xf5\x16\x8e\x6a\xd8\x13\x16\xdf\x4b\x70\xa9\x27\xa9\xa2\x83\x2c\x83\x9f\x3f\x0b\xa3\xe8\xbc\x8b\xda\xc9\x59\x68\xb0\x10\x99\x02\x1b\xeb\x13\x5d\x96\x84\x88\xce\xd9\x77\xf3\x12\x40\x99\x51\x29\xb1\xbf\x52\xec\xb9\x35\xe4\x6d\xa9\xd7\xfc\x99\xe9\xf3\xa8\x3b\x83\x96\x55\xde\xa0\xd4\x5d\x04\xb7\xad\xbf\xd8\x22\xcc\x0e\x27\x33\x39\x51\x12\x29\x97\x0c\x65\xf2\xeb\xd4\xd7\x0d\xad\xcc\x19\x23\xad\xc4\x49\xf9\x3e\x81\xb9\x6a\x40\x79\x09\x26\xf3\xcc\x8d\xf1\x29\x51\xff\xf5\xa1\x0f\xa9\xe0\x61\xc2\x6e\xbd\xd3\x84\xcf\x03\x71\xc6\x84\x23\x99\x51\x97\x07\x70\x7c\x54\xb7\x0d\x9d\xf1\x11\x91\xaa\x46\x3b\xf0\xc8\xab\x75\x34\x1d\x9d\x52\x99\x83\x9b\xb1\x72\x13\x2c\x2f\x1e\x52\xd1\x4b\x25\xbc\x40\x49\xef\x9b\xc5\x4d\x4c\x98\x41\xcd\xb4\x56\x9a\xdc\x7c\xe6\x11\xe1\xff\xbd\x57\x95\x56\x82\x0b\x98\xdc\xab\xcc\xe1\x50\x16\x91\x55\x1d\xfc\xc8\x35\xc9\xf0\x37\x42\xab\x76\x63\x26\x6e\xbf\xb9\xd9\x4a\xee\xd2\x41\xad\x85\xd2\xf1\x49\x0b\xbe\x14\x95\xfa\x39\xd2\xbe\x36\xa6\xfe\x8d\xd6\xaf\x8c\x56\x9d\xed\xc0\xc6\xb0\x77\x28\x6a\x8f\x8c\x82\xb6\xbb\xe6\xc7\xbf\x11\x99\x12\x2e\xb9\xf1\x46\x71\x92\x12\xc7\xcd\x5b\x81\x70\x33\x07\xda\xa5\xdc\x1e\xc0\x91\x06\x9d\x26\x1a\xe1\x27\xb2\x12\x8e\x5b\xe2\x23\xdc\xd6\x9e\xea\xda\xdd\xf0\x41\x95\x05\x24\xc2\x4d\xab\x06\x5b\x0b\xda\xf6\x7e\x0d\x54\xcf\x16\x6e\x69\xd8\x1a\x0c\x14\x8a\xc6\xad\x4b\x5b\xbf\x4c\x63\x50\xce\x2d\x52\x45\x43\x08\x16\x0b\xc2\x22\x07\x57\x03\xdc\x33\xb5\x9b\xf7\x91\x4a\x7c\x27\x9c\x3b\xee\x7f\xfe\x56\x13\x2b\xb7\x95\x61\xba\x03\x72\x15\xb9\x8d\x17\x54\x1b\x6a\x1b\x3d\xcf\xee\x13\xdb\xc6\x69\x4c\x7e\x78\xb2\xa2\xa9\x48\x5b\x27\xba\x8f\x18\xbb\xba\xe0\x4c\x92\x24\x36\x3a\x49\x0b\x4b\xac\x50\xd5\x57\xb6\x6d\x35\xcc\x5c\xf2\x91\x8b\x65\x55\xaa\x1a\xdb\xb2\x6a\x5d\xa6\x6d\x59\xaa\xa9\xec\x1e\x73\xed\x1d\xdb\x96\xbf\x8d\x89\xbc\x42\x0a\xb1\x3c\xb2\xaa\xd6\x6c\x59\x5a\x6d\xd3\x20\x4e\x49\xbb\x9e\xad\xcc\xb6\xf3\xab\xc8\xe7\x5b\xac\x94\x1e\x3a\x39\x18\x71\x12\x08\xd2\xac\x89\x64\x72\xd5\x39\x21\x18\x5d\x68\x9c\x75\xeb\x70\x5a\xd4\x94\xeb\x67\x33\x88\x93\xeb\x82\x5e\x63\x16\x6e\xc4\xf8\xc6\xf1\xfd\xe8\xe2\x1d\x9f\xa5\x4e\x32\xb9\xea\x92\x61\x23\x75\x55\xe2\xfe\x24\x3c\xf9\x3d\x88\x97\x8a\xc2\x82\x18\xc2\xb9\x12\x32\x5a\x92\x4e\x64\x6a\x32\xa0\xb6\x6e\x11\xa4\xd8\xb2\x2d\x0c\xbf\xd7\x48\xb1\x8a\x8d\x72\xa0\x80\xa4\xe4\x6d\x75\x8a\xf4\xf9\xbe\xdc\xb3\xf4\x0e\x36\x5e\x03\x34\x41\x4b\x63\x2b\x36\xd0\xe2\x36\x97\xae\xed\xd2\x8d\xbd\x35\x56\x2f\xd7\xd0\x07\x3f\xf3\x25\x91\x50\x1e\x4e\xe4\xcc\x9a\xd5\x03\xd2\xac\x47\x95\x2d\xea\x29\xd0\x14\x02\x68\x69\x03\x90\x2b\x96\x12\x2e\xbd\x2b\x29\x39\x8a\xe3\xf7\x15\xd9\x7d\xdf\xdd\x10\xed\xf8\x7d\xf5\xbf\xbe\xef\x9a\x9f\x1f\x1a\x66\xca\x4a\x73\x94\xcd\xba\x5c\xcd\xc8\x0f\x56\x79\xa0\xa8\x87\x82\xbf\xca\x28\x76\xf1\xc6\x46\xfc\xf9\x6c\xaf\xc0\xf4\x94\xe8\x7a\xb1\x88\x5a\xdd\xf6\x71\x01\x74\x57\x77\x97\xfe\x8a\xc2\x7c\x3e\x1f\x2d\xfc\x4c\x15\x9f\x8e\x54\xa6\xea\x7a\xa5\x01\x55\x9d\x0f\x1d\xa3\xc5\xd5\x9a\x7d\xad\xee\x6c\x59\xd9\x05\xa5\x23\x0d\x2b\x4e\x25\x49\xb2\x9e\xe9\xeb\x83\x6d\x59\x3f\x06\x46\x5f\x7d\xb2\x22\xa1\xe1\x4c\xd6\x52\x2a\xb4\x9a\x71\x2c\xd9\xef\x14\xfe\x84\x3b\xbb\x24\xa1\x87\x7e\x6b\xb1\xad\xc2\x87\x54\xb8\xaa\xe8\x29\x57\x54\xab\xed\xa3\x3c\x0d\xfb\x7f\x68\x12\x2a\x59\xca\x0e\x36\xd8\xf2\x79\xd4\x4c\xfe\x9b\x4f\x32\xdb\xbf\xa7\xb6\x96\xb3\xa3\x25\x12\xd5\xd0\x02\x6d\x99\xcc\x56\x67\x39\xc9\xe4\xea\x11\x63\x3a\xc5\x82\x39\x1a\x33\xb4\xac\x06\x63\x5d\x88\x1f\xde\xb9\x5a\x8d\x5f\x21\x1e\x17\xa0\xde\x93\x98\x3c\x6f\x80\x32\x42\xcf\x8f\x52\xff\x87\xae\xa4\x3d\x29\x92\xaf\x36\x7c\x22\xd8\xad\x74\xdb\x5e\xb8\x75\x44\xb1\x5d\x12\x43\xd5\x31\xfe\x0a\x00\x00\xff\xff\xfa\x5d\x0d\x93\xc5\x21\x00\x00")

func templatesDbTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDbTmpl,
		"templates/db.tmpl",
	)
}

func templatesDbTmpl() (*asset, error) {
	bytes, err := templatesDbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/db.tmpl", size: 8645, mode: os.FileMode(420), modTime: time.Unix(1621113937, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInterfacesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x5f\x4f\x83\x30\x14\xc5\xdf\xf7\x29\xee\x23\x18\xec\x5e\x16\xbf\x00\xe2\x62\xb2\x98\x25\xb8\x27\xe3\x43\x37\xae\x5a\x65\x2d\x69\xef\x03\xa6\xe9\x77\x37\x80\xfc\x09\x96\x8d\x10\x9f\x08\x6d\xcf\xb9\xbf\x73\xda\xf5\x1a\xac\x05\x96\x3c\xf1\x33\xb2\x54\xf2\x2f\x04\xe7\xac\x05\xf1\x06\x4a\x03\x4b\x24\xb1\x2d\xd2\x9e\x6b\x93\x52\xf3\xfb\x98\x3d\x08\xcc\x33\x70\x6e\xd5\x2b\x63\x7e\xc6\x1c\x9c\xdb\x22\x05\x27\x2a\xe1\xa4\x24\x61\x49\x2c\x6e\xbe\x11\x34\x96\x23\x3f\xe7\x0a\xae\x0d\xdc\xa0\x24\x41\x02\x0d\xf3\x1a\x36\x87\xad\x05\xcc\x0d\x76\x2e\x3d\x46\x2d\xea\x57\x58\xad\xdf\xb5\x06\x30\xde\x7e\xfe\x2e\x7e\x33\xa2\xac\xe4\x21\x04\x97\x00\x52\x8a\x00\xb5\x56\x3a\xec\x14\x9e\xdc\x3b\x61\xbc\xc1\x07\xb1\xab\x23\x5d\xee\x08\xae\x26\xef\xcf\x0f\x51\x5f\x5e\xaf\x69\xd2\x76\x68\x4c\xe5\xa6\x5a\x60\x1f\xdc\xec\xf9\xbb\x90\x9c\x84\x92\x70\x5b\x4d\x17\x92\xee\x36\x9d\xef\x20\xe1\xdf\x7a\x3d\x69\xbd\x8d\xb7\x9b\x49\x29\x0c\x99\xc9\x57\xb0\xe0\xaa\x42\x08\x8e\x4a\xe5\x73\xee\x21\xd6\xc8\x09\xfd\xc3\xd5\xf1\xf3\x62\xe1\xf1\x21\xa5\x10\xbc\x1d\x04\x13\x64\x43\xa4\xea\x71\x3a\x57\xff\x77\x84\x73\x0b\x3d\x14\xd9\x24\xf6\xb2\xce\xe6\xc6\x5d\xc6\x7b\x8f\x39\xfe\x2f\xef\x98\x64\xf5\x13\x00\x00\xff\xff\x3a\x47\x1f\x88\x99\x04\x00\x00")

func templatesInterfacesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInterfacesTmpl,
		"templates/interfaces.tmpl",
	)
}

func templatesInterfacesTmpl() (*asset, error) {
	bytes, err := templatesInterfacesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/interfaces.tmpl", size: 1177, mode: os.FileMode(420), modTime: time.Unix(1621114707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRest_hTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x5d\x6f\xdb\x36\x14\x7d\x16\x7f\xc5\x9d\x30\x14\x52\xa1\x30\xd9\x50\xec\xc1\x40\xf6\xe2\xa6\xa9\x8b\xa0\xf1\xec\x66\x7b\x28\x8a\x81\xb5\xaf\x65\xae\x32\xa5\x50\xd4\xe2\x4e\xe0\x7f\x1f\x2e\x49\xd9\x8e\x1b\x5b\x4d\xd1\x6d\x0f\x6b\x9e\x62\xde\x0f\x9e\x7b\xee\xf1\xa1\x2b\x31\xfb\x20\x72\x04\x8d\xb5\x61\x4c\xae\xaa\x52\x1b\x48\x58\x14\x2b\x34\xa7\x4b\x63\xaa\x98\x45\x71\x6d\xf4\xac\x54\x7f\xc6\x8c\x45\x71\x2e\xcd\xb2\x79\xcf\x67\xe5\xea\x34\x2f\xb5\x2c\x0a\x71\xba\x6a\xd6\x94\xd5\xb6\xc0\xc7\x9a\xdf\x68\x09\xd6\x9e\x86\x4f\x17\xca\x48\x23\xb1\x7e\x2e\xf5\x58\x98\x25\x9f\x60\x01\xd6\xc6\x2c\x65\x6c\xd1\xa8\x19\x24\x02\x9e\x4e\x4d\x0a\x4b\xca\xbf\x78\x2d\x56\xc8\x87\x62\xe5\x92\xae\x64\x6d\x92\x3b\x20\x10\x7c\x82\x75\x55\xaa\x1a\x7f\xd3\xd2\xa0\xce\x40\xc3\xd3\x70\x7e\xdb\x60\x6d\x52\x68\x59\xd4\xb6\x27\x20\x17\x40\x57\x72\xaa\x1d\x0b\x5d\x4f\x0d\x58\xcb\xa2\xa8\x6d\x29\xa4\x4a\x03\x49\x81\x0a\xf8\xd0\xac\x9f\x51\x0e\xaf\x84\xae\x5f\x48\x2c\xe6\x75\x4a\xa8\x4f\xa1\x6d\x01\xd5\x1c\xac\xbd\xa5\x7a\x18\x9c\x83\xe6\x37\x93\x2b\xfe\x4b\x83\xfa\x63\x92\x32\x16\x45\x55\x08\x3c\xc1\x30\x1c\x7f\x18\xbc\x07\xd0\xba\xeb\x4f\x40\x0b\x95\x23\x7c\xbf\xa0\xcb\xa8\xfa\x21\x0c\x1e\x6c\x37\x49\x8e\x26\xb4\xa1\x4e\xa8\xbb\x62\x9f\x44\x33\xf9\x03\xee\x6e\xbe\xd6\x32\x97\x0a\xac\x1d\x80\x20\x40\x87\xab\x13\x37\x5a\x06\xf1\x5e\x87\xa9\x12\x1f\x90\xb6\x93\x66\x1d\x0a\x4f\x05\xdb\xfb\x60\x19\xdb\x80\xdc\x8e\xb1\x14\xf5\x58\xe4\x52\x09\x23\x4b\xc2\x41\x49\x51\xb9\x58\xd4\x68\x32\x28\xe4\x4a\x9a\x0c\x2a\xd2\xda\xe0\x1c\x04\x6f\x2e\xd6\x46\x8b\x99\xd9\x96\x10\x28\x0f\x2d\xa5\x4a\x62\x85\x5f\xbb\x72\x38\x07\xdf\x67\x73\x7e\x45\xed\xe0\xdc\xb7\x65\xfe\xd8\xf5\x41\xc7\xed\x4e\xce\xcf\x70\xe6\xe2\x1a\xeb\xa6\x30\x19\x98\x61\xd9\x28\x93\x01\x6a\x1d\x80\xcc\x0e\xed\x2f\x11\xbc\xb9\x44\x13\x34\x36\x2c\x95\xc1\xb5\x49\x74\x9a\xb9\xfe\x0e\xa4\x5c\x50\x87\x97\x42\xcd\x0b\xbc\xd0\xba\xd4\x09\x6a\x92\x67\x06\x77\x4e\x93\xee\x62\xd3\x68\x45\xff\x7a\x46\xe4\x02\xb6\x58\x7d\x8a\xe0\x8d\x17\xf8\xfc\xd5\xf4\xfa\x75\x72\x97\xc1\x59\x06\x4f\xc6\x5d\x16\x61\x99\x60\xe5\xa5\x14\x45\xd1\x58\xe4\x38\x00\xff\x47\x84\x66\xdb\xe3\xa9\xfc\xcb\x85\x3c\xdd\xfe\xfc\x4d\x69\x44\xe1\xa6\x1e\x74\xd3\xfb\xc0\xc4\x51\x52\xbb\x56\x81\x1e\x17\xb0\x6e\x34\x0b\x58\xd4\x78\x0c\xa1\xaf\xf1\xc9\x9d\x44\xa8\x24\xac\xbe\x63\xfc\x3f\x63\xba\x07\xf4\xae\xa4\x77\xb1\x7f\x15\xe4\x74\x41\x3f\xe4\x0d\x62\x07\xf8\x38\xde\x1d\xb8\xb6\xdf\x3c\x87\x1a\x85\xc1\xc7\xd8\xa7\xc6\xdb\xeb\xf7\x7f\xf4\xf9\xda\xf0\x66\x6a\x5a\xcb\x68\xb6\xef\x04\x6f\x9c\xb5\x84\x2e\x1d\x68\xea\xef\x7a\xf9\x21\xbb\x19\x69\x44\x6f\xc3\xce\xa1\x47\xf3\x17\xc1\x8e\x3a\xb6\x37\xce\xdb\x43\x7b\x18\xed\xa0\x64\xc2\xe5\xac\x9f\xff\x1e\x68\x27\x4e\x0c\x0f\x6e\x65\x25\xaa\xb7\xb5\xd1\x52\xe5\xef\x1c\xc0\x6d\x15\x7f\xf3\xb1\x42\x2a\x6d\xe3\xfd\xc8\xab\xba\x54\x34\x09\x45\xe3\x41\xd8\xac\x4d\xf7\xd5\x77\xc7\xdd\x9a\x5e\xa2\x98\xa3\x4e\x7e\x3c\x3b\xfb\x64\xf9\x1e\xab\x50\xf3\xfb\x78\x93\x52\x43\x42\x6f\x9c\x3b\xbd\xc4\xf0\x00\xa5\xde\xa3\x2f\xd1\x70\xe9\x33\x47\x6a\x27\x68\x6d\xaf\x98\x2e\xf1\x51\x0f\xb1\xd0\xb9\x7b\x1f\x57\xcd\x9a\xff\x4a\xa6\xae\xd3\xfb\xaf\x73\x47\xc8\xa8\x26\xb2\x46\x6a\xfb\x48\xdf\x0b\x3b\x0c\x57\x1d\x88\x0c\x7e\xa7\xa6\xe1\xb7\x08\x77\xca\x1b\x29\x93\xd0\x6d\x6f\x0f\x73\x6d\x6d\xfc\x2e\x83\x1f\xce\x32\xf8\xe9\xd9\x27\x54\x1f\xbf\xd1\x89\xb0\xbf\xfb\xbd\xed\xb0\xcf\x35\x0f\xe2\xf4\xa0\x84\x8f\xe3\x7a\xac\xb4\x8f\xfa\x8a\x65\x9b\xef\x5d\x27\xac\xbd\xef\x67\xaf\x3c\x6e\xaa\xf9\x23\xbd\xe6\xff\xae\x90\x7f\xde\x69\x7b\xd4\x17\x56\xf6\x85\x02\xfc\x52\x8f\x7d\xc0\xd9\xbe\x82\xfc\x9e\x63\x81\xdf\xe4\xf7\xf9\xf2\xeb\x91\x46\xa0\xf3\x5f\xf2\xa6\x1e\x49\xfc\x1d\x00\x00\xff\xff\xe8\x7f\x04\x59\x9f\x0e\x00\x00")

func templatesRest_hTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRest_hTmpl,
		"templates/rest_h.tmpl",
	)
}

func templatesRest_hTmpl() (*asset, error) {
	bytes, err := templatesRest_hTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/rest_h.tmpl", size: 3743, mode: os.FileMode(420), modTime: time.Unix(1621180385, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUsecasesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xc1\x6e\xdb\x38\x10\x3d\x8b\x5f\x31\xeb\x43\x20\x05\x8a\x76\x0f\xc1\x1e\xb2\xc8\x61\xe1\xa4\x46\x80\xa0\x35\xe2\xa4\x05\x5a\xf4\x40\xcb\xe3\x98\x89\x4c\xb9\xe4\xa8\x70\x21\xf0\xdf\x0b\x8a\x92\x1c\x3b\xb6\x64\x38\x4a\xda\x43\x4f\x06\xad\x21\xdf\xe3\xbc\xf7\x86\x0b\x1e\x3f\xf2\x7b\x84\x4c\x63\xcc\x35\x6a\xc6\xc4\x7c\x91\x2a\x02\x9f\x79\xbd\x38\x95\x84\x4b\xea\x31\xaf\x97\xe7\x10\x0d\x55\x74\xa7\x04\x18\xf3\x77\xb9\xba\x94\x24\x48\xa0\xbe\x10\x6a\xc8\x69\x16\xdd\x60\x02\xc6\xf4\x58\xc0\xd8\x34\x93\x31\xf8\x19\x1c\x8f\x28\x00\x5b\x7e\xf9\x9e\xcf\x31\xea\xf3\x79\x51\x73\x2d\x34\xf9\x31\x2d\xa1\x84\x88\xfa\xee\x37\xcf\x41\x4c\xc1\x1e\x1c\xd9\x92\x21\x57\x7a\x44\x60\x4c\xc8\xbc\x05\x57\x1a\x8e\xb1\x84\x8c\xb6\x9f\xe9\x36\xe4\x39\xa0\x9c\x80\x31\x01\xf8\x5f\xbe\xb6\xed\x19\x55\xa8\x7d\x5a\x9e\xda\x3f\xa2\x19\xd7\x43\x7e\x2f\x24\x27\x91\x4a\x38\x31\x26\x04\x21\xe9\xdf\xd3\xfa\xdc\x10\x50\xa9\x54\x05\x90\x33\xef\x3b\x57\x76\xe5\xfe\x61\xcc\xd3\xa8\xe1\xec\x1c\xb2\xea\x4a\x03\xa4\x11\x6a\x2d\x52\x69\x2f\x1c\x30\xe6\x89\x69\xb1\xc1\xd6\x94\x5f\x6e\xf0\x5b\x26\x14\xfe\x9f\xd1\xcc\xd7\xa8\x83\xff\x8a\x82\xbf\xce\x41\x8a\xc4\x62\x78\x0a\x29\x53\xd2\x2e\xf7\xe0\xfa\xcf\x3a\x4f\xe6\x19\x07\x1a\xd3\x32\xac\x91\x27\xe3\x8a\xe0\x27\x41\xb3\x5b\xc5\xa5\xe6\x31\x55\x2c\x3b\x27\xe0\x4d\x70\x8a\x0a\xac\x2d\xfc\x00\x72\x47\xe0\x26\x4d\x92\x31\x8f\x1f\x4b\x22\x9b\x24\xc0\xf8\x45\xbb\x08\xe7\x7a\x0f\x54\xea\xa7\x99\xa4\x75\x68\xa7\x44\xac\xb6\x48\x1f\x55\x1e\xdc\xe9\x39\xb0\x96\x5b\x79\xa9\x16\xae\x6b\x5d\xd6\x24\x99\xcf\x05\xed\xe8\xc7\x2b\xb8\xa2\x3c\xe1\xe0\x16\x4b\x91\x30\xc3\x98\xdb\xca\xe5\xc4\xb5\xf1\x6a\xf2\x4e\x60\x32\x01\x3f\x55\xe0\xcb\x94\xdc\xbf\x03\x2c\x7b\x1b\x38\x90\x01\x52\x24\x5c\xe5\x95\x7c\xf2\xd1\x98\xb6\xe9\x31\xc0\xad\xc3\x23\x64\x5e\x51\xbb\x62\x10\x15\xdb\xae\xab\x7d\xb0\xf9\xf9\xf6\xc7\x02\xdd\x98\x68\x1a\x12\x23\xfa\x85\x79\x7f\x8d\x08\x77\x91\xca\x27\xa9\xa9\xb5\xb3\x26\x29\x80\x74\x96\x50\x6b\xfe\x4a\x15\x43\x38\x6a\xe8\x7d\x7d\xb6\xbd\x41\x21\xef\x6e\xeb\x38\xb5\x3f\x28\x71\x2f\x24\x18\x73\x06\x47\xcd\x76\x08\x99\xe7\x59\x53\xab\x0c\x03\x7b\xa1\x13\xc0\x44\x5b\x3f\x1c\x70\x87\x16\xa4\x35\x90\x22\x3b\xcd\xd3\xa4\xf3\x01\xf1\x3c\xf3\xd5\x0d\x5d\x84\xeb\x4c\xb7\x3e\xdd\x7d\x85\x9c\x70\x47\xfe\xd2\xf1\x43\xe3\x1b\xdd\xbf\x2b\x0f\xad\xbc\x53\x8d\x0a\x63\xfc\x1d\xe1\xac\xb2\x67\x19\x3a\x79\x8a\x75\x4d\xf8\xad\x33\xb9\x95\xfc\x26\xf7\xcf\xa8\xd2\x8f\x3c\xc9\xdc\x05\x6a\xae\x1d\x47\xb9\x03\x2a\xdd\x4c\x80\x15\xfa\x7a\x6e\xd6\x34\x83\xf3\x95\x66\xbb\xf2\xb4\x32\x57\x08\xe9\xf8\xa1\xe9\xcd\xed\x4a\x87\x97\x86\xab\x13\x1e\x4d\x67\x55\x2d\xad\x77\xad\x3d\xba\x1b\xc5\x6d\xe9\xbd\x5b\x4c\x76\xa7\xf7\xb0\xd7\xb3\x50\x6a\x8f\xd4\x17\xe1\x7c\xeb\xb4\x76\x9c\xb8\x97\xa7\xa6\xc2\xdf\xee\xff\x95\x3c\xed\x4f\x4a\x4b\x3e\xba\xf4\xf8\xa6\x4f\x9f\xbd\x19\x07\x79\xf1\x02\x13\xec\xd8\x8b\x7f\x5c\xb6\x8f\xcb\x56\x8d\x6f\x73\xd9\xef\x62\xb0\x9f\x01\x00\x00\xff\xff\xa3\x41\x29\x24\xa7\x10\x00\x00")

func templatesUsecasesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUsecasesTmpl,
		"templates/usecases.tmpl",
	)
}

func templatesUsecasesTmpl() (*asset, error) {
	bytes, err := templatesUsecasesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/usecases.tmpl", size: 4263, mode: os.FileMode(420), modTime: time.Unix(1621178685, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/core.tmpl":       templatesCoreTmpl,
	"templates/db.tmpl":         templatesDbTmpl,
	"templates/interfaces.tmpl": templatesInterfacesTmpl,
	"templates/rest_h.tmpl":     templatesRest_hTmpl,
	"templates/usecases.tmpl":   templatesUsecasesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"core.tmpl":       &bintree{templatesCoreTmpl, map[string]*bintree{}},
		"db.tmpl":         &bintree{templatesDbTmpl, map[string]*bintree{}},
		"interfaces.tmpl": &bintree{templatesInterfacesTmpl, map[string]*bintree{}},
		"rest_h.tmpl":     &bintree{templatesRest_hTmpl, map[string]*bintree{}},
		"usecases.tmpl":   &bintree{templatesUsecasesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
