// Code generated for package assets by go-bindata DO NOT EDIT. (@generated)
// sources:
// templates/core.tmpl
// templates/db.tmpl
// templates/interfaces.tmpl
// templates/rest_h.tmpl
// templates/usecases.tmpl
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCoreTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x41\x8f\xda\x30\x10\x85\xcf\xf1\xaf\x98\x72\xa8\x12\x44\x13\x0e\xab\x1e\x56\xe2\x94\xa5\xd5\x4a\x15\x45\x45\xf4\x52\xf5\x60\x92\x61\xd7\xdb\x60\x23\x7b\xd2\xa5\x8a\xf2\xdf\x2b\x3b\x24\x81\x05\x92\x68\x4f\x28\x61\xfc\xe6\xcd\xf7\x26\xde\xf3\xe4\x0f\x7f\x42\x48\x94\x46\xc6\xc4\x6e\xaf\x34\x81\xcf\xbc\x51\xa2\x24\xe1\x81\x46\xcc\x1b\x15\x05\x84\x4b\x1d\xae\xb5\x80\xb2\x8c\x8e\x4f\x73\x49\x82\x04\x9a\x07\xa1\x97\x9c\x9e\xc3\x1f\x98\x41\x59\x5e\x96\x0b\x49\xa8\x25\xcf\xa2\x54\xed\xb8\x90\x11\x6a\x6d\x46\x2c\x60\x8c\xfe\xed\x11\x6c\xed\x7c\xc1\x77\x18\xc6\x7c\xe7\x14\xc0\x90\xce\x13\x82\x82\x79\x1a\xc6\x2b\x62\x25\x63\xdb\x5c\x26\xb0\xc0\xd7\xcb\x6a\xdf\xd5\x04\x30\xbe\x22\x64\x15\x90\x72\x2d\xe1\xe3\xe5\xbf\x85\xbe\x07\x5d\x36\xe2\x7e\x72\x4d\x22\x80\x9f\x3c\x13\x29\x27\x8c\xd7\x7e\x42\x07\x38\x42\x09\xe3\xea\x77\x02\x6a\xf3\x02\x63\x3c\xa2\x08\x2f\x15\xe2\xf5\x8a\x26\x20\x52\x10\x92\x3e\xdf\x05\x80\x5a\x2b\x6d\x9d\x45\x11\x6c\x95\x8e\x35\x72\x42\xb8\x9f\xd9\x92\xd9\x0c\xa6\xac\xf1\x2c\x45\xd6\xeb\xee\x9b\x30\x74\xcd\x57\x51\x80\xd8\x82\x8d\x28\xb4\x25\x4b\xae\xcd\x8a\xa0\x2c\x27\xb0\xe7\xda\x74\x1a\x6e\xeb\x8b\x02\x50\xa6\xae\x8f\xff\xeb\x77\xdf\x99\x55\xdd\x34\xa6\xc3\x9d\x7d\x11\x3e\x73\xb3\xe4\x4f\x42\x72\x12\x4a\xc2\x27\xdb\xdd\x41\x68\x74\x27\x15\x8d\xc0\xe2\x10\x84\x3b\x33\x40\x81\x62\x95\x4b\x3a\x97\xb0\xf8\x92\x50\x87\xe9\xe6\x86\x37\x8b\xa8\x1b\x49\x3b\x2b\xf3\xc4\xd6\x89\x7e\x98\xd9\x08\xac\xb7\x93\x44\x06\x38\x9c\x9e\x9b\x63\x5e\xd9\x66\xfa\xee\x29\x87\x2c\xc3\x57\xbc\xba\x0b\xed\xf6\x39\x3f\x8b\x39\x6c\x94\xca\x02\xf0\xbb\x12\xb5\x4b\xdb\x86\xa3\xd1\xe4\x19\xf5\xb3\x3e\x3a\xb0\x1d\x7b\x38\x36\x68\x6c\x55\x25\x6f\xd7\xbf\x2e\xac\x8e\x2e\xe6\xee\xe1\xed\x31\x13\x7e\xdf\xbc\x60\x42\x0b\x45\x5f\x54\x2e\x53\xe6\x59\x9d\xb3\x2a\x8b\xeb\x94\x7b\x3d\xc0\x10\x8c\x8f\xe9\xfc\x20\x0c\x99\x6e\x96\x01\xf8\x16\xe3\x39\x25\xd7\xeb\x26\x9d\x53\xe1\x0a\x51\x9f\x95\xea\x76\x78\xff\xc5\x13\x80\xdf\x06\x7f\x74\xd9\x64\x78\x7e\xb3\x39\xc1\x09\x4c\xbb\x72\x9b\x9e\x2c\x74\x14\x41\xe2\xdc\x31\x4f\xe2\xeb\x63\xda\xbf\x1c\xed\x30\xae\xd7\xd0\x46\x75\xac\x55\x93\x21\x01\xae\xf7\xe9\x4d\x6a\xed\xa7\x30\x8c\x5f\x73\x5d\xff\xe5\xda\x99\x75\x2f\x58\x85\xf1\x26\xc5\xee\xf5\x6f\x46\xab\x35\x6e\x00\x6b\xe7\xb0\x8a\xbd\xd0\x2e\x88\x0d\x40\xf5\x80\x19\xf6\xa1\x3a\x81\xd0\xb7\xe1\xad\x5c\xbd\xdf\xff\x03\x00\x00\xff\xff\x40\xef\x23\x91\x5e\x08\x00\x00")

func templatesCoreTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesCoreTmpl,
		"templates/core.tmpl",
	)
}

func templatesCoreTmpl() (*asset, error) {
	bytes, err := templatesCoreTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/core.tmpl", size: 2142, mode: os.FileMode(420), modTime: time.Unix(1621086548, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesDbTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\xdd\x6f\xdb\x38\x12\x7f\x96\xfe\x8a\x39\x23\x08\xe4\xd8\x55\x9c\xbb\xe2\x1e\x7a\x70\x81\x9e\x9b\x14\x59\x74\xdb\x6c\xdd\x60\x1f\x8a\xa2\xa2\x25\xda\x61\x22\x53\x0e\x49\x27\x0e\x5c\xfd\xef\x8b\x21\x29\x9b\xb2\x3e\xec\x76\x3f\x5a\x3f\x24\xf6\x70\x38\x9c\x8f\xdf\x0c\x67\xb8\x20\xf1\x1d\x99\x51\x58\xcc\x7c\x9f\xcd\x17\x99\x50\x10\xf8\x00\x00\x9d\x38\xe3\x8a\xae\x54\xc7\xfc\x4a\x88\x22\x13\x22\xe9\xa9\xbc\x4f\x2d\x69\xc6\xd4\xcd\x72\x12\xc6\xd9\xfc\xf4\x96\xc4\x77\xf1\xe9\x62\xb6\x3a\x7d\x78\xde\xbc\xaa\x9e\x16\xd4\xae\xae\xd7\x10\x5e\x89\xf0\x5a\x30\xc8\xf3\x53\xfb\xeb\x9c\x2b\xa6\x18\x95\xaf\x99\xb8\x22\xea\x26\xfc\x40\x53\xc8\xf3\x8e\xdf\xf5\xfd\xe9\x92\xc7\x10\x24\x70\x32\x56\x5d\x40\xf6\xf3\x77\x64\x4e\xc3\x11\x99\x6b\x9e\x37\x54\x05\xb1\x5a\x81\xd5\x39\x1c\x99\xff\x7d\x60\x09\x30\xae\xfe\xfb\xbc\x0b\xc1\x09\xb5\xe2\xc3\xea\xfe\xb1\xea\x03\x15\x22\x13\x5d\x58\x6b\x05\x05\x95\xcb\x54\xc1\x8b\x21\x1c\xb7\x6e\x5b\xe7\xbe\xe6\xa7\x42\x20\x73\x12\xbe\x9e\xfc\xb6\xa4\xe2\xe9\x43\xf6\x88\x0a\xf5\x21\xd2\xcb\xf8\x91\x34\xa5\xb1\x42\xe5\x05\xe1\x33\x0a\x47\xac\x0f\x47\x53\x46\xd3\x04\x77\x86\x23\xb5\x7a\xfe\x86\xaa\x50\xc6\x84\x93\x49\x4a\x2f\x70\x45\xc2\xb3\x3c\xdf\x48\x58\xaf\x81\x4d\x61\xa6\xe0\x88\xc1\x00\x9c\x05\xfd\xe9\xe3\x3a\xe5\x09\xe4\xb9\x42\x5d\x8d\xec\xf0\x17\x99\x71\x54\x1a\x4a\x82\x9e\x59\xce\x0d\x69\x2a\xb2\xb9\x76\xec\x47\xcb\x0c\x6a\xb3\xf6\x78\x43\x05\x05\x15\xb2\x04\x86\x70\x74\xa6\xe9\x11\xfa\xb6\x1b\x8e\x63\xc2\x0d\x5e\x50\xa6\x35\x6c\xaf\x51\xce\xb9\xc7\xc6\xd3\x8e\xc2\xda\xc3\xef\x05\x9b\x31\x0e\x79\xde\xf7\x6b\x14\xee\xea\xbf\x6c\xaa\xdd\xfe\xaf\x21\x70\x96\xda\xb8\x39\xf4\xe1\x10\x16\xb3\x55\x78\x2e\xc4\xbb\xec\x43\xf6\x28\x1d\x0e\x13\x61\xb5\x14\x1c\xb7\xf6\xf1\xcf\x66\x6d\xab\x9a\xcb\x91\x84\x37\x84\x27\x29\x3d\x47\x90\x98\xc8\x52\x21\x8c\x1e\x16\x02\x96\xdd\xd8\x63\x64\xe6\x7b\x81\xfb\x96\xc9\x5a\xe4\x9a\x50\x63\x46\x84\xc8\x72\x45\x84\x1c\x2b\x04\x43\x1f\x16\x44\x48\x68\x03\xf3\x76\xc3\x06\x10\x5d\x08\x3e\x7d\xde\xb7\x67\x5c\x9c\x8a\x51\x43\x42\x78\x43\xe4\x15\x99\x31\x4e\x14\xcb\xb8\x39\x5d\x67\xd3\x46\xee\x4e\xd6\x3c\x10\xa1\x5d\xaf\x89\xc6\x2b\xf7\x17\x08\xac\x17\x43\x88\xea\x20\x66\xb2\xe3\xfe\x77\x0d\x30\xcd\x64\xb0\x76\x36\x3c\xb3\x4b\xef\xa7\x53\x49\x75\x22\x46\x96\xf2\x96\xcd\x59\x41\xd0\x14\x22\x66\x12\x7f\xcf\xc9\xe2\x93\x54\x82\xf1\xd9\x67\xc6\x15\x15\x53\x12\xd3\x75\x5e\x64\x68\xa3\x47\x37\xf1\x3e\x3d\x85\x29\x4b\x15\x15\xa5\x3c\xa9\xc5\xb4\xf6\x0e\x06\xa2\x0a\xe8\x62\x1f\x9b\x16\x80\xbe\x94\x1f\x9f\x16\xf4\x2a\xd3\x4a\x55\xd2\x76\xcb\xbe\x91\xf7\x4a\xca\x2c\xd6\x3e\x3a\x42\x7d\x8b\xc3\x6b\x76\x3a\xbb\x35\xcf\x78\x69\xca\xcf\x45\x26\x2e\x79\xb1\xcf\xcd\xab\x31\x27\x77\xb4\x49\x92\x4d\x1e\xd4\xa3\x31\x1f\xab\xe9\x56\xf7\xb1\x11\xed\x61\x44\x09\x4f\x40\xe7\xf7\x7e\xfb\x80\x71\x8c\xd3\xb7\x99\x12\xb5\x6a\x82\xe0\xf8\xd4\xd9\xb1\xa6\xd8\xda\xf9\x0c\x43\x38\x69\xb5\xb7\x51\x78\x73\x30\x68\x2a\x7f\x62\x17\x0f\xd1\xc3\x9d\xa3\x75\x07\xf2\xfc\xa0\x1d\xc8\x9e\x77\x7e\x4a\x47\xf3\xda\xa4\x68\x58\xaa\x21\x3b\xa4\x9d\x4b\xb6\xa5\x06\x96\x84\x62\xc5\x53\xa3\x6c\xc9\x95\xa9\x8c\x7e\x69\xb5\x88\xb4\x29\x59\x2f\x61\x50\x91\x9e\xf1\xf4\x49\x6f\xd7\x31\xd0\xee\x7f\x96\xe7\xf0\xf5\xeb\x06\x22\xad\xbc\x18\x9d\xc2\x84\x1a\xbc\xe8\x6b\xb0\xd4\x94\xfc\x6a\xbb\x12\xdb\x8c\xc4\x28\x2e\x38\xe9\x46\x3d\x5d\xa7\x7b\x06\x54\x7d\x1d\x4c\x7b\xb9\x1f\x1b\xf3\xba\x15\xe1\x4d\xd7\xaf\xfb\x71\xaf\xd0\x41\xfb\x2d\x5a\x0e\x79\x4d\x50\x0f\x71\x5c\xad\x12\x4e\xbe\xed\x71\x66\x4b\xca\xb9\x96\x18\x8f\x94\xdb\x86\xb2\xfa\x55\xed\xab\x40\x2b\x5b\xc6\x69\xa3\x72\xda\xbf\x7f\xc2\xb8\xdd\xf2\xf2\x23\x8c\x2c\xee\x71\xac\x56\x99\xf9\x1a\x41\x0f\xa4\x12\x71\xc6\x1f\xc2\x8b\x4c\xcc\x89\xba\xe4\x2a\xd0\xc6\x18\xe6\x3e\x9c\x0d\xaa\xd8\xb0\xf7\x3f\x0a\x4a\xf5\xb7\x16\x39\x9a\xb5\x2a\xa6\xb1\x11\xde\xb5\xe0\x7e\x6c\xd2\x04\x9b\x8d\x6f\xe9\xe3\x75\x10\x7e\x40\x23\x1f\xb9\xad\x4e\x4a\xb9\xa3\xcd\xb4\xd2\xa8\xdc\xbf\x17\x09\x15\xff\x7f\x32\x7d\x57\x86\x3f\x60\xf2\x64\xee\x91\x80\xf1\x84\xae\xaa\xdb\x07\x5d\x57\x8d\x68\xeb\xb4\x9d\x2b\xaf\x24\x3b\xaa\xf5\xad\xc8\x1e\x65\xbf\x32\x37\xd9\xfa\x64\x1d\x5f\xaa\x4a\xbd\x42\x68\xcf\x82\xa9\x77\x6f\xe3\xab\xab\x55\xeb\x48\xb0\x05\xf6\x01\x2d\xee\xc0\x69\x6f\xdb\xfb\x7e\xfc\x9b\xd0\x29\x15\xda\x9a\x70\x94\x66\x92\x06\xdd\x62\x1c\x88\x6d\x57\x7a\x47\x0f\x6a\xbe\xfb\x30\xb0\x5b\xa7\x99\x15\xf8\x8e\xae\x54\xd0\x2d\xd9\x11\xef\x9b\x49\x6d\x27\xef\xe4\xa0\xb9\x05\xb4\xc0\xed\xb8\x06\x7b\xdb\xdb\xe6\x99\x0d\xcc\xdc\x16\xef\x19\xda\x6a\x00\x0a\x9b\xe1\xad\x2d\x5a\x7f\x5b\xc4\xa0\x7c\xb7\xe8\x10\x0d\x81\x2c\x16\x94\x27\x01\xfe\xea\x23\xcd\x8d\x6e\x31\x4b\x1a\xf7\x9d\x0b\x11\x74\xff\xf7\x8f\x42\xac\x3c\x5a\xc6\xf2\x00\xe1\xa6\x72\x3b\x27\x1c\x36\x8a\x5e\x26\xe7\x2b\x26\x95\xdc\xfb\x90\x32\xc9\xb2\xd4\x19\xfc\x3c\xec\x81\x62\xae\x60\xc9\xb8\xfa\xcf\xbf\x7d\xdf\x6b\x79\x0c\xf1\xbc\x9d\xce\xc3\xf7\xbc\xca\x5c\xe8\x7b\x9e\x19\x03\x8b\x07\x07\xcf\x7d\x6d\x38\x8e\xb1\x1b\xf1\x76\xc1\xe3\x79\xd6\x4b\x53\x92\x4a\xda\xec\x56\x2f\xf7\xfd\x82\x15\xb5\x7e\x89\x8d\xc9\x61\x1e\x1a\x09\x4a\x14\xad\xf7\x4f\x36\xb9\x6d\x1d\xca\x47\xd7\x28\x33\xd0\x3e\x74\x9d\x87\xb5\xcb\x29\x83\xb5\x4f\x5b\xa3\xeb\x57\x62\x26\x83\x6c\x72\xdb\x66\xf7\x40\x8b\x31\xf6\x61\x48\x6c\xc9\x36\x13\xb1\x21\x3d\x90\x74\x49\x37\x24\xdf\xc3\x42\x73\x87\x07\x9b\x2a\xa0\x07\x69\x94\x58\x8c\x93\x12\x8f\x89\x22\x4d\xf3\x2c\x05\x07\x8e\x3e\x06\xd2\xb3\xd2\x36\x04\x8c\xdb\x96\xe9\xce\x2f\x71\x1c\xad\xf1\x9e\xbe\x83\x1e\x44\x79\xb4\x55\x92\xd3\xc7\xcb\xa4\x68\x9d\xbd\xe6\x7e\x15\x95\xe2\x92\x0a\xdd\x66\x67\x25\xb4\x04\x51\xcf\x9c\xda\x8b\xba\xdb\x33\x83\xa8\x67\xbe\x19\xaa\xf1\x11\xe3\x33\x60\x89\x86\x93\xdb\xe1\x6a\x25\xf6\xb8\xf6\x10\x38\x69\x39\x87\x82\xe9\x7a\x91\x34\x82\xa9\x48\xb6\x43\x61\xa5\xe1\xf4\xd7\xa2\x69\x03\x25\xd3\x49\x04\xda\x5f\x66\x84\xd1\x4e\xde\xc5\x17\xc6\xbe\x01\x4d\xf5\x70\xaa\xe2\x29\x2f\xa3\x4c\x63\x65\xb8\x83\x1b\xad\x92\x67\x66\x4d\x96\xe8\xb1\x92\x25\x48\xfa\xd2\x77\xa6\x9d\xf3\x15\x8d\x1d\xe4\x78\x4b\xed\xeb\xdd\x1a\xe3\xe9\x2e\x74\x03\x1e\xa4\xb8\x65\x67\xcd\x12\xe4\x2a\xb0\x62\xd2\x62\xc7\x59\x85\xb7\x1a\xd1\x81\x46\xb9\x08\x39\x08\x1a\xa5\x20\x1d\x52\x55\xea\x5f\xbe\xdc\x32\xb3\x7d\xcf\xd6\xfd\x48\xfd\x86\xae\xdf\xfe\x92\x3b\x5a\xa2\x52\x35\xad\xe4\x9e\xf7\xae\xdd\x99\x38\x9b\xdc\x7e\xc7\xe3\x87\x31\xc1\x7d\x62\x70\x5a\x51\xf3\xc0\xd0\x26\xf8\xdb\x27\x00\xef\xbb\x5e\x74\x5f\xd3\x94\xee\xcb\x6b\x27\x63\xbf\x94\x7a\x60\x04\xae\xc5\x6d\xa2\xe5\xd4\x3c\x9a\x96\xae\x46\x73\x31\xb6\xe4\xf1\x41\x75\x4b\x1b\xf6\x47\x00\x00\x00\xff\xff\x80\x8e\x95\xfd\x0a\x1a\x00\x00")

func templatesDbTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesDbTmpl,
		"templates/db.tmpl",
	)
}

func templatesDbTmpl() (*asset, error) {
	bytes, err := templatesDbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/db.tmpl", size: 6666, mode: os.FileMode(420), modTime: time.Unix(1621086164, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesInterfacesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\xc1\x4a\xc4\x30\x10\x06\xe0\xbb\x4f\xf1\x1f\x5b\xa9\xd9\xcb\xe2\x0b\xc4\x22\x82\xc8\x42\xd8\x93\x78\xc8\x6e\x47\x1d\xed\x26\x4b\x32\x87\x42\xc8\xbb\x4b\x2b\x75\x0f\xd6\xd4\x53\x60\x98\xf9\xbf\xcc\x6c\x36\x48\x09\xaa\x7d\xb2\x27\x52\xc6\xd9\x4f\x42\xce\x57\x97\x92\xb6\x27\xea\x91\xf3\x3d\x49\x75\x94\x01\x47\xef\x84\x06\x51\xfa\xfb\x6d\xc0\x1d\xd8\xc9\xed\xb6\x46\x75\x4d\x4e\x58\x98\xa2\xfa\x3d\x6f\xa4\x01\x85\xe0\x43\xbd\x10\xfe\xc8\x71\x31\x3d\x25\xf0\x2b\x54\xeb\x44\x8d\x2d\x3b\x1b\xa2\x11\xe4\xdc\xe0\x6c\x43\x44\xc9\xbb\xf4\xa7\x04\x72\x1d\x72\xae\x51\x3d\xbf\xac\xcd\x98\x19\xd5\x32\x6c\xc7\x82\x7a\xb7\x71\x67\xdf\xd8\x59\x61\xef\x70\x33\xea\xd3\xc2\x3f\xb9\x85\xc5\x1e\xba\x76\xe0\x28\x71\xf5\x74\x07\xef\xfb\x42\x8e\x0e\x64\x85\x96\x53\xfc\xe1\xa3\x78\x09\xbd\x37\x52\xa3\x9a\xa4\x02\xb1\x3f\x77\x7f\x12\xf3\x47\xff\x8b\x4d\xc8\x82\x71\x47\x3d\xad\x19\xf3\xf4\x57\x00\x00\x00\xff\xff\xe3\x1a\xed\x04\x99\x02\x00\x00")

func templatesInterfacesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesInterfacesTmpl,
		"templates/interfaces.tmpl",
	)
}

func templatesInterfacesTmpl() (*asset, error) {
	bytes, err := templatesInterfacesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/interfaces.tmpl", size: 665, mode: os.FileMode(420), modTime: time.Unix(1621088301, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesRest_hTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\x51\x6f\xdb\x36\x10\xc7\x9f\xc5\x4f\x71\x33\x86\x42\x2a\x54\xda\x1b\x82\x3e\x18\xc8\x5e\xdc\xac\xed\x10\x34\x9e\xbd\x6c\x0f\x45\x31\xb0\xd6\x59\xe6\x2a\x53\xca\xe9\x34\x7b\x13\xf4\xdd\x87\x23\xa5\xc4\x28\x92\x38\x19\x52\xc4\x4f\x16\x79\x77\xfc\xdd\xff\xfe\x20\x2b\xb3\xfa\x62\x72\x04\xc2\x9a\x95\xb2\xdb\xaa\x24\x86\x58\x45\x23\x87\x3c\xde\x30\x57\x23\x15\x8d\x6a\xa6\x55\xe9\xfe\x1e\x29\x15\x8d\x72\xcb\x9b\xe6\xb3\x5e\x95\xdb\x71\x5e\x92\x2d\x0a\x33\xde\x36\x7b\x89\x6a\x5b\xd0\x73\xd2\x97\x64\xa1\xeb\xc6\xfd\xd7\x99\x63\xcb\x16\xeb\x37\x96\xe6\x86\x37\x7a\x81\x05\x74\xdd\x48\x25\x4a\xad\x1b\xb7\x82\xd8\xc0\xcb\x25\x27\xb0\x91\xf8\xb3\x0f\x66\x8b\x7a\x66\xb6\x3e\xe8\xdc\xd6\x1c\xef\x40\x20\xf4\x02\xeb\xaa\x74\x35\xfe\x41\x96\x91\x52\x20\x78\xd9\xaf\x5f\x35\x58\x73\x02\xad\x8a\xda\xf6\x15\xd8\x35\xc8\x91\x5a\x72\xe7\x86\xea\x25\x43\xd7\xa9\x28\x6a\x5b\xd9\x72\x25\x43\x5c\xa0\x03\x3d\xe3\xfd\x89\xc4\xe8\xca\x50\xfd\xb3\xc5\x22\xab\x13\xa1\x1e\x43\xdb\x02\xba\x0c\xba\xee\x4a\xf2\x61\x7a\x0a\xa4\x2f\x17\xe7\xfa\xd7\x06\xe9\x9f\x38\x51\x2a\x8a\xaa\x7e\xe3\x05\xf6\xcd\xe9\xdb\xe1\x03\x40\xeb\x8f\x7f\x05\x64\x5c\x8e\xf0\xfd\x5a\x0e\x93\xec\xdb\x18\x02\xec\xd0\x49\x8e\xdc\x97\x91\x4a\x48\x43\x72\x08\x92\x9e\xc2\x82\xf6\x27\x5f\x90\xcd\xad\x83\xae\x9b\x82\x11\xa0\xbb\xb3\x63\xdf\x5a\x0a\xa3\xaf\x2a\x2c\x9d\xf9\x82\x32\x9d\x24\x1d\x28\x82\x14\xea\xab\x8f\x4e\xa9\x6b\xc8\x9b\x36\x36\xa6\x9e\x9b\xdc\x3a\xc3\xb6\x14\x0e\x09\x8a\xca\xf5\xba\x46\x4e\xa1\xb0\x5b\xcb\x29\x54\xe2\xb5\xe9\x29\x18\xdd\x9c\xed\x99\xcc\x8a\x6f\x52\x04\x2a\xa0\x25\x92\x29\xaa\xe8\x0b\x9f\x0e\xa7\x10\xea\x5c\xaf\x9f\x4b\x39\x38\x0d\x65\x55\x58\xf6\x75\xd0\x6b\x7b\x10\xf3\x13\x4c\xfc\x3e\x61\xdd\x14\x9c\x02\xcf\xca\xc6\x71\x0a\x48\xd4\x83\xac\xee\x9a\x5f\x6c\x74\xf3\x16\xb9\xf7\xd8\xac\x74\x8c\x7b\x8e\x29\x49\x7d\x7d\x0f\x69\xd7\x52\xe1\x9d\x71\x59\x81\x67\x44\x25\xc5\x48\x62\xcf\x14\x76\xde\x93\xfe\x60\x6e\xc8\xc9\xdf\xa0\x88\x5d\xc3\x0d\x6b\x08\x31\xba\x09\x06\xcf\x7e\x59\x5e\x7c\x88\x77\x29\x4c\x52\x78\x31\x1f\xa2\x84\x65\x81\x55\xb0\x52\x14\x45\x73\x93\xe3\x14\xc2\x4f\x04\x4d\x6f\x96\x97\xf6\x5f\xbf\x15\xe4\x0e\xeb\xbf\x95\x6c\x0a\xdf\xf5\x74\xe8\x3e\x6c\x2c\xbc\x24\xb5\x2f\xd5\xcb\xe3\x37\x3a\xdf\x5a\x07\x58\xd4\x78\x1f\x61\xc8\x09\xc1\x83\x45\x24\xa5\x1f\xfd\xa0\xf8\xb3\x29\x7d\x04\xfa\xd0\xd2\x87\xec\x4f\x42\x2e\x07\x1c\x47\xbe\x26\xf6\xc0\xf7\xf3\x1e\xe0\x76\xc7\x2f\xcf\x19\xa1\x61\x7c\xcc\xf5\x49\x78\x75\xf1\xf9\xaf\x63\xf7\xda\xec\x72\xc9\x6d\xa7\xa4\xb7\xef\x8c\x6e\xfc\xd5\xd2\x57\x19\xa0\xa5\xbe\xaf\x15\x9a\x1c\x7a\x94\x16\x1d\xee\xde\x67\x47\x75\xed\xd9\xef\xf4\x44\x5f\x5d\x1d\x17\xf8\xf0\xec\x5b\xd5\xdd\x9a\xea\x63\xcd\x64\x5d\xfe\xc9\x3a\x7e\x7d\xd2\x8e\x6c\x36\x9a\x82\xe7\xec\x92\x87\x08\xfd\x16\x1f\xf5\x48\x19\xca\xfd\xdb\xb1\x6d\xf6\xfa\x77\xb9\xf0\x48\xfa\xc8\x52\xf8\x53\x56\xfb\x87\x56\x7b\x59\xdf\x3b\x8e\x25\xfc\xa3\x30\x7d\x4a\xe1\x87\x49\x0a\xaf\x4f\xe4\x05\x7a\xa0\x3f\x05\xed\x4e\x11\x6d\xf6\x24\x02\x0e\xf6\x7c\x80\x52\x97\x55\xf6\x48\x4b\x3e\x91\x58\xdf\xde\xd7\x47\x06\xd1\x77\x7e\xcf\x2c\xfe\xaf\xa9\x77\xda\xeb\xf7\x0e\x4d\x86\x14\xff\x38\x99\x3c\x68\x12\x6f\xb0\xc0\x67\x98\xc4\x11\x95\x7a\xaa\x27\x74\xec\xad\xea\xfc\x17\x00\x00\xff\xff\xe8\xc6\xf6\x98\xf2\x0a\x00\x00")

func templatesRest_hTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesRest_hTmpl,
		"templates/rest_h.tmpl",
	)
}

func templatesRest_hTmpl() (*asset, error) {
	bytes, err := templatesRest_hTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/rest_h.tmpl", size: 2802, mode: os.FileMode(420), modTime: time.Unix(1621085558, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesUsecasesTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x4f\x8f\xd3\x30\x10\xc5\xcf\xf1\xa7\x18\x7a\x4a\x56\x21\xf4\xb0\xe2\x00\xda\x03\xca\xae\x56\x48\x08\x55\x2d\x15\x07\xc4\xc1\x4d\xa6\x5b\xef\x26\x4e\xb1\xc7\x50\x29\xf2\x77\x47\xce\x9f\x56\xa5\x7f\x12\x41\x96\x5e\xf6\x54\x39\xb5\xe7\x3d\xcf\xfb\x4d\xb2\xe6\xc9\x13\x7f\x40\x30\x1a\x13\xae\x51\x33\x26\xf2\x75\xa1\x08\x7c\xe6\x8d\x92\x42\x12\x6e\x68\xc4\xbc\x51\x59\x42\x34\x51\xd1\x5c\x09\xb0\xf6\x4d\xb3\xba\x93\x24\x48\xa0\xbe\x15\x6a\xc2\x69\x15\x4d\x31\x03\x6b\x47\x2c\x60\x6c\x69\x64\x02\xbe\x81\xab\x19\x05\xe0\xb6\xdf\x7d\xe6\x39\x46\x31\xcf\xab\x3d\x9f\x84\x26\x3f\xa1\x0d\x34\x12\x51\x5c\xff\x96\x25\x88\x25\xb8\xc2\x91\xdb\x32\xe1\x4a\xcf\x08\xac\x0d\x99\xb7\xe6\x4a\xc3\x15\x36\x92\xd1\xf1\x9a\xf5\x81\xb2\x04\x94\x29\x58\x1b\x80\xff\xed\x7b\xd7\x99\x59\xab\x1a\xd3\xe6\xda\x3d\x88\x56\x5c\x4f\xf8\x83\x90\x9c\x44\x21\xe1\xb5\xb5\x21\x08\x49\x6f\xaf\xb7\x75\x43\x40\xa5\x0a\x15\x40\xc9\xbc\x9f\x5c\xb9\x55\xfd\x84\x31\x4f\xa3\x86\x77\x37\x60\xda\x2b\xdd\x23\xcd\x50\x6b\x51\x48\x77\xe1\x80\x31\x4f\x2c\xab\x03\x6e\x4f\xf3\xcf\x14\x7f\x18\xa1\xf0\x83\xa1\x95\xaf\x51\x07\xef\xab\x0d\xaf\x6e\x40\x8a\xcc\x69\x78\x0a\xc9\x28\xe9\x96\x3d\xbc\x8e\xf7\x7d\x32\xcf\xd6\xa2\x09\x6d\xc2\xad\x72\xba\x68\x0d\x7e\x15\xb4\xfa\xa2\xb8\xd4\x3c\xa1\xd6\xe5\xe0\x06\xbc\x14\x97\xa8\xc0\x61\xe1\x07\x50\xd6\x06\xa6\x45\x96\x2d\x78\xf2\xd4\x18\xf9\xd3\x04\x58\xbf\x6a\x17\x61\xae\x7b\xa8\x52\x5c\x18\x49\xfb\xd2\x75\x12\x89\x3a\x12\x7d\xd4\x32\x78\x92\x39\x70\xc8\xed\x58\xda\x06\x37\x74\x2e\x7b\x91\xe4\xb9\xa0\x13\xfd\x78\x06\x2a\x9a\x0a\x7f\xdd\x62\x29\x32\x66\x3b\xa7\xfd\x1e\x8f\x0e\x7b\xc8\x3c\x91\xd6\x93\x15\x80\x7f\x6e\x4c\x67\x74\xc1\x89\x7b\x8e\x21\x1a\x62\x2e\x14\x6a\x93\x51\x27\xe6\x4d\xf3\x43\x10\x69\x08\xa4\x0c\x76\x80\x3c\x38\x9b\x87\xb8\xb5\xce\xfb\xd1\x13\x2b\xe4\x84\x27\x00\x2a\x16\x8f\x67\x3f\x0a\xf1\xdc\x15\xf5\x2b\xc8\x2e\xc5\xd0\x78\x70\x82\xc6\x43\xf0\x23\xf1\xd7\xc7\xb4\x13\x9f\x5d\xf7\x43\x28\x16\x8f\xe7\xe0\x19\x0f\x8b\xce\xf8\x10\x9c\xc6\x72\x3f\x6e\xe6\xeb\xf4\x34\x37\xed\x8b\xa7\xba\x54\x0f\x82\x2a\x4e\xfe\x37\x38\x03\x53\xf3\xef\xc8\xb4\xfa\xc7\x51\xd9\x35\xbc\x7e\xd9\x74\xe0\x32\x24\x2b\x07\xa0\xf4\x22\xe4\x16\x33\xec\x24\xe4\x25\xfb\x3e\xd9\xef\x5a\xe9\xb2\xbf\x6c\xec\xbf\x03\x00\x00\xff\xff\x10\x58\x5c\x8d\xd4\x0c\x00\x00")

func templatesUsecasesTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesUsecasesTmpl,
		"templates/usecases.tmpl",
	)
}

func templatesUsecasesTmpl() (*asset, error) {
	bytes, err := templatesUsecasesTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/usecases.tmpl", size: 3284, mode: os.FileMode(420), modTime: time.Unix(1621088363, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/core.tmpl":       templatesCoreTmpl,
	"templates/db.tmpl":         templatesDbTmpl,
	"templates/interfaces.tmpl": templatesInterfacesTmpl,
	"templates/rest_h.tmpl":     templatesRest_hTmpl,
	"templates/usecases.tmpl":   templatesUsecasesTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"core.tmpl":       &bintree{templatesCoreTmpl, map[string]*bintree{}},
		"db.tmpl":         &bintree{templatesDbTmpl, map[string]*bintree{}},
		"interfaces.tmpl": &bintree{templatesInterfacesTmpl, map[string]*bintree{}},
		"rest_h.tmpl":     &bintree{templatesRest_hTmpl, map[string]*bintree{}},
		"usecases.tmpl":   &bintree{templatesUsecasesTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
