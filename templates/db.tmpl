package pg

import (
    "context"
    "database/sql"
    "github.com/jackc/pgtype"
{{- if .Pr.EntitiesDirPath }}
    "{{ .Pr.Uri }}/{{ .Pr.EntitiesDirPath.Abs }}"
{{- end }}
)

{{ if and .Ctx4Get.scanableFields (len .Ctx4Get.scanableFields) -}}
func (d *St) {{ .EName.Camel }}Get(ctx context.Context, id int64) (*entities.{{ .EName.Camel }}St, error) {
    con := d.getCon(ctx)

    result := &entities.{{ .EName.Camel }}St{}
{{ with (fieldsPgTypeFilter .Ctx4Get.scanableFields) }}
    {{- range $i, $field := . }}
    pgArr{{ $field.Name }} := {{ fieldPgType $field }}{}
    {{- end }}
{{ end }}
    err := con.QueryRowxContext(ctx, `
        select {{ range $i, $field := .Ctx4Get.scanableFields -}}
        {{ if gt $i 0 }}
             , {{ end }}t.{{ $field.JsonName }}
        {{- end }}
        from {{ .EName.Snake }} t
        where t.id = $1
    `, id).Scan(
    {{- range $field := .Ctx4Get.scanableFields }}
    {{- if fieldPgType $field }}
        &pgArr{{ $field.Name }},
    {{- else }}
        &result.{{ $field.Name }},
    {{- end }}
    {{- end }}
    )
    if err != nil {
        if err == sql.ErrNoRows {
            return nil, nil
        }
        return nil, d.handleError(err)
    }
{{ with (fieldsPgTypeFilter .Ctx4Get.scanableFields) }}
    {{- range $i, $field := . }}
    if err = pgArr{{ $field.Name }} .AssignTo(&result.{{ $field.Name }}); err != nil {
        return nil, d.handleError(err)
    }
    {{- end }}
{{ end }}
    return result, nil
}
{{- end }}
