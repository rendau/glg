package pg

import (
    "context"
    "database/sql"
    "github.com/jackc/pgtype"
    {{- if .Pr.EntitiesDirPath }}
        "{{ .Pr.Uri }}/{{ .Pr.EntitiesDirPath.Abs }}"
    {{- end }}
)

func (d *St) {{ .EName.Camel }}Get(ctx context.Context, id int64) (*entities.{{ .EName.Camel }}St, error) {
    result := &entities.{{ .EName.Camel }}St{}

    err := d.DbQueryRow(ctx, `
        select {{ range $i, $field := .Ctx4Get.scanableFields -}}
        {{ if gt $i 0 }}
             , {{ end }}t.{{ $field.JsonName }}
        {{- end }}
        from {{ .TName }} t
        where t.id = $1
    `, id).Scan(
    {{- range $field := .Ctx4Get.scanableFields }}
        &result.{{ $field.Name.Origin }},
    {{- end }}
    )
    if err != nil {
        if err == pgx.ErrNoRows {
            return nil, nil
        }
        return nil, d.handleError(ctx, err)
    }

    return result, nil
}

func (d *St) {{ .EName.Camel }}List(ctx context.Context, pars entities.{{ .EName.Camel }}ListParsSt) ([]*entities.{{ .EName.Camel }}ListSt{{ if .Ctx4List.hasPagination -}}, int64{{ end }}, error) {
    var err error

    qFrom := ` from {{ .TName }} t`
    qWhere := ` where 1=1`
    qOffset := ``
    qLimit := ``

    args := map[string]interface{}{}

    // filter
    {{- range $field := .Ctx4List.parsFields }}
        {{- if $field.IsTypePointer }}
            {{- if parsFieldAssocName $.Ent $field }}
                {{- if fieldSubQueryForIn $field $field.Name.Snake }}
                    if pars.{{ $field.Name.Origin }} != nil {
                        qWhere += ` and t.{{ parsFieldAssocName $.Ent $field }} in {{ fieldSubQueryForIn $field $field.Name.Snake }}`
                        args["{{ $field.Name.Snake }}"] = *pars.{{ $field.Name.Origin }}
                    }
                {{- else }}
                    if pars.{{ $field.Name.Origin }} != nil {
                        qWhere += ` and t.{{ parsFieldAssocName $.Ent $field }} = {{ "${" }}{{ parsFieldAssocName $.Ent $field }}{{ "}" }}`
                        args["{{ $field.Name.Snake }}"] = *pars.{{ $field.Name.Origin }}
                    }
                {{- end }}
            {{- end }}
        {{- end }}
    {{- end }}

    {{- if .Ctx4List.hasPagination }}

        var tCount int64

        if pars.Limit > 0 {
            err = d.DbQueryRowM(ctx, `select count(*)`+qFrom+qWhere, args).Scan(&tCount)
            if err != nil {
                return nil, 0, d.handleError(ctx, err)
            }

            qOffset = ` offset ` + strconv.FormatInt(pars.Offset, 10)
            qLimit = ` limit ` + strconv.FormatInt(pars.Limit, 10)
        }
    {{- end }}

    qSelect := `
        select {{ range $i, $field := .Ctx4List.scanableFields -}}
        {{ if gt $i 0 }}
             , {{ end }}t.{{ $field.JsonName }}
        {{- end }}
    `

    {{ if len .Ctx4List.fields }}
        qOrderBy := ` order by t.{{ (index .Ctx4List.fields 0).JsonName }}`
    {{- else }}
        qOrderBy := ``
    {{- end }}

    rows, err := d.DbQueryM(ctx, qSelect+qFrom+qWhere+qOrderBy+qOffset+qLimit, args)
    if err != nil {
        return nil{{ if .Ctx4List.hasPagination -}}, 0{{ end }}, d.handleError(ctx, err)
    }
    defer rows.Close()

    recs := make([]*entities.{{ .EName.Camel }}ListSt, 0)

    for rows.Next() {
        rec := &entities.{{ .EName.Camel }}ListSt{}

        err = rows.Scan(
        {{- range $field := .Ctx4List.scanableFields }}
            &rec.{{ $field.Name.Origin }},
        {{- end }}
        )
        if err != nil {
            return nil{{ if .Ctx4List.hasPagination -}}, 0{{ end }}, d.handleError(err)
        }

        recs = append(recs, rec)
    }
    if err = rows.Err(); err != nil {
        return nil{{ if .Ctx4List.hasPagination -}}, 0{{ end }}, d.handleError(err)
    }

    return recs{{ if .Ctx4List.hasPagination -}}, tCount{{ end }}, nil
}

func (d *St) {{ .EName.Camel }}IdExists(ctx context.Context, id int64) (bool, error) {
	var cnt uint32

	err := d.DbQueryRow(ctx, `
		select count(*)
		from {{ .TName }}
		where id = $1
	`, id).Scan(&cnt)
	if err != nil {
		return false, d.handleError(ctx, err)
	}

	return cnt > 0, nil
}

func (d *St) {{ .EName.Camel }}GetCUArgs(obj *entities.{{ .EName.Camel }}CUSt) (map[string]interface{}, error) {
	result := make(map[string]interface{})

    {{- range $field := .Ctx4CuArgs.fields }}
        {{- if $field.IsTypePointer }}

            if obj.{{ $field.Name.Origin }} != nil {
                result["{{ $field.JsonName }}"] = *obj.{{ $field.Name.Origin }}
            }
        {{- end }}
    {{- end }}

	return result, nil
}

func (d *St) {{ .EName.Camel }}Create(ctx context.Context, obj *entities.{{ .EName.Camel }}CUSt) (int64, error) {
	args, err := d.{{ .EName.Camel }}GetCUArgs(obj)
	if err != nil {
		return 0, err
	}

	var fields string
	var values string

	for k := range args {
		if fields != `` {
			fields += `,`
			values += `,`
		}
		fields += k
		values += `${` + k + `}`
	}

	var newId int64

	err = d.DbQueryRowM(ctx, `
		insert into {{ .TName }}(`+fields+`)
		values (`+values+`)
		returning id
	`, args).Scan(&newId)
	if err != nil {
		return 0, d.handleError(ctx, err)
	}

	return newId, nil
}

func (d *St) {{ .EName.Camel }}Update(ctx context.Context, id int64, obj *entities.{{ .EName.Camel }}CUSt) error {
	args, err := d.{{ .EName.Camel }}GetCUArgs(obj)
	if err != nil {
		return err
	}

	if len(args) > 0 {
		var fields string

		for k := range args {
			if fields != `` {
				fields += `,`
			}
			fields += k + `=${` + k + `}`
		}

		args["id"] = id

		_, err = d.DbExecM(ctx, `
			update {{ .TName }}
			set `+fields+`
			where id = ${id}
		`, args)
		if err != nil {
			return d.handleError(ctx, err)
		}
	}

	return nil
}

func (d *St) {{ .EName.Camel }}Delete(ctx context.Context, id int64) error {
	_, err := d.DbExec(ctx, `delete from {{ .TName }} where id = $1`, id)
	if err != nil {
		return d.handleError(ctx, err)
	}

	return nil
}
