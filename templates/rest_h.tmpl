package rest

import (
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
	"{{ .Pr.Uri }}/{{ .Pr.EntitiesDirPath.Rel }}"
)

{{ if .Ent.IdField }}
// swagger:parameters h{{ .EName.Camel }}Get h{{ .EName.Camel }}Update h{{ .EName.Camel }}Delete
type doc{{ .EName.Camel }}PathParIdSt struct {
	// in: path
	{{ .Ent.IdField.Name.Origin }} {{ if .Ent.IdField.IsTypeInt -}}int64{{ else }}string{{ end }} `json:"{{ .Ent.IdField.JsonName }}"`
}
{{ end }}

// swagger:parameters h{{ .EName.Camel }}Create h{{ .EName.Camel }}Update
type doc{{ .EName.Camel }}BodyParObjSt struct {
	// in: body
	Body entities.{{ .EName.Camel }}CUSt
}

// swagger:route GET /{{ .EName.Snake }} {{ .EName.Snake }} h{{ .EName.Camel }}List
// Security:
//   token:
// Responses:
//   200: {{ .EName.LCamel }}ListRep
//   400: errRep
func (a *St) h{{ .EName.Camel }}List(w http.ResponseWriter, r *http.Request) {
	{{- if .Ent.ListParsSt }}
		// swagger:parameters h{{ .EName.Camel }}List
		type docReqSt struct {
			{{- if .Ctx4List.hasPagination }}
				// in:query
				entities.PaginationParams
			{{- end }}
			{{- range $field := .Ctx4List.parsFields }}
				{{- if getQueryParParser $field }}
					// in:query
					{{ $field.Name.Origin }} {{ $field.Type }} `json:"{{ $field.Name.Snake }}"`
				{{- end }}
			{{- end }}
		}
	{{- end }}

	// swagger:response {{ .EName.LCamel }}ListRep
	type docRepSt struct {
		// in:body
		{{- if .Ctx4List.hasPagination }}
			Body struct {
				DocPaginatedListRepSt
				Results []*entities.{{ .EName.Camel }}ListSt `json:"results"`
			}
		{{- else }}
			Body []*entities.{{ .EName.Camel }}ListSt
		{{- end }}
	}

	{{ if .Ent.ListParsSt -}}
		{{ if not (len .Ctx4List.parsFields) }}// {{ end }}qPars := r.URL.Query()

		pars := &entities.{{ .EName.Camel }}ListParsSt{
		{{- range $field := .Ctx4List.parsFields }}
			{{- if getQueryParParser $field }}
				{{ $field.Name.Origin }}: a.{{ getQueryParParser $field }}(qPars, "{{ $field.Name.Snake }}"),
			{{- end }}
		{{- end }}
		}

		{{- if .Ctx4List.hasPagination }}

			offset, limit, page := a.uExtractPaginationPars(qPars)
			pars.Offset = offset
			pars.Limit = limit

			paginated := pars.Limit > 0

			result, tCount, err := a.ucs.{{ .EName.Camel }}List(a.uGetRequestContext(r), pars)
			if a.uHandleError(err, r, w) {
				return
			}

			if paginated {
				a.uRespondJSON(w, &PaginatedListRepSt{
					Page:       page,
					PageSize:   limit,
					TotalCount: tCount,
					Results:    result,
				})
			} else {
				a.uRespondJSON(w, result)
			}
		{{- else }}

			result, err := a.ucs.{{ .EName.Camel }}List(a.uGetRequestContext(r), pars)
			if a.uHandleError(err, r, w) {
				return
			}

			a.uRespondJSON(w, result)
		{{- end }}
	{{- else }}
		result, err := a.ucs.{{ .EName.Camel }}List(a.uGetRequestContext(r))
		if a.uHandleError(err, r, w) {
			return
		}

		a.uRespondJSON(w, result)
	{{- end }}
}

// swagger:route POST /{{ .EName.Snake }} {{ .EName.Snake }} h{{ .EName.Camel }}Create
// Security:
//   token:
// Responses:
//   200: {{- if .Ent.IdField }} {{ .EName.LCamel }}CreateRep{{ end }}
//   400: errRep
func (a *St) h{{ .EName.Camel }}Create(w http.ResponseWriter, r *http.Request) {
	{{ if .Ent.IdField -}}
		// swagger:response {{ .EName.LCamel }}CreateRep
		type docRepSt struct {
			// in:body
			Body struct {
				{{ .Ent.IdField.Name.Origin }} {{ if .Ent.IdField.IsTypeInt -}}int64{{ else }}string{{ end }} `json:"{{ .Ent.IdField.JsonName }}"`
			}
		}

	{{ end -}}

	reqObj := &entities.{{ .EName.Camel }}CUSt{}
	if !a.uParseRequestJSON(w, r, reqObj) {
		return
	}

	{{ if .Ent.IdField }}result, {{ end }}err := a.ucs.{{ .EName.Camel }}Create(a.uGetRequestContext(r), reqObj)
	if a.uHandleError(err, r, w) {
		return
	}

	{{ if .Ent.IdField -}}
		a.uRespondJSON(w, map[string]{{ .Ent.IdField.Type -}}{"{{ .Ent.IdField.JsonName -}}": result})
	{{- else }}
		w.WriteHeader(200)
	{{- end }}
}

{{ if or .Ent.GetParsSt .Ent.IdField }}
// swagger:route GET /{{ .EName.Snake }}/{{ if .Ent.IdField }}{{ "{" }}{{ .Ent.IdField.JsonName }}{{ "}" }}{{ else }}one{{ end }} {{ .EName.Snake }} h{{ .EName.Camel }}Get
// Security:
//   token:
// Responses:
//   200: {{ .EName.LCamel }}Rep
//   400: errRep
func (a *St) h{{ .EName.Camel }}Get(w http.ResponseWriter, r *http.Request) {
	{{- if .Ent.GetParsSt }}
		// swagger:parameters h{{ .EName.Camel }}Get
		type docReqSt struct {
			{{- range $field := .Ent.GetParsSt.Fields }}
				{{- if not $field.IsId }}
					{{- if getQueryParParser $field }}
						// in:query
						{{ $field.Name.Origin }} {{ $field.Type }} `json:"{{ $field.Name.Snake }}"`
					{{- end }}
				{{- end }}
			{{- end }}
		}

	{{ end }}

	// swagger:response {{ .EName.LCamel }}Rep
	type docRepSt struct {
		// in:body
		Body *entities.{{ .EName.Camel }}St
	}

	{{ if .Ent.GetParsSt -}}
		{{- if .Ent.GetParsSt.IdField }}
			args := mux.Vars(r)
			{{- if .Ent.IdField.IsTypeInt }}
				{{ .Ent.IdField.Name.LCamel }}, _ := strconv.ParseInt(args["{{ .Ent.IdField.JsonName }}"], 10, 64)
			{{- else }}
				{{ .Ent.IdField.Name.LCamel }} := args["{{ .Ent.IdField.JsonName }}"]
			{{- end }}

		{{ end -}}
		qPars := r.URL.Query()

		pars := &entities.{{ .EName.Camel }}GetParsSt{
		{{- if .Ent.GetParsSt.IdField }}
			{{ .Ent.GetParsSt.IdField.Name.Origin }}: {{ if .Ent.GetParsSt.IdField.IsTypePointer }}&{{ end }}{{ .Ent.IdField.Name.LCamel }},
		{{- end }}
		{{- range $field := .Ent.GetParsSt.Fields }}
			{{- if not $field.IsId }}
				{{- if getQueryParParser $field }}
					{{ $field.Name.Origin }}: a.{{ getQueryParParser $field }}(qPars, "{{ $field.Name.Snake }}"),
				{{- end }}
			{{- end }}
		{{- end }}
		}

		result, err := a.ucs.{{ .EName.Camel }}Get(a.uGetRequestContext(r), pars)
		if a.uHandleError(err, r, w) {
			return
		}
	{{- else }}
		args := mux.Vars(r)
		{{- if .Ent.IdField.IsTypeInt }}
			{{ .Ent.IdField.Name.LCamel }}, _ := strconv.ParseInt(args["{{ .Ent.IdField.JsonName }}"], 10, 64)
		{{- else }}
			{{ .Ent.IdField.Name.LCamel }} := args["{{ .Ent.IdField.JsonName }}"]
		{{- end }}

		result, err := a.ucs.{{ .EName.Camel }}Get(a.uGetRequestContext(r), {{ .Ent.IdField.Name.LCamel }})
		if a.uHandleError(err, r, w) {
			return
		}
	{{- end }}

	a.uRespondJSON(w, result)
}
{{ end }}

{{ if .Ent.IdField }}
// swagger:route PUT /{{ .EName.Snake }}/{{ "{" }}{{ .Ent.IdField.JsonName }}{{ "}" }} {{ .EName.Snake }} h{{ .EName.Camel }}Update
// Security:
//   token:
// Responses:
//   200:
//   400: errRep
func (a *St) h{{ .EName.Camel }}Update(w http.ResponseWriter, r *http.Request) {
	args := mux.Vars(r)
	{{- if .Ent.IdField.IsTypeInt }}
		{{ .Ent.IdField.Name.LCamel }}, _ := strconv.ParseInt(args["{{ .Ent.IdField.JsonName }}"], 10, 64)
	{{- else }}
		{{ .Ent.IdField.Name.LCamel }} := args["{{ .Ent.IdField.JsonName }}"]
	{{- end }}

	reqObj := &entities.{{ .EName.Camel }}CUSt{}
	if !a.uParseRequestJSON(w, r, reqObj) {
		return
	}

	err := a.ucs.{{ .EName.Camel }}Update(a.uGetRequestContext(r), {{ .Ent.IdField.Name.LCamel }}, reqObj)
	if a.uHandleError(err, r, w) {
		return
	}

	w.WriteHeader(200)
}
{{ end }}

{{ if .Ent.IdField }}
// swagger:route DELETE /{{ .EName.Snake }}/{{ "{" }}{{ .Ent.IdField.JsonName }}{{ "}" }} {{ .EName.Snake }} h{{ .EName.Camel }}Delete
// Security:
//   token:
// Responses:
//   200:
//   400: errRep
func (a *St) h{{ .EName.Camel }}Delete(w http.ResponseWriter, r *http.Request) {
	args := mux.Vars(r)
	{{- if .Ent.IdField.IsTypeInt }}
		{{ .Ent.IdField.Name.LCamel }}, _ := strconv.ParseInt(args["{{ .Ent.IdField.JsonName }}"], 10, 64)
	{{- else }}
		{{ .Ent.IdField.Name.LCamel }} := args["{{ .Ent.IdField.JsonName }}"]
	{{- end }}

	err := a.ucs.{{ .EName.Camel }}Delete(a.uGetRequestContext(r), {{ .Ent.IdField.Name.LCamel }})
	if a.uHandleError(err, r, w) {
		return
	}

	w.WriteHeader(200)
}
{{ end }}
