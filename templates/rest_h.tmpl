package rest

import (
	"net/http"
	"strconv"

	"github.com/gorilla/mux"
	"{{ .Pr.Uri }}/{{ .Pr.EntitiesDirPath.Rel }}"
)

func (a *St) h{{ .EName.Camel }}List(w http.ResponseWriter, r *http.Request) {
	qPars := r.URL.Query()

	pars := &entities.{{ .EName.Camel }}ListParsSt{
	{{- range $field := .Ctx4List.parsFields }}
		{{- if getListParParser $field }}
			{{ $field.Name.Origin }}: a.{{ getListParParser $field }}(qPars, "{{ $field.Name.Snake }}"),
		{{- end }}
	{{- end }}
	}

	{{- if .Ctx4List.hasPagination }}

		offset, limit, page := a.uExtractPaginationPars(qPars)
		pars.Offset = offset
		pars.Limit = limit

		paginated := pars.Limit > 0

		result, tCount, err := a.ucs.{{ .EName.Camel }}List(a.uGetRequestContext(r), pars)
		if a.uHandleError(err, r, w) {
			return
		}

		if paginated {
			a.uRespondJSON(w, &PaginatedListRepSt{
				Page:       page,
				PageSize:   limit,
				TotalCount: tCount,
				Results:    result,
			})
		} else {
			a.uRespondJSON(w, result)
		}
	{{- else }}

		result, err := a.ucs.{{ .EName.Camel }}List(a.uGetRequestContext(r), pars)
		if a.uHandleError(err, r, w) {
			return
		}

		a.uRespondJSON(w, result)
	{{- end }}
}

func (a *St) h{{ .EName.Camel }}Create(w http.ResponseWriter, r *http.Request) {
	reqObj := &entities.{{ .EName.Camel }}CUSt{}
	if !a.uParseRequestJSON(w, r, reqObj) {
		return
	}

	newId, err := a.ucs.{{ .EName.Camel }}Create(a.uGetRequestContext(r), reqObj)
	if a.uHandleError(err, r, w) {
		return
	}

	a.uRespondJSON(w, map[string]int64{"id": newId})
}

func (a *St) h{{ .EName.Camel }}Get(w http.ResponseWriter, r *http.Request) {
	args := mux.Vars(r)
	id, _ := strconv.ParseInt(args["id"], 10, 64)

	result, err := a.ucs.{{ .EName.Camel }}Get(a.uGetRequestContext(r), id)
	if a.uHandleError(err, r, w) {
		return
	}

	a.uRespondJSON(w, result)
}

func (a *St) h{{ .EName.Camel }}Update(w http.ResponseWriter, r *http.Request) {
	args := mux.Vars(r)
	id, _ := strconv.ParseInt(args["id"], 10, 64)

	reqObj := &entities.{{ .EName.Camel }}CUSt{}
	if !a.uParseRequestJSON(w, r, reqObj) {
		return
	}

	err := a.ucs.{{ .EName.Camel }}Update(a.uGetRequestContext(r), id, reqObj)
	if a.uHandleError(err, r, w) {
		return
	}

	w.WriteHeader(200)
}

func (a *St) h{{ .EName.Camel }}Delete(w http.ResponseWriter, r *http.Request) {
	args := mux.Vars(r)
	id, _ := strconv.ParseInt(args["id"], 10, 64)

	err := a.ucs.{{ .EName.Camel }}Delete(a.uGetRequestContext(r), id)
	if a.uHandleError(err, r, w) {
		return
	}

	w.WriteHeader(200)
}
