package usecases

import (
	"context"
	"{{ .Pr.Uri }}/{{ .Pr.EntitiesDirPath.Rel }}"
)

func (u *St) {{ .EName.Camel }}List(ctx context.Context,
	pars *entities.{{ .EName.Camel }}ListParsSt) ([]*entities.{{ .EName.Camel }}ListSt{{ if .Ctx4List.hasPagination -}}, int64{{ end }}, error) {
	var err error

	ses := u.ContextGetSession(ctx)

	if err = u.SessionRequireAuth(ses); err != nil {
		return nil{{ if .Ctx4List.hasPagination -}}, 0{{ end }}, err
	}

	if ctx, err = u.db.ContextWithTransaction(ctx); err != nil {
		return nil{{ if .Ctx4List.hasPagination -}}, 0{{ end }}, err
	}
	defer func() { u.db.RollbackContextTransaction(ctx) }()

	items{{ if .Ctx4List.hasPagination -}}, tCount{{ end }}, err := u.cr.{{ .EName.Camel }}.List(ctx, pars)
	if err != nil {
		return nil{{ if .Ctx4List.hasPagination -}}, 0{{ end }}, err
	}

	if err = u.db.CommitContextTransaction(ctx); err != nil {
		return nil{{ if .Ctx4List.hasPagination -}}, 0{{ end }}, err
	}

	return items{{ if .Ctx4List.hasPagination -}}, tCount{{ end }}, nil
}

func (u *St) {{ .EName.Camel }}Get(ctx context.Context,
	id int64) (*entities.{{ .EName.Camel }}St, error) {
	var err error

	ses := u.ContextGetSession(ctx)

	if err = u.SessionRequireAuth(ses); err != nil {
		return nil, err
	}

	if ctx, err = u.db.ContextWithTransaction(ctx); err != nil {
		return nil, err
	}
	defer func() { u.db.RollbackContextTransaction(ctx) }()

	result, err := u.cr.{{ .EName.Camel }}.Get(ctx, id, true)
	if err != nil {
		return nil, err
	}

	if err = u.db.CommitContextTransaction(ctx); err != nil {
		return nil, err
	}

	return result, nil
}

func (u *St) {{ .EName.Camel }}Create(ctx context.Context,
	obj *entities.{{ .EName.Camel }}CUSt) (int64, error) {
	var err error

	ses := u.ContextGetSession(ctx)

	if err = u.SessionRequireAuth(ses); err != nil {
		return 0, err
	}

	if ctx, err = u.db.ContextWithTransaction(ctx); err != nil {
		return 0, err
	}
	defer func() { u.db.RollbackContextTransaction(ctx) }()

	newId, err := u.cr.{{ .EName.Camel }}.Create(ctx, obj)
	if err != nil {
		return 0, err
	}

	if err = u.db.CommitContextTransaction(ctx); err != nil {
		return 0, err
	}

	return newId, nil
}

func (u *St) {{ .EName.Camel }}Update(ctx context.Context,
	id int64, obj *entities.{{ .EName.Camel }}CUSt) error {
	var err error

	ses := u.ContextGetSession(ctx)

	if err = u.SessionRequireAuth(ses); err != nil {
		return err
	}

	if ctx, err = u.db.ContextWithTransaction(ctx); err != nil {
		return err
	}
	defer func() { u.db.RollbackContextTransaction(ctx) }()

	err = u.cr.{{ .EName.Camel }}.Update(ctx, id, obj)
	if err != nil {
		return err
	}

	if err = u.db.CommitContextTransaction(ctx); err != nil {
		return err
	}

	return nil
}

func (u *St) {{ .EName.Camel }}Delete(ctx context.Context,
	id int64) error {
	var err error

	ses := u.ContextGetSession(ctx)

	if err = u.SessionRequireAuth(ses); err != nil {
		return err
	}

	if ctx, err = u.db.ContextWithTransaction(ctx); err != nil {
		return err
	}
	defer func() { u.db.RollbackContextTransaction(ctx) }()

	err = u.cr.{{ .EName.Camel }}.Delete(ctx, id)
	if err != nil {
		return err
	}

	if err = u.db.CommitContextTransaction(ctx); err != nil {
		return err
	}

	return nil
}
