package core

import (
	"context"
	"{{ .Pr.Uri }}/{{ .Pr.EntitiesDirPath.Rel }}"
	"{{ .Pr.Uri }}/internal/domain/errs"
)

type {{ .EName.Camel }} struct {
	r *St
}

func New{{ .EName.Camel }}(r *St) *{{ .EName.Camel }} {
	return &{{ .EName.Camel }}{r: r}
}

func (c *{{ .EName.Camel }}) ValidateCU(ctx context.Context, obj *entities.{{ .EName.Camel }}CUSt, id int64) error {
	// forCreate := id == 0

	return nil
}

func (c *{{ .EName.Camel }}) List(ctx context.Context, pars entities.{{ .EName.Camel }}ListParsSt) ([]*entities.{{ .EName.Camel }}ListSt{{ if .Ctx4List.hasPagination -}}, int64{{ end }}, error) {
	items{{ if .Ctx4List.hasPagination -}}, tCount{{ end }}, err := c.r.db.{{ .EName.Camel }}List(ctx, pars)
	if err != nil {
		return nil{{ if .Ctx4List.hasPagination -}}, 0{{ end }}, err
	}

	return items{{ if .Ctx4List.hasPagination -}}, tCount{{ end }}, nil
}

func (c *{{ .EName.Camel }}) Get(ctx context.Context, id int64, errNE bool) (*entities.{{ .EName.Camel }}St, error) {
	result, err := c.r.db.{{ .EName.Camel }}Get(ctx, id)
	if err != nil {
		return nil, err
	}
	if result == nil {
		if errNE {
			return nil, errs.ObjectNotFound
		}
		return nil, nil
	}

	return result, nil
}

func (c *{{ .EName.Camel }}) IdExists(ctx context.Context, id int64) (bool, error) {
	return c.r.db.{{ .EName.Camel }}IdExists(ctx, id)
}

func (c *{{ .EName.Camel }}) Create(ctx context.Context, obj *entities.{{ .EName.Camel }}CUSt) (int64, error) {
	err := c.ValidateCU(ctx, obj, 0)
	if err != nil {
		return 0, err
	}

	var newId int64

	// create
	newId, err = c.r.db.{{ .EName.Camel }}Create(ctx, obj)
	if err != nil {
		return 0, err
	}

	return newId, nil
}

func (c *{{ .EName.Camel }}) Update(ctx context.Context, id int64, obj *entities.{{ .EName.Camel }}CUSt) error {
	var err error

	err = c.ValidateCU(ctx, obj, id)
	if err != nil {
		return err
	}

	err = c.r.db.{{ .EName.Camel }}Update(ctx, id, obj)
	if err != nil {
		return err
	}

	return nil
}

func (c *{{ .EName.Camel }}) Delete(ctx context.Context, id int64) error {
	return c.r.db.{{ .EName.Camel }}Delete(ctx, id)
}
